Grammar:

Rule 0     S' -> program
Rule 1     program -> program action
Rule 2     program -> action
Rule 3     action -> function
Rule 4     action -> statement
Rule 5     action -> expr
Rule 6     expr -> expr [ parameter_list ]  [precedence=left, level=9]
Rule 7     expr -> expr ( )  [precedence=left, level=9]
Rule 8     expr -> expr ( parameter_list )  [precedence=left, level=9]
Rule 9     expr -> ZEROS ( parameter_list )
Rule 10    expr -> ONES ( parameter_list )
Rule 11    expr -> EYE ( parameter_list )
Rule 12    expr -> STRING
Rule 13    expr -> FLOAT_NUMBER
Rule 14    expr -> INT_NUMBER
Rule 15    expr -> ID
Rule 16    expr -> ( expr )
Rule 17    expr -> expr '  [precedence=left, level=8]
Rule 18    expr -> NOT expr  [precedence=right, level=7]
Rule 19    expr -> MINUS expr  [precedence=right, level=7]
Rule 20    expr -> expr : expr  [precedence=nonassoc, level=2]
Rule 21    expr -> expr XOR expr  [precedence=left, level=3]
Rule 22    expr -> expr OR expr  [precedence=left, level=3]
Rule 23    expr -> expr AND expr  [precedence=left, level=3]
Rule 24    expr -> expr LOWER_EQUAL expr  [precedence=left, level=4]
Rule 25    expr -> expr LOWER expr  [precedence=left, level=4]
Rule 26    expr -> expr GREATER_EQUAL expr  [precedence=left, level=4]
Rule 27    expr -> expr GREATER expr  [precedence=left, level=4]
Rule 28    expr -> expr NOT_EQUAL expr  [precedence=left, level=4]
Rule 29    expr -> expr EQUAL expr  [precedence=left, level=4]
Rule 30    expr -> expr DOT_REMAINDER expr  [precedence=left, level=6]
Rule 31    expr -> expr DOT_DIVIDE expr  [precedence=left, level=6]
Rule 32    expr -> expr DOT_TIMES expr  [precedence=left, level=6]
Rule 33    expr -> expr DOT_MINUS expr  [precedence=left, level=5]
Rule 34    expr -> expr DOT_PLUS expr  [precedence=left, level=5]
Rule 35    expr -> expr REMAINDER expr  [precedence=left, level=6]
Rule 36    expr -> expr DIVIDE expr  [precedence=left, level=6]
Rule 37    expr -> expr TIMES expr  [precedence=left, level=6]
Rule 38    expr -> expr MINUS expr  [precedence=left, level=5]
Rule 39    expr -> expr PLUS expr  [precedence=left, level=5]
Rule 40    parameter_list -> expr
Rule 41    parameter_list -> parameter_list , expr
Rule 42    parameter_list -> <empty>
Rule 43    statement -> { statement_series }
Rule 44    statement -> FOR ( ID IN expr ) statement
Rule 45    statement -> WHILE ( expr ) statement
Rule 46    statement -> IF ( expr ) statement ELSE statement  [precedence=nonassoc, level=11]
Rule 47    statement -> IF ( expr ) statement  [precedence=nonassoc, level=10]
Rule 48    statement -> expr REMAINDER_ASSIGN expr ;
Rule 49    statement -> expr DIVIDE_ASSIGN expr ;
Rule 50    statement -> expr TIMES_ASSIGN expr ;
Rule 51    statement -> expr MINUS_ASSIGN expr ;
Rule 52    statement -> expr PLUS_ASSIGN expr ;
Rule 53    statement -> expr ASSIGN expr ;
Rule 54    statement -> CONTINUE ;
Rule 55    statement -> BREAK ;
Rule 56    statement -> RETURN expr ;
Rule 57    statement -> PRINT expr ;
Rule 58    statement -> expr ;
Rule 59    statement_series -> statement_series statement
Rule 60    statement_series -> statement
Rule 61    function -> FUNCTION ID ( ) statement
Rule 62    function -> FUNCTION ID ( parameter_list ) statement

Terminals, with rules where they appear:

'                    : 17
(                    : 7 8 9 10 11 16 44 45 46 47 61 62
)                    : 7 8 9 10 11 16 44 45 46 47 61 62
,                    : 41
:                    : 20
;                    : 48 49 50 51 52 53 54 55 56 57 58
AND                  : 23
ASSIGN               : 53
BREAK                : 55
CONTINUE             : 54
DIVIDE               : 36
DIVIDE_ASSIGN        : 49
DOT_DIVIDE           : 31
DOT_MINUS            : 33
DOT_PLUS             : 34
DOT_REMAINDER        : 30
DOT_TIMES            : 32
ELSE                 : 46
EQUAL                : 29
EYE                  : 11
FLOAT_NUMBER         : 13
FOR                  : 44
FUNCTION             : 61 62
GREATER              : 27
GREATER_EQUAL        : 26
ID                   : 15 44 61 62
IF                   : 46 47
IN                   : 44
INT_NUMBER           : 14
LOWER                : 25
LOWER_EQUAL          : 24
MINUS                : 19 38
MINUS_ASSIGN         : 51
NOT                  : 18
NOT_EQUAL            : 28
ONES                 : 10
OR                   : 22
PLUS                 : 39
PLUS_ASSIGN          : 52
PRINT                : 57
REMAINDER            : 35
REMAINDER_ASSIGN     : 48
RETURN               : 56
STRING               : 12
TIMES                : 37
TIMES_ASSIGN         : 50
WHILE                : 45
XOR                  : 21
ZEROS                : 9
[                    : 6
]                    : 6
error                : 
{                    : 43
}                    : 43

Nonterminals, with rules where they appear:

action               : 1 2
expr                 : 5 6 7 8 16 17 18 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 41 44 45 46 47 48 48 49 49 50 50 51 51 52 52 53 53 56 57 58
function             : 3
parameter_list       : 6 8 9 10 11 41 62
program              : 1 0
statement            : 4 44 45 46 46 47 59 60 61 62
statement_series     : 43 59


state 0

    (0) S' -> . program
    (1) program -> . program action
    (2) program -> . action
    (3) action -> . function
    (4) action -> . statement
    (5) action -> . expr
    (61) function -> . FUNCTION ID ( ) statement
    (62) function -> . FUNCTION ID ( parameter_list ) statement
    (43) statement -> . { statement_series }
    (44) statement -> . FOR ( ID IN expr ) statement
    (45) statement -> . WHILE ( expr ) statement
    (46) statement -> . IF ( expr ) statement ELSE statement
    (47) statement -> . IF ( expr ) statement
    (48) statement -> . expr REMAINDER_ASSIGN expr ;
    (49) statement -> . expr DIVIDE_ASSIGN expr ;
    (50) statement -> . expr TIMES_ASSIGN expr ;
    (51) statement -> . expr MINUS_ASSIGN expr ;
    (52) statement -> . expr PLUS_ASSIGN expr ;
    (53) statement -> . expr ASSIGN expr ;
    (54) statement -> . CONTINUE ;
    (55) statement -> . BREAK ;
    (56) statement -> . RETURN expr ;
    (57) statement -> . PRINT expr ;
    (58) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    FUNCTION        shift and go to state 6
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    program                        shift and go to state 1
    action                         shift and go to state 2
    function                       shift and go to state 3
    statement                      shift and go to state 4
    expr                           shift and go to state 5

state 1

    (0) S' -> program .
    (1) program -> program . action
    (3) action -> . function
    (4) action -> . statement
    (5) action -> . expr
    (61) function -> . FUNCTION ID ( ) statement
    (62) function -> . FUNCTION ID ( parameter_list ) statement
    (43) statement -> . { statement_series }
    (44) statement -> . FOR ( ID IN expr ) statement
    (45) statement -> . WHILE ( expr ) statement
    (46) statement -> . IF ( expr ) statement ELSE statement
    (47) statement -> . IF ( expr ) statement
    (48) statement -> . expr REMAINDER_ASSIGN expr ;
    (49) statement -> . expr DIVIDE_ASSIGN expr ;
    (50) statement -> . expr TIMES_ASSIGN expr ;
    (51) statement -> . expr MINUS_ASSIGN expr ;
    (52) statement -> . expr PLUS_ASSIGN expr ;
    (53) statement -> . expr ASSIGN expr ;
    (54) statement -> . CONTINUE ;
    (55) statement -> . BREAK ;
    (56) statement -> . RETURN expr ;
    (57) statement -> . PRINT expr ;
    (58) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    FUNCTION        shift and go to state 6
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    action                         shift and go to state 25
    function                       shift and go to state 3
    statement                      shift and go to state 4
    expr                           shift and go to state 5

state 2

    (2) program -> action .
    FUNCTION        reduce using rule 2 (program -> action .)
    {               reduce using rule 2 (program -> action .)
    FOR             reduce using rule 2 (program -> action .)
    WHILE           reduce using rule 2 (program -> action .)
    IF              reduce using rule 2 (program -> action .)
    CONTINUE        reduce using rule 2 (program -> action .)
    BREAK           reduce using rule 2 (program -> action .)
    RETURN          reduce using rule 2 (program -> action .)
    PRINT           reduce using rule 2 (program -> action .)
    ZEROS           reduce using rule 2 (program -> action .)
    ONES            reduce using rule 2 (program -> action .)
    EYE             reduce using rule 2 (program -> action .)
    STRING          reduce using rule 2 (program -> action .)
    FLOAT_NUMBER    reduce using rule 2 (program -> action .)
    INT_NUMBER      reduce using rule 2 (program -> action .)
    ID              reduce using rule 2 (program -> action .)
    (               reduce using rule 2 (program -> action .)
    NOT             reduce using rule 2 (program -> action .)
    MINUS           reduce using rule 2 (program -> action .)
    $end            reduce using rule 2 (program -> action .)


state 3

    (3) action -> function .
    FUNCTION        reduce using rule 3 (action -> function .)
    {               reduce using rule 3 (action -> function .)
    FOR             reduce using rule 3 (action -> function .)
    WHILE           reduce using rule 3 (action -> function .)
    IF              reduce using rule 3 (action -> function .)
    CONTINUE        reduce using rule 3 (action -> function .)
    BREAK           reduce using rule 3 (action -> function .)
    RETURN          reduce using rule 3 (action -> function .)
    PRINT           reduce using rule 3 (action -> function .)
    ZEROS           reduce using rule 3 (action -> function .)
    ONES            reduce using rule 3 (action -> function .)
    EYE             reduce using rule 3 (action -> function .)
    STRING          reduce using rule 3 (action -> function .)
    FLOAT_NUMBER    reduce using rule 3 (action -> function .)
    INT_NUMBER      reduce using rule 3 (action -> function .)
    ID              reduce using rule 3 (action -> function .)
    (               reduce using rule 3 (action -> function .)
    NOT             reduce using rule 3 (action -> function .)
    MINUS           reduce using rule 3 (action -> function .)
    $end            reduce using rule 3 (action -> function .)


state 4

    (4) action -> statement .
    FUNCTION        reduce using rule 4 (action -> statement .)
    {               reduce using rule 4 (action -> statement .)
    FOR             reduce using rule 4 (action -> statement .)
    WHILE           reduce using rule 4 (action -> statement .)
    IF              reduce using rule 4 (action -> statement .)
    CONTINUE        reduce using rule 4 (action -> statement .)
    BREAK           reduce using rule 4 (action -> statement .)
    RETURN          reduce using rule 4 (action -> statement .)
    PRINT           reduce using rule 4 (action -> statement .)
    ZEROS           reduce using rule 4 (action -> statement .)
    ONES            reduce using rule 4 (action -> statement .)
    EYE             reduce using rule 4 (action -> statement .)
    STRING          reduce using rule 4 (action -> statement .)
    FLOAT_NUMBER    reduce using rule 4 (action -> statement .)
    INT_NUMBER      reduce using rule 4 (action -> statement .)
    ID              reduce using rule 4 (action -> statement .)
    (               reduce using rule 4 (action -> statement .)
    NOT             reduce using rule 4 (action -> statement .)
    MINUS           reduce using rule 4 (action -> statement .)
    $end            reduce using rule 4 (action -> statement .)


state 5

    (5) action -> expr .
    (48) statement -> expr . REMAINDER_ASSIGN expr ;
    (49) statement -> expr . DIVIDE_ASSIGN expr ;
    (50) statement -> expr . TIMES_ASSIGN expr ;
    (51) statement -> expr . MINUS_ASSIGN expr ;
    (52) statement -> expr . PLUS_ASSIGN expr ;
    (53) statement -> expr . ASSIGN expr ;
    (58) statement -> expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    FUNCTION        reduce using rule 5 (action -> expr .)
    {               reduce using rule 5 (action -> expr .)
    FOR             reduce using rule 5 (action -> expr .)
    WHILE           reduce using rule 5 (action -> expr .)
    IF              reduce using rule 5 (action -> expr .)
    CONTINUE        reduce using rule 5 (action -> expr .)
    BREAK           reduce using rule 5 (action -> expr .)
    RETURN          reduce using rule 5 (action -> expr .)
    PRINT           reduce using rule 5 (action -> expr .)
    ZEROS           reduce using rule 5 (action -> expr .)
    ONES            reduce using rule 5 (action -> expr .)
    EYE             reduce using rule 5 (action -> expr .)
    STRING          reduce using rule 5 (action -> expr .)
    FLOAT_NUMBER    reduce using rule 5 (action -> expr .)
    INT_NUMBER      reduce using rule 5 (action -> expr .)
    ID              reduce using rule 5 (action -> expr .)
    NOT             reduce using rule 5 (action -> expr .)
    $end            reduce using rule 5 (action -> expr .)
    REMAINDER_ASSIGN shift and go to state 26
    DIVIDE_ASSIGN   shift and go to state 28
    TIMES_ASSIGN    shift and go to state 29
    MINUS_ASSIGN    shift and go to state 30
    PLUS_ASSIGN     shift and go to state 31
    ASSIGN          shift and go to state 32
    ;               shift and go to state 27
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 6

    (61) function -> FUNCTION . ID ( ) statement
    (62) function -> FUNCTION . ID ( parameter_list ) statement
    ID              shift and go to state 56


state 7

    (15) expr -> ID .
    REMAINDER_ASSIGN reduce using rule 15 (expr -> ID .)
    DIVIDE_ASSIGN   reduce using rule 15 (expr -> ID .)
    TIMES_ASSIGN    reduce using rule 15 (expr -> ID .)
    MINUS_ASSIGN    reduce using rule 15 (expr -> ID .)
    PLUS_ASSIGN     reduce using rule 15 (expr -> ID .)
    ASSIGN          reduce using rule 15 (expr -> ID .)
    ;               reduce using rule 15 (expr -> ID .)
    [               reduce using rule 15 (expr -> ID .)
    (               reduce using rule 15 (expr -> ID .)
    '               reduce using rule 15 (expr -> ID .)
    :               reduce using rule 15 (expr -> ID .)
    XOR             reduce using rule 15 (expr -> ID .)
    OR              reduce using rule 15 (expr -> ID .)
    AND             reduce using rule 15 (expr -> ID .)
    LOWER_EQUAL     reduce using rule 15 (expr -> ID .)
    LOWER           reduce using rule 15 (expr -> ID .)
    GREATER_EQUAL   reduce using rule 15 (expr -> ID .)
    GREATER         reduce using rule 15 (expr -> ID .)
    NOT_EQUAL       reduce using rule 15 (expr -> ID .)
    EQUAL           reduce using rule 15 (expr -> ID .)
    DOT_REMAINDER   reduce using rule 15 (expr -> ID .)
    DOT_DIVIDE      reduce using rule 15 (expr -> ID .)
    DOT_TIMES       reduce using rule 15 (expr -> ID .)
    DOT_MINUS       reduce using rule 15 (expr -> ID .)
    DOT_PLUS        reduce using rule 15 (expr -> ID .)
    REMAINDER       reduce using rule 15 (expr -> ID .)
    DIVIDE          reduce using rule 15 (expr -> ID .)
    TIMES           reduce using rule 15 (expr -> ID .)
    MINUS           reduce using rule 15 (expr -> ID .)
    PLUS            reduce using rule 15 (expr -> ID .)
    FUNCTION        reduce using rule 15 (expr -> ID .)
    {               reduce using rule 15 (expr -> ID .)
    FOR             reduce using rule 15 (expr -> ID .)
    WHILE           reduce using rule 15 (expr -> ID .)
    IF              reduce using rule 15 (expr -> ID .)
    CONTINUE        reduce using rule 15 (expr -> ID .)
    BREAK           reduce using rule 15 (expr -> ID .)
    RETURN          reduce using rule 15 (expr -> ID .)
    PRINT           reduce using rule 15 (expr -> ID .)
    ZEROS           reduce using rule 15 (expr -> ID .)
    ONES            reduce using rule 15 (expr -> ID .)
    EYE             reduce using rule 15 (expr -> ID .)
    STRING          reduce using rule 15 (expr -> ID .)
    FLOAT_NUMBER    reduce using rule 15 (expr -> ID .)
    INT_NUMBER      reduce using rule 15 (expr -> ID .)
    ID              reduce using rule 15 (expr -> ID .)
    NOT             reduce using rule 15 (expr -> ID .)
    $end            reduce using rule 15 (expr -> ID .)
    )               reduce using rule 15 (expr -> ID .)
    ]               reduce using rule 15 (expr -> ID .)
    ,               reduce using rule 15 (expr -> ID .)


state 8

    (16) expr -> ( . expr )
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 57

state 9

    (43) statement -> { . statement_series }
    (59) statement_series -> . statement_series statement
    (60) statement_series -> . statement
    (43) statement -> . { statement_series }
    (44) statement -> . FOR ( ID IN expr ) statement
    (45) statement -> . WHILE ( expr ) statement
    (46) statement -> . IF ( expr ) statement ELSE statement
    (47) statement -> . IF ( expr ) statement
    (48) statement -> . expr REMAINDER_ASSIGN expr ;
    (49) statement -> . expr DIVIDE_ASSIGN expr ;
    (50) statement -> . expr TIMES_ASSIGN expr ;
    (51) statement -> . expr MINUS_ASSIGN expr ;
    (52) statement -> . expr PLUS_ASSIGN expr ;
    (53) statement -> . expr ASSIGN expr ;
    (54) statement -> . CONTINUE ;
    (55) statement -> . BREAK ;
    (56) statement -> . RETURN expr ;
    (57) statement -> . PRINT expr ;
    (58) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    statement_series               shift and go to state 58
    statement                      shift and go to state 59
    expr                           shift and go to state 60

state 10

    (44) statement -> FOR . ( ID IN expr ) statement
    (               shift and go to state 61


state 11

    (45) statement -> WHILE . ( expr ) statement
    (               shift and go to state 62


state 12

    (46) statement -> IF . ( expr ) statement ELSE statement
    (47) statement -> IF . ( expr ) statement
    (               shift and go to state 63


state 13

    (54) statement -> CONTINUE . ;
    ;               shift and go to state 64


state 14

    (55) statement -> BREAK . ;
    ;               shift and go to state 65


state 15

    (56) statement -> RETURN . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 66

state 16

    (57) statement -> PRINT . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 67

state 17

    (9) expr -> ZEROS . ( parameter_list )
    (               shift and go to state 68


state 18

    (10) expr -> ONES . ( parameter_list )
    (               shift and go to state 69


state 19

    (11) expr -> EYE . ( parameter_list )
    (               shift and go to state 70


state 20

    (12) expr -> STRING .
    REMAINDER_ASSIGN reduce using rule 12 (expr -> STRING .)
    DIVIDE_ASSIGN   reduce using rule 12 (expr -> STRING .)
    TIMES_ASSIGN    reduce using rule 12 (expr -> STRING .)
    MINUS_ASSIGN    reduce using rule 12 (expr -> STRING .)
    PLUS_ASSIGN     reduce using rule 12 (expr -> STRING .)
    ASSIGN          reduce using rule 12 (expr -> STRING .)
    ;               reduce using rule 12 (expr -> STRING .)
    [               reduce using rule 12 (expr -> STRING .)
    (               reduce using rule 12 (expr -> STRING .)
    '               reduce using rule 12 (expr -> STRING .)
    :               reduce using rule 12 (expr -> STRING .)
    XOR             reduce using rule 12 (expr -> STRING .)
    OR              reduce using rule 12 (expr -> STRING .)
    AND             reduce using rule 12 (expr -> STRING .)
    LOWER_EQUAL     reduce using rule 12 (expr -> STRING .)
    LOWER           reduce using rule 12 (expr -> STRING .)
    GREATER_EQUAL   reduce using rule 12 (expr -> STRING .)
    GREATER         reduce using rule 12 (expr -> STRING .)
    NOT_EQUAL       reduce using rule 12 (expr -> STRING .)
    EQUAL           reduce using rule 12 (expr -> STRING .)
    DOT_REMAINDER   reduce using rule 12 (expr -> STRING .)
    DOT_DIVIDE      reduce using rule 12 (expr -> STRING .)
    DOT_TIMES       reduce using rule 12 (expr -> STRING .)
    DOT_MINUS       reduce using rule 12 (expr -> STRING .)
    DOT_PLUS        reduce using rule 12 (expr -> STRING .)
    REMAINDER       reduce using rule 12 (expr -> STRING .)
    DIVIDE          reduce using rule 12 (expr -> STRING .)
    TIMES           reduce using rule 12 (expr -> STRING .)
    MINUS           reduce using rule 12 (expr -> STRING .)
    PLUS            reduce using rule 12 (expr -> STRING .)
    FUNCTION        reduce using rule 12 (expr -> STRING .)
    {               reduce using rule 12 (expr -> STRING .)
    FOR             reduce using rule 12 (expr -> STRING .)
    WHILE           reduce using rule 12 (expr -> STRING .)
    IF              reduce using rule 12 (expr -> STRING .)
    CONTINUE        reduce using rule 12 (expr -> STRING .)
    BREAK           reduce using rule 12 (expr -> STRING .)
    RETURN          reduce using rule 12 (expr -> STRING .)
    PRINT           reduce using rule 12 (expr -> STRING .)
    ZEROS           reduce using rule 12 (expr -> STRING .)
    ONES            reduce using rule 12 (expr -> STRING .)
    EYE             reduce using rule 12 (expr -> STRING .)
    STRING          reduce using rule 12 (expr -> STRING .)
    FLOAT_NUMBER    reduce using rule 12 (expr -> STRING .)
    INT_NUMBER      reduce using rule 12 (expr -> STRING .)
    ID              reduce using rule 12 (expr -> STRING .)
    NOT             reduce using rule 12 (expr -> STRING .)
    $end            reduce using rule 12 (expr -> STRING .)
    )               reduce using rule 12 (expr -> STRING .)
    ]               reduce using rule 12 (expr -> STRING .)
    ,               reduce using rule 12 (expr -> STRING .)


state 21

    (13) expr -> FLOAT_NUMBER .
    REMAINDER_ASSIGN reduce using rule 13 (expr -> FLOAT_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 13 (expr -> FLOAT_NUMBER .)
    TIMES_ASSIGN    reduce using rule 13 (expr -> FLOAT_NUMBER .)
    MINUS_ASSIGN    reduce using rule 13 (expr -> FLOAT_NUMBER .)
    PLUS_ASSIGN     reduce using rule 13 (expr -> FLOAT_NUMBER .)
    ASSIGN          reduce using rule 13 (expr -> FLOAT_NUMBER .)
    ;               reduce using rule 13 (expr -> FLOAT_NUMBER .)
    [               reduce using rule 13 (expr -> FLOAT_NUMBER .)
    (               reduce using rule 13 (expr -> FLOAT_NUMBER .)
    '               reduce using rule 13 (expr -> FLOAT_NUMBER .)
    :               reduce using rule 13 (expr -> FLOAT_NUMBER .)
    XOR             reduce using rule 13 (expr -> FLOAT_NUMBER .)
    OR              reduce using rule 13 (expr -> FLOAT_NUMBER .)
    AND             reduce using rule 13 (expr -> FLOAT_NUMBER .)
    LOWER_EQUAL     reduce using rule 13 (expr -> FLOAT_NUMBER .)
    LOWER           reduce using rule 13 (expr -> FLOAT_NUMBER .)
    GREATER_EQUAL   reduce using rule 13 (expr -> FLOAT_NUMBER .)
    GREATER         reduce using rule 13 (expr -> FLOAT_NUMBER .)
    NOT_EQUAL       reduce using rule 13 (expr -> FLOAT_NUMBER .)
    EQUAL           reduce using rule 13 (expr -> FLOAT_NUMBER .)
    DOT_REMAINDER   reduce using rule 13 (expr -> FLOAT_NUMBER .)
    DOT_DIVIDE      reduce using rule 13 (expr -> FLOAT_NUMBER .)
    DOT_TIMES       reduce using rule 13 (expr -> FLOAT_NUMBER .)
    DOT_MINUS       reduce using rule 13 (expr -> FLOAT_NUMBER .)
    DOT_PLUS        reduce using rule 13 (expr -> FLOAT_NUMBER .)
    REMAINDER       reduce using rule 13 (expr -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 13 (expr -> FLOAT_NUMBER .)
    TIMES           reduce using rule 13 (expr -> FLOAT_NUMBER .)
    MINUS           reduce using rule 13 (expr -> FLOAT_NUMBER .)
    PLUS            reduce using rule 13 (expr -> FLOAT_NUMBER .)
    FUNCTION        reduce using rule 13 (expr -> FLOAT_NUMBER .)
    {               reduce using rule 13 (expr -> FLOAT_NUMBER .)
    FOR             reduce using rule 13 (expr -> FLOAT_NUMBER .)
    WHILE           reduce using rule 13 (expr -> FLOAT_NUMBER .)
    IF              reduce using rule 13 (expr -> FLOAT_NUMBER .)
    CONTINUE        reduce using rule 13 (expr -> FLOAT_NUMBER .)
    BREAK           reduce using rule 13 (expr -> FLOAT_NUMBER .)
    RETURN          reduce using rule 13 (expr -> FLOAT_NUMBER .)
    PRINT           reduce using rule 13 (expr -> FLOAT_NUMBER .)
    ZEROS           reduce using rule 13 (expr -> FLOAT_NUMBER .)
    ONES            reduce using rule 13 (expr -> FLOAT_NUMBER .)
    EYE             reduce using rule 13 (expr -> FLOAT_NUMBER .)
    STRING          reduce using rule 13 (expr -> FLOAT_NUMBER .)
    FLOAT_NUMBER    reduce using rule 13 (expr -> FLOAT_NUMBER .)
    INT_NUMBER      reduce using rule 13 (expr -> FLOAT_NUMBER .)
    ID              reduce using rule 13 (expr -> FLOAT_NUMBER .)
    NOT             reduce using rule 13 (expr -> FLOAT_NUMBER .)
    $end            reduce using rule 13 (expr -> FLOAT_NUMBER .)
    )               reduce using rule 13 (expr -> FLOAT_NUMBER .)
    ]               reduce using rule 13 (expr -> FLOAT_NUMBER .)
    ,               reduce using rule 13 (expr -> FLOAT_NUMBER .)


state 22

    (14) expr -> INT_NUMBER .
    REMAINDER_ASSIGN reduce using rule 14 (expr -> INT_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 14 (expr -> INT_NUMBER .)
    TIMES_ASSIGN    reduce using rule 14 (expr -> INT_NUMBER .)
    MINUS_ASSIGN    reduce using rule 14 (expr -> INT_NUMBER .)
    PLUS_ASSIGN     reduce using rule 14 (expr -> INT_NUMBER .)
    ASSIGN          reduce using rule 14 (expr -> INT_NUMBER .)
    ;               reduce using rule 14 (expr -> INT_NUMBER .)
    [               reduce using rule 14 (expr -> INT_NUMBER .)
    (               reduce using rule 14 (expr -> INT_NUMBER .)
    '               reduce using rule 14 (expr -> INT_NUMBER .)
    :               reduce using rule 14 (expr -> INT_NUMBER .)
    XOR             reduce using rule 14 (expr -> INT_NUMBER .)
    OR              reduce using rule 14 (expr -> INT_NUMBER .)
    AND             reduce using rule 14 (expr -> INT_NUMBER .)
    LOWER_EQUAL     reduce using rule 14 (expr -> INT_NUMBER .)
    LOWER           reduce using rule 14 (expr -> INT_NUMBER .)
    GREATER_EQUAL   reduce using rule 14 (expr -> INT_NUMBER .)
    GREATER         reduce using rule 14 (expr -> INT_NUMBER .)
    NOT_EQUAL       reduce using rule 14 (expr -> INT_NUMBER .)
    EQUAL           reduce using rule 14 (expr -> INT_NUMBER .)
    DOT_REMAINDER   reduce using rule 14 (expr -> INT_NUMBER .)
    DOT_DIVIDE      reduce using rule 14 (expr -> INT_NUMBER .)
    DOT_TIMES       reduce using rule 14 (expr -> INT_NUMBER .)
    DOT_MINUS       reduce using rule 14 (expr -> INT_NUMBER .)
    DOT_PLUS        reduce using rule 14 (expr -> INT_NUMBER .)
    REMAINDER       reduce using rule 14 (expr -> INT_NUMBER .)
    DIVIDE          reduce using rule 14 (expr -> INT_NUMBER .)
    TIMES           reduce using rule 14 (expr -> INT_NUMBER .)
    MINUS           reduce using rule 14 (expr -> INT_NUMBER .)
    PLUS            reduce using rule 14 (expr -> INT_NUMBER .)
    FUNCTION        reduce using rule 14 (expr -> INT_NUMBER .)
    {               reduce using rule 14 (expr -> INT_NUMBER .)
    FOR             reduce using rule 14 (expr -> INT_NUMBER .)
    WHILE           reduce using rule 14 (expr -> INT_NUMBER .)
    IF              reduce using rule 14 (expr -> INT_NUMBER .)
    CONTINUE        reduce using rule 14 (expr -> INT_NUMBER .)
    BREAK           reduce using rule 14 (expr -> INT_NUMBER .)
    RETURN          reduce using rule 14 (expr -> INT_NUMBER .)
    PRINT           reduce using rule 14 (expr -> INT_NUMBER .)
    ZEROS           reduce using rule 14 (expr -> INT_NUMBER .)
    ONES            reduce using rule 14 (expr -> INT_NUMBER .)
    EYE             reduce using rule 14 (expr -> INT_NUMBER .)
    STRING          reduce using rule 14 (expr -> INT_NUMBER .)
    FLOAT_NUMBER    reduce using rule 14 (expr -> INT_NUMBER .)
    INT_NUMBER      reduce using rule 14 (expr -> INT_NUMBER .)
    ID              reduce using rule 14 (expr -> INT_NUMBER .)
    NOT             reduce using rule 14 (expr -> INT_NUMBER .)
    $end            reduce using rule 14 (expr -> INT_NUMBER .)
    )               reduce using rule 14 (expr -> INT_NUMBER .)
    ]               reduce using rule 14 (expr -> INT_NUMBER .)
    ,               reduce using rule 14 (expr -> INT_NUMBER .)


state 23

    (18) expr -> NOT . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 71

state 24

    (19) expr -> MINUS . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 72

state 25

    (1) program -> program action .
    FUNCTION        reduce using rule 1 (program -> program action .)
    {               reduce using rule 1 (program -> program action .)
    FOR             reduce using rule 1 (program -> program action .)
    WHILE           reduce using rule 1 (program -> program action .)
    IF              reduce using rule 1 (program -> program action .)
    CONTINUE        reduce using rule 1 (program -> program action .)
    BREAK           reduce using rule 1 (program -> program action .)
    RETURN          reduce using rule 1 (program -> program action .)
    PRINT           reduce using rule 1 (program -> program action .)
    ZEROS           reduce using rule 1 (program -> program action .)
    ONES            reduce using rule 1 (program -> program action .)
    EYE             reduce using rule 1 (program -> program action .)
    STRING          reduce using rule 1 (program -> program action .)
    FLOAT_NUMBER    reduce using rule 1 (program -> program action .)
    INT_NUMBER      reduce using rule 1 (program -> program action .)
    ID              reduce using rule 1 (program -> program action .)
    (               reduce using rule 1 (program -> program action .)
    NOT             reduce using rule 1 (program -> program action .)
    MINUS           reduce using rule 1 (program -> program action .)
    $end            reduce using rule 1 (program -> program action .)


state 26

    (48) statement -> expr REMAINDER_ASSIGN . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 73

state 27

    (58) statement -> expr ; .
    FUNCTION        reduce using rule 58 (statement -> expr ; .)
    {               reduce using rule 58 (statement -> expr ; .)
    FOR             reduce using rule 58 (statement -> expr ; .)
    WHILE           reduce using rule 58 (statement -> expr ; .)
    IF              reduce using rule 58 (statement -> expr ; .)
    CONTINUE        reduce using rule 58 (statement -> expr ; .)
    BREAK           reduce using rule 58 (statement -> expr ; .)
    RETURN          reduce using rule 58 (statement -> expr ; .)
    PRINT           reduce using rule 58 (statement -> expr ; .)
    ZEROS           reduce using rule 58 (statement -> expr ; .)
    ONES            reduce using rule 58 (statement -> expr ; .)
    EYE             reduce using rule 58 (statement -> expr ; .)
    STRING          reduce using rule 58 (statement -> expr ; .)
    FLOAT_NUMBER    reduce using rule 58 (statement -> expr ; .)
    INT_NUMBER      reduce using rule 58 (statement -> expr ; .)
    ID              reduce using rule 58 (statement -> expr ; .)
    (               reduce using rule 58 (statement -> expr ; .)
    NOT             reduce using rule 58 (statement -> expr ; .)
    MINUS           reduce using rule 58 (statement -> expr ; .)
    $end            reduce using rule 58 (statement -> expr ; .)
    }               reduce using rule 58 (statement -> expr ; .)
    ELSE            reduce using rule 58 (statement -> expr ; .)


state 28

    (49) statement -> expr DIVIDE_ASSIGN . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 74

state 29

    (50) statement -> expr TIMES_ASSIGN . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 75

state 30

    (51) statement -> expr MINUS_ASSIGN . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 76

state 31

    (52) statement -> expr PLUS_ASSIGN . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 77

state 32

    (53) statement -> expr ASSIGN . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 78

state 33

    (6) expr -> expr [ . parameter_list ]
    (40) parameter_list -> . expr
    (41) parameter_list -> . parameter_list , expr
    (42) parameter_list -> .
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ]               reduce using rule 42 (parameter_list -> .)
    ,               reduce using rule 42 (parameter_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 79
    parameter_list                 shift and go to state 80

state 34

    (7) expr -> expr ( . )
    (8) expr -> expr ( . parameter_list )
    (40) parameter_list -> . expr
    (41) parameter_list -> . parameter_list , expr
    (42) parameter_list -> .
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 81
    ,               reduce using rule 42 (parameter_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 79
    parameter_list                 shift and go to state 82

state 35

    (17) expr -> expr ' .
    REMAINDER_ASSIGN reduce using rule 17 (expr -> expr ' .)
    DIVIDE_ASSIGN   reduce using rule 17 (expr -> expr ' .)
    TIMES_ASSIGN    reduce using rule 17 (expr -> expr ' .)
    MINUS_ASSIGN    reduce using rule 17 (expr -> expr ' .)
    PLUS_ASSIGN     reduce using rule 17 (expr -> expr ' .)
    ASSIGN          reduce using rule 17 (expr -> expr ' .)
    ;               reduce using rule 17 (expr -> expr ' .)
    [               reduce using rule 17 (expr -> expr ' .)
    (               reduce using rule 17 (expr -> expr ' .)
    '               reduce using rule 17 (expr -> expr ' .)
    :               reduce using rule 17 (expr -> expr ' .)
    XOR             reduce using rule 17 (expr -> expr ' .)
    OR              reduce using rule 17 (expr -> expr ' .)
    AND             reduce using rule 17 (expr -> expr ' .)
    LOWER_EQUAL     reduce using rule 17 (expr -> expr ' .)
    LOWER           reduce using rule 17 (expr -> expr ' .)
    GREATER_EQUAL   reduce using rule 17 (expr -> expr ' .)
    GREATER         reduce using rule 17 (expr -> expr ' .)
    NOT_EQUAL       reduce using rule 17 (expr -> expr ' .)
    EQUAL           reduce using rule 17 (expr -> expr ' .)
    DOT_REMAINDER   reduce using rule 17 (expr -> expr ' .)
    DOT_DIVIDE      reduce using rule 17 (expr -> expr ' .)
    DOT_TIMES       reduce using rule 17 (expr -> expr ' .)
    DOT_MINUS       reduce using rule 17 (expr -> expr ' .)
    DOT_PLUS        reduce using rule 17 (expr -> expr ' .)
    REMAINDER       reduce using rule 17 (expr -> expr ' .)
    DIVIDE          reduce using rule 17 (expr -> expr ' .)
    TIMES           reduce using rule 17 (expr -> expr ' .)
    MINUS           reduce using rule 17 (expr -> expr ' .)
    PLUS            reduce using rule 17 (expr -> expr ' .)
    FUNCTION        reduce using rule 17 (expr -> expr ' .)
    {               reduce using rule 17 (expr -> expr ' .)
    FOR             reduce using rule 17 (expr -> expr ' .)
    WHILE           reduce using rule 17 (expr -> expr ' .)
    IF              reduce using rule 17 (expr -> expr ' .)
    CONTINUE        reduce using rule 17 (expr -> expr ' .)
    BREAK           reduce using rule 17 (expr -> expr ' .)
    RETURN          reduce using rule 17 (expr -> expr ' .)
    PRINT           reduce using rule 17 (expr -> expr ' .)
    ZEROS           reduce using rule 17 (expr -> expr ' .)
    ONES            reduce using rule 17 (expr -> expr ' .)
    EYE             reduce using rule 17 (expr -> expr ' .)
    STRING          reduce using rule 17 (expr -> expr ' .)
    FLOAT_NUMBER    reduce using rule 17 (expr -> expr ' .)
    INT_NUMBER      reduce using rule 17 (expr -> expr ' .)
    ID              reduce using rule 17 (expr -> expr ' .)
    NOT             reduce using rule 17 (expr -> expr ' .)
    $end            reduce using rule 17 (expr -> expr ' .)
    )               reduce using rule 17 (expr -> expr ' .)
    ]               reduce using rule 17 (expr -> expr ' .)
    ,               reduce using rule 17 (expr -> expr ' .)


state 36

    (20) expr -> expr : . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 83

state 37

    (21) expr -> expr XOR . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 84

state 38

    (22) expr -> expr OR . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 85

state 39

    (23) expr -> expr AND . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 86

state 40

    (24) expr -> expr LOWER_EQUAL . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 87

state 41

    (25) expr -> expr LOWER . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 88

state 42

    (26) expr -> expr GREATER_EQUAL . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 89

state 43

    (27) expr -> expr GREATER . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 90

state 44

    (28) expr -> expr NOT_EQUAL . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 91

state 45

    (29) expr -> expr EQUAL . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 92

state 46

    (30) expr -> expr DOT_REMAINDER . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 93

state 47

    (31) expr -> expr DOT_DIVIDE . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 94

state 48

    (32) expr -> expr DOT_TIMES . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 95

state 49

    (33) expr -> expr DOT_MINUS . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 96

state 50

    (34) expr -> expr DOT_PLUS . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 97

state 51

    (35) expr -> expr REMAINDER . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 98

state 52

    (36) expr -> expr DIVIDE . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 99

state 53

    (37) expr -> expr TIMES . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 100

state 54

    (38) expr -> expr MINUS . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 101

state 55

    (39) expr -> expr PLUS . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 102

state 56

    (61) function -> FUNCTION ID . ( ) statement
    (62) function -> FUNCTION ID . ( parameter_list ) statement
    (               shift and go to state 103


state 57

    (16) expr -> ( expr . )
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    )               shift and go to state 104
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 58

    (43) statement -> { statement_series . }
    (59) statement_series -> statement_series . statement
    (43) statement -> . { statement_series }
    (44) statement -> . FOR ( ID IN expr ) statement
    (45) statement -> . WHILE ( expr ) statement
    (46) statement -> . IF ( expr ) statement ELSE statement
    (47) statement -> . IF ( expr ) statement
    (48) statement -> . expr REMAINDER_ASSIGN expr ;
    (49) statement -> . expr DIVIDE_ASSIGN expr ;
    (50) statement -> . expr TIMES_ASSIGN expr ;
    (51) statement -> . expr MINUS_ASSIGN expr ;
    (52) statement -> . expr PLUS_ASSIGN expr ;
    (53) statement -> . expr ASSIGN expr ;
    (54) statement -> . CONTINUE ;
    (55) statement -> . BREAK ;
    (56) statement -> . RETURN expr ;
    (57) statement -> . PRINT expr ;
    (58) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    }               shift and go to state 105
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    statement                      shift and go to state 106
    expr                           shift and go to state 60

state 59

    (60) statement_series -> statement .
    }               reduce using rule 60 (statement_series -> statement .)
    {               reduce using rule 60 (statement_series -> statement .)
    FOR             reduce using rule 60 (statement_series -> statement .)
    WHILE           reduce using rule 60 (statement_series -> statement .)
    IF              reduce using rule 60 (statement_series -> statement .)
    CONTINUE        reduce using rule 60 (statement_series -> statement .)
    BREAK           reduce using rule 60 (statement_series -> statement .)
    RETURN          reduce using rule 60 (statement_series -> statement .)
    PRINT           reduce using rule 60 (statement_series -> statement .)
    ZEROS           reduce using rule 60 (statement_series -> statement .)
    ONES            reduce using rule 60 (statement_series -> statement .)
    EYE             reduce using rule 60 (statement_series -> statement .)
    STRING          reduce using rule 60 (statement_series -> statement .)
    FLOAT_NUMBER    reduce using rule 60 (statement_series -> statement .)
    INT_NUMBER      reduce using rule 60 (statement_series -> statement .)
    ID              reduce using rule 60 (statement_series -> statement .)
    (               reduce using rule 60 (statement_series -> statement .)
    NOT             reduce using rule 60 (statement_series -> statement .)
    MINUS           reduce using rule 60 (statement_series -> statement .)


state 60

    (48) statement -> expr . REMAINDER_ASSIGN expr ;
    (49) statement -> expr . DIVIDE_ASSIGN expr ;
    (50) statement -> expr . TIMES_ASSIGN expr ;
    (51) statement -> expr . MINUS_ASSIGN expr ;
    (52) statement -> expr . PLUS_ASSIGN expr ;
    (53) statement -> expr . ASSIGN expr ;
    (58) statement -> expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN shift and go to state 26
    DIVIDE_ASSIGN   shift and go to state 28
    TIMES_ASSIGN    shift and go to state 29
    MINUS_ASSIGN    shift and go to state 30
    PLUS_ASSIGN     shift and go to state 31
    ASSIGN          shift and go to state 32
    ;               shift and go to state 27
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 61

    (44) statement -> FOR ( . ID IN expr ) statement
    ID              shift and go to state 107


state 62

    (45) statement -> WHILE ( . expr ) statement
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 108

state 63

    (46) statement -> IF ( . expr ) statement ELSE statement
    (47) statement -> IF ( . expr ) statement
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 109

state 64

    (54) statement -> CONTINUE ; .
    FUNCTION        reduce using rule 54 (statement -> CONTINUE ; .)
    {               reduce using rule 54 (statement -> CONTINUE ; .)
    FOR             reduce using rule 54 (statement -> CONTINUE ; .)
    WHILE           reduce using rule 54 (statement -> CONTINUE ; .)
    IF              reduce using rule 54 (statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 54 (statement -> CONTINUE ; .)
    BREAK           reduce using rule 54 (statement -> CONTINUE ; .)
    RETURN          reduce using rule 54 (statement -> CONTINUE ; .)
    PRINT           reduce using rule 54 (statement -> CONTINUE ; .)
    ZEROS           reduce using rule 54 (statement -> CONTINUE ; .)
    ONES            reduce using rule 54 (statement -> CONTINUE ; .)
    EYE             reduce using rule 54 (statement -> CONTINUE ; .)
    STRING          reduce using rule 54 (statement -> CONTINUE ; .)
    FLOAT_NUMBER    reduce using rule 54 (statement -> CONTINUE ; .)
    INT_NUMBER      reduce using rule 54 (statement -> CONTINUE ; .)
    ID              reduce using rule 54 (statement -> CONTINUE ; .)
    (               reduce using rule 54 (statement -> CONTINUE ; .)
    NOT             reduce using rule 54 (statement -> CONTINUE ; .)
    MINUS           reduce using rule 54 (statement -> CONTINUE ; .)
    $end            reduce using rule 54 (statement -> CONTINUE ; .)
    }               reduce using rule 54 (statement -> CONTINUE ; .)
    ELSE            reduce using rule 54 (statement -> CONTINUE ; .)


state 65

    (55) statement -> BREAK ; .
    FUNCTION        reduce using rule 55 (statement -> BREAK ; .)
    {               reduce using rule 55 (statement -> BREAK ; .)
    FOR             reduce using rule 55 (statement -> BREAK ; .)
    WHILE           reduce using rule 55 (statement -> BREAK ; .)
    IF              reduce using rule 55 (statement -> BREAK ; .)
    CONTINUE        reduce using rule 55 (statement -> BREAK ; .)
    BREAK           reduce using rule 55 (statement -> BREAK ; .)
    RETURN          reduce using rule 55 (statement -> BREAK ; .)
    PRINT           reduce using rule 55 (statement -> BREAK ; .)
    ZEROS           reduce using rule 55 (statement -> BREAK ; .)
    ONES            reduce using rule 55 (statement -> BREAK ; .)
    EYE             reduce using rule 55 (statement -> BREAK ; .)
    STRING          reduce using rule 55 (statement -> BREAK ; .)
    FLOAT_NUMBER    reduce using rule 55 (statement -> BREAK ; .)
    INT_NUMBER      reduce using rule 55 (statement -> BREAK ; .)
    ID              reduce using rule 55 (statement -> BREAK ; .)
    (               reduce using rule 55 (statement -> BREAK ; .)
    NOT             reduce using rule 55 (statement -> BREAK ; .)
    MINUS           reduce using rule 55 (statement -> BREAK ; .)
    $end            reduce using rule 55 (statement -> BREAK ; .)
    }               reduce using rule 55 (statement -> BREAK ; .)
    ELSE            reduce using rule 55 (statement -> BREAK ; .)


state 66

    (56) statement -> RETURN expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    ;               shift and go to state 110
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 67

    (57) statement -> PRINT expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    ;               shift and go to state 111
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 68

    (9) expr -> ZEROS ( . parameter_list )
    (40) parameter_list -> . expr
    (41) parameter_list -> . parameter_list , expr
    (42) parameter_list -> .
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    )               reduce using rule 42 (parameter_list -> .)
    ,               reduce using rule 42 (parameter_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    parameter_list                 shift and go to state 112
    expr                           shift and go to state 79

state 69

    (10) expr -> ONES ( . parameter_list )
    (40) parameter_list -> . expr
    (41) parameter_list -> . parameter_list , expr
    (42) parameter_list -> .
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    )               reduce using rule 42 (parameter_list -> .)
    ,               reduce using rule 42 (parameter_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    parameter_list                 shift and go to state 113
    expr                           shift and go to state 79

state 70

    (11) expr -> EYE ( . parameter_list )
    (40) parameter_list -> . expr
    (41) parameter_list -> . parameter_list , expr
    (42) parameter_list -> .
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    )               reduce using rule 42 (parameter_list -> .)
    ,               reduce using rule 42 (parameter_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    parameter_list                 shift and go to state 114
    expr                           shift and go to state 79

state 71

    (18) expr -> NOT expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 18 (expr -> NOT expr .)
    DIVIDE_ASSIGN   reduce using rule 18 (expr -> NOT expr .)
    TIMES_ASSIGN    reduce using rule 18 (expr -> NOT expr .)
    MINUS_ASSIGN    reduce using rule 18 (expr -> NOT expr .)
    PLUS_ASSIGN     reduce using rule 18 (expr -> NOT expr .)
    ASSIGN          reduce using rule 18 (expr -> NOT expr .)
    ;               reduce using rule 18 (expr -> NOT expr .)
    [               reduce using rule 18 (expr -> NOT expr .)
    (               reduce using rule 18 (expr -> NOT expr .)
    '               reduce using rule 18 (expr -> NOT expr .)
    :               reduce using rule 18 (expr -> NOT expr .)
    XOR             reduce using rule 18 (expr -> NOT expr .)
    OR              reduce using rule 18 (expr -> NOT expr .)
    AND             reduce using rule 18 (expr -> NOT expr .)
    LOWER_EQUAL     reduce using rule 18 (expr -> NOT expr .)
    LOWER           reduce using rule 18 (expr -> NOT expr .)
    GREATER_EQUAL   reduce using rule 18 (expr -> NOT expr .)
    GREATER         reduce using rule 18 (expr -> NOT expr .)
    NOT_EQUAL       reduce using rule 18 (expr -> NOT expr .)
    EQUAL           reduce using rule 18 (expr -> NOT expr .)
    DOT_REMAINDER   reduce using rule 18 (expr -> NOT expr .)
    DOT_DIVIDE      reduce using rule 18 (expr -> NOT expr .)
    DOT_TIMES       reduce using rule 18 (expr -> NOT expr .)
    DOT_MINUS       reduce using rule 18 (expr -> NOT expr .)
    DOT_PLUS        reduce using rule 18 (expr -> NOT expr .)
    REMAINDER       reduce using rule 18 (expr -> NOT expr .)
    DIVIDE          reduce using rule 18 (expr -> NOT expr .)
    TIMES           reduce using rule 18 (expr -> NOT expr .)
    MINUS           reduce using rule 18 (expr -> NOT expr .)
    PLUS            reduce using rule 18 (expr -> NOT expr .)
    FUNCTION        reduce using rule 18 (expr -> NOT expr .)
    {               reduce using rule 18 (expr -> NOT expr .)
    FOR             reduce using rule 18 (expr -> NOT expr .)
    WHILE           reduce using rule 18 (expr -> NOT expr .)
    IF              reduce using rule 18 (expr -> NOT expr .)
    CONTINUE        reduce using rule 18 (expr -> NOT expr .)
    BREAK           reduce using rule 18 (expr -> NOT expr .)
    RETURN          reduce using rule 18 (expr -> NOT expr .)
    PRINT           reduce using rule 18 (expr -> NOT expr .)
    ZEROS           reduce using rule 18 (expr -> NOT expr .)
    ONES            reduce using rule 18 (expr -> NOT expr .)
    EYE             reduce using rule 18 (expr -> NOT expr .)
    STRING          reduce using rule 18 (expr -> NOT expr .)
    FLOAT_NUMBER    reduce using rule 18 (expr -> NOT expr .)
    INT_NUMBER      reduce using rule 18 (expr -> NOT expr .)
    ID              reduce using rule 18 (expr -> NOT expr .)
    NOT             reduce using rule 18 (expr -> NOT expr .)
    $end            reduce using rule 18 (expr -> NOT expr .)
    )               reduce using rule 18 (expr -> NOT expr .)
    ]               reduce using rule 18 (expr -> NOT expr .)
    ,               reduce using rule 18 (expr -> NOT expr .)


state 72

    (19) expr -> MINUS expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 19 (expr -> MINUS expr .)
    DIVIDE_ASSIGN   reduce using rule 19 (expr -> MINUS expr .)
    TIMES_ASSIGN    reduce using rule 19 (expr -> MINUS expr .)
    MINUS_ASSIGN    reduce using rule 19 (expr -> MINUS expr .)
    PLUS_ASSIGN     reduce using rule 19 (expr -> MINUS expr .)
    ASSIGN          reduce using rule 19 (expr -> MINUS expr .)
    ;               reduce using rule 19 (expr -> MINUS expr .)
    [               reduce using rule 19 (expr -> MINUS expr .)
    (               reduce using rule 19 (expr -> MINUS expr .)
    '               reduce using rule 19 (expr -> MINUS expr .)
    :               reduce using rule 19 (expr -> MINUS expr .)
    XOR             reduce using rule 19 (expr -> MINUS expr .)
    OR              reduce using rule 19 (expr -> MINUS expr .)
    AND             reduce using rule 19 (expr -> MINUS expr .)
    LOWER_EQUAL     reduce using rule 19 (expr -> MINUS expr .)
    LOWER           reduce using rule 19 (expr -> MINUS expr .)
    GREATER_EQUAL   reduce using rule 19 (expr -> MINUS expr .)
    GREATER         reduce using rule 19 (expr -> MINUS expr .)
    NOT_EQUAL       reduce using rule 19 (expr -> MINUS expr .)
    EQUAL           reduce using rule 19 (expr -> MINUS expr .)
    DOT_REMAINDER   reduce using rule 19 (expr -> MINUS expr .)
    DOT_DIVIDE      reduce using rule 19 (expr -> MINUS expr .)
    DOT_TIMES       reduce using rule 19 (expr -> MINUS expr .)
    DOT_MINUS       reduce using rule 19 (expr -> MINUS expr .)
    DOT_PLUS        reduce using rule 19 (expr -> MINUS expr .)
    REMAINDER       reduce using rule 19 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 19 (expr -> MINUS expr .)
    TIMES           reduce using rule 19 (expr -> MINUS expr .)
    MINUS           reduce using rule 19 (expr -> MINUS expr .)
    PLUS            reduce using rule 19 (expr -> MINUS expr .)
    FUNCTION        reduce using rule 19 (expr -> MINUS expr .)
    {               reduce using rule 19 (expr -> MINUS expr .)
    FOR             reduce using rule 19 (expr -> MINUS expr .)
    WHILE           reduce using rule 19 (expr -> MINUS expr .)
    IF              reduce using rule 19 (expr -> MINUS expr .)
    CONTINUE        reduce using rule 19 (expr -> MINUS expr .)
    BREAK           reduce using rule 19 (expr -> MINUS expr .)
    RETURN          reduce using rule 19 (expr -> MINUS expr .)
    PRINT           reduce using rule 19 (expr -> MINUS expr .)
    ZEROS           reduce using rule 19 (expr -> MINUS expr .)
    ONES            reduce using rule 19 (expr -> MINUS expr .)
    EYE             reduce using rule 19 (expr -> MINUS expr .)
    STRING          reduce using rule 19 (expr -> MINUS expr .)
    FLOAT_NUMBER    reduce using rule 19 (expr -> MINUS expr .)
    INT_NUMBER      reduce using rule 19 (expr -> MINUS expr .)
    ID              reduce using rule 19 (expr -> MINUS expr .)
    NOT             reduce using rule 19 (expr -> MINUS expr .)
    $end            reduce using rule 19 (expr -> MINUS expr .)
    )               reduce using rule 19 (expr -> MINUS expr .)
    ]               reduce using rule 19 (expr -> MINUS expr .)
    ,               reduce using rule 19 (expr -> MINUS expr .)


state 73

    (48) statement -> expr REMAINDER_ASSIGN expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    ;               shift and go to state 115
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 74

    (49) statement -> expr DIVIDE_ASSIGN expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    ;               shift and go to state 116
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 75

    (50) statement -> expr TIMES_ASSIGN expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    ;               shift and go to state 117
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 76

    (51) statement -> expr MINUS_ASSIGN expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    ;               shift and go to state 118
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 77

    (52) statement -> expr PLUS_ASSIGN expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    ;               shift and go to state 119
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 78

    (53) statement -> expr ASSIGN expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    ;               shift and go to state 120
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 79

    (40) parameter_list -> expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    ]               reduce using rule 40 (parameter_list -> expr .)
    ,               reduce using rule 40 (parameter_list -> expr .)
    )               reduce using rule 40 (parameter_list -> expr .)
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 80

    (6) expr -> expr [ parameter_list . ]
    (41) parameter_list -> parameter_list . , expr
    ]               shift and go to state 121
    ,               shift and go to state 122


state 81

    (7) expr -> expr ( ) .
    REMAINDER_ASSIGN reduce using rule 7 (expr -> expr ( ) .)
    DIVIDE_ASSIGN   reduce using rule 7 (expr -> expr ( ) .)
    TIMES_ASSIGN    reduce using rule 7 (expr -> expr ( ) .)
    MINUS_ASSIGN    reduce using rule 7 (expr -> expr ( ) .)
    PLUS_ASSIGN     reduce using rule 7 (expr -> expr ( ) .)
    ASSIGN          reduce using rule 7 (expr -> expr ( ) .)
    ;               reduce using rule 7 (expr -> expr ( ) .)
    [               reduce using rule 7 (expr -> expr ( ) .)
    (               reduce using rule 7 (expr -> expr ( ) .)
    '               reduce using rule 7 (expr -> expr ( ) .)
    :               reduce using rule 7 (expr -> expr ( ) .)
    XOR             reduce using rule 7 (expr -> expr ( ) .)
    OR              reduce using rule 7 (expr -> expr ( ) .)
    AND             reduce using rule 7 (expr -> expr ( ) .)
    LOWER_EQUAL     reduce using rule 7 (expr -> expr ( ) .)
    LOWER           reduce using rule 7 (expr -> expr ( ) .)
    GREATER_EQUAL   reduce using rule 7 (expr -> expr ( ) .)
    GREATER         reduce using rule 7 (expr -> expr ( ) .)
    NOT_EQUAL       reduce using rule 7 (expr -> expr ( ) .)
    EQUAL           reduce using rule 7 (expr -> expr ( ) .)
    DOT_REMAINDER   reduce using rule 7 (expr -> expr ( ) .)
    DOT_DIVIDE      reduce using rule 7 (expr -> expr ( ) .)
    DOT_TIMES       reduce using rule 7 (expr -> expr ( ) .)
    DOT_MINUS       reduce using rule 7 (expr -> expr ( ) .)
    DOT_PLUS        reduce using rule 7 (expr -> expr ( ) .)
    REMAINDER       reduce using rule 7 (expr -> expr ( ) .)
    DIVIDE          reduce using rule 7 (expr -> expr ( ) .)
    TIMES           reduce using rule 7 (expr -> expr ( ) .)
    MINUS           reduce using rule 7 (expr -> expr ( ) .)
    PLUS            reduce using rule 7 (expr -> expr ( ) .)
    FUNCTION        reduce using rule 7 (expr -> expr ( ) .)
    {               reduce using rule 7 (expr -> expr ( ) .)
    FOR             reduce using rule 7 (expr -> expr ( ) .)
    WHILE           reduce using rule 7 (expr -> expr ( ) .)
    IF              reduce using rule 7 (expr -> expr ( ) .)
    CONTINUE        reduce using rule 7 (expr -> expr ( ) .)
    BREAK           reduce using rule 7 (expr -> expr ( ) .)
    RETURN          reduce using rule 7 (expr -> expr ( ) .)
    PRINT           reduce using rule 7 (expr -> expr ( ) .)
    ZEROS           reduce using rule 7 (expr -> expr ( ) .)
    ONES            reduce using rule 7 (expr -> expr ( ) .)
    EYE             reduce using rule 7 (expr -> expr ( ) .)
    STRING          reduce using rule 7 (expr -> expr ( ) .)
    FLOAT_NUMBER    reduce using rule 7 (expr -> expr ( ) .)
    INT_NUMBER      reduce using rule 7 (expr -> expr ( ) .)
    ID              reduce using rule 7 (expr -> expr ( ) .)
    NOT             reduce using rule 7 (expr -> expr ( ) .)
    $end            reduce using rule 7 (expr -> expr ( ) .)
    )               reduce using rule 7 (expr -> expr ( ) .)
    ]               reduce using rule 7 (expr -> expr ( ) .)
    ,               reduce using rule 7 (expr -> expr ( ) .)


state 82

    (8) expr -> expr ( parameter_list . )
    (41) parameter_list -> parameter_list . , expr
    )               shift and go to state 123
    ,               shift and go to state 122


state 83

    (20) expr -> expr : expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 20 (expr -> expr : expr .)
    DIVIDE_ASSIGN   reduce using rule 20 (expr -> expr : expr .)
    TIMES_ASSIGN    reduce using rule 20 (expr -> expr : expr .)
    MINUS_ASSIGN    reduce using rule 20 (expr -> expr : expr .)
    PLUS_ASSIGN     reduce using rule 20 (expr -> expr : expr .)
    ASSIGN          reduce using rule 20 (expr -> expr : expr .)
    ;               reduce using rule 20 (expr -> expr : expr .)
    [               reduce using rule 20 (expr -> expr : expr .)
    (               reduce using rule 20 (expr -> expr : expr .)
    '               reduce using rule 20 (expr -> expr : expr .)
    :               reduce using rule 20 (expr -> expr : expr .)
    FUNCTION        reduce using rule 20 (expr -> expr : expr .)
    {               reduce using rule 20 (expr -> expr : expr .)
    FOR             reduce using rule 20 (expr -> expr : expr .)
    WHILE           reduce using rule 20 (expr -> expr : expr .)
    IF              reduce using rule 20 (expr -> expr : expr .)
    CONTINUE        reduce using rule 20 (expr -> expr : expr .)
    BREAK           reduce using rule 20 (expr -> expr : expr .)
    RETURN          reduce using rule 20 (expr -> expr : expr .)
    PRINT           reduce using rule 20 (expr -> expr : expr .)
    ZEROS           reduce using rule 20 (expr -> expr : expr .)
    ONES            reduce using rule 20 (expr -> expr : expr .)
    EYE             reduce using rule 20 (expr -> expr : expr .)
    STRING          reduce using rule 20 (expr -> expr : expr .)
    FLOAT_NUMBER    reduce using rule 20 (expr -> expr : expr .)
    INT_NUMBER      reduce using rule 20 (expr -> expr : expr .)
    ID              reduce using rule 20 (expr -> expr : expr .)
    NOT             reduce using rule 20 (expr -> expr : expr .)
    $end            reduce using rule 20 (expr -> expr : expr .)
    )               reduce using rule 20 (expr -> expr : expr .)
    ]               reduce using rule 20 (expr -> expr : expr .)
    ,               reduce using rule 20 (expr -> expr : expr .)
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 84

    (21) expr -> expr XOR expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 21 (expr -> expr XOR expr .)
    DIVIDE_ASSIGN   reduce using rule 21 (expr -> expr XOR expr .)
    TIMES_ASSIGN    reduce using rule 21 (expr -> expr XOR expr .)
    MINUS_ASSIGN    reduce using rule 21 (expr -> expr XOR expr .)
    PLUS_ASSIGN     reduce using rule 21 (expr -> expr XOR expr .)
    ASSIGN          reduce using rule 21 (expr -> expr XOR expr .)
    ;               reduce using rule 21 (expr -> expr XOR expr .)
    [               reduce using rule 21 (expr -> expr XOR expr .)
    (               reduce using rule 21 (expr -> expr XOR expr .)
    '               reduce using rule 21 (expr -> expr XOR expr .)
    :               reduce using rule 21 (expr -> expr XOR expr .)
    XOR             reduce using rule 21 (expr -> expr XOR expr .)
    OR              reduce using rule 21 (expr -> expr XOR expr .)
    AND             reduce using rule 21 (expr -> expr XOR expr .)
    FUNCTION        reduce using rule 21 (expr -> expr XOR expr .)
    {               reduce using rule 21 (expr -> expr XOR expr .)
    FOR             reduce using rule 21 (expr -> expr XOR expr .)
    WHILE           reduce using rule 21 (expr -> expr XOR expr .)
    IF              reduce using rule 21 (expr -> expr XOR expr .)
    CONTINUE        reduce using rule 21 (expr -> expr XOR expr .)
    BREAK           reduce using rule 21 (expr -> expr XOR expr .)
    RETURN          reduce using rule 21 (expr -> expr XOR expr .)
    PRINT           reduce using rule 21 (expr -> expr XOR expr .)
    ZEROS           reduce using rule 21 (expr -> expr XOR expr .)
    ONES            reduce using rule 21 (expr -> expr XOR expr .)
    EYE             reduce using rule 21 (expr -> expr XOR expr .)
    STRING          reduce using rule 21 (expr -> expr XOR expr .)
    FLOAT_NUMBER    reduce using rule 21 (expr -> expr XOR expr .)
    INT_NUMBER      reduce using rule 21 (expr -> expr XOR expr .)
    ID              reduce using rule 21 (expr -> expr XOR expr .)
    NOT             reduce using rule 21 (expr -> expr XOR expr .)
    $end            reduce using rule 21 (expr -> expr XOR expr .)
    )               reduce using rule 21 (expr -> expr XOR expr .)
    ]               reduce using rule 21 (expr -> expr XOR expr .)
    ,               reduce using rule 21 (expr -> expr XOR expr .)
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 85

    (22) expr -> expr OR expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 22 (expr -> expr OR expr .)
    DIVIDE_ASSIGN   reduce using rule 22 (expr -> expr OR expr .)
    TIMES_ASSIGN    reduce using rule 22 (expr -> expr OR expr .)
    MINUS_ASSIGN    reduce using rule 22 (expr -> expr OR expr .)
    PLUS_ASSIGN     reduce using rule 22 (expr -> expr OR expr .)
    ASSIGN          reduce using rule 22 (expr -> expr OR expr .)
    ;               reduce using rule 22 (expr -> expr OR expr .)
    [               reduce using rule 22 (expr -> expr OR expr .)
    (               reduce using rule 22 (expr -> expr OR expr .)
    '               reduce using rule 22 (expr -> expr OR expr .)
    :               reduce using rule 22 (expr -> expr OR expr .)
    XOR             reduce using rule 22 (expr -> expr OR expr .)
    OR              reduce using rule 22 (expr -> expr OR expr .)
    AND             reduce using rule 22 (expr -> expr OR expr .)
    FUNCTION        reduce using rule 22 (expr -> expr OR expr .)
    {               reduce using rule 22 (expr -> expr OR expr .)
    FOR             reduce using rule 22 (expr -> expr OR expr .)
    WHILE           reduce using rule 22 (expr -> expr OR expr .)
    IF              reduce using rule 22 (expr -> expr OR expr .)
    CONTINUE        reduce using rule 22 (expr -> expr OR expr .)
    BREAK           reduce using rule 22 (expr -> expr OR expr .)
    RETURN          reduce using rule 22 (expr -> expr OR expr .)
    PRINT           reduce using rule 22 (expr -> expr OR expr .)
    ZEROS           reduce using rule 22 (expr -> expr OR expr .)
    ONES            reduce using rule 22 (expr -> expr OR expr .)
    EYE             reduce using rule 22 (expr -> expr OR expr .)
    STRING          reduce using rule 22 (expr -> expr OR expr .)
    FLOAT_NUMBER    reduce using rule 22 (expr -> expr OR expr .)
    INT_NUMBER      reduce using rule 22 (expr -> expr OR expr .)
    ID              reduce using rule 22 (expr -> expr OR expr .)
    NOT             reduce using rule 22 (expr -> expr OR expr .)
    $end            reduce using rule 22 (expr -> expr OR expr .)
    )               reduce using rule 22 (expr -> expr OR expr .)
    ]               reduce using rule 22 (expr -> expr OR expr .)
    ,               reduce using rule 22 (expr -> expr OR expr .)
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 86

    (23) expr -> expr AND expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 23 (expr -> expr AND expr .)
    DIVIDE_ASSIGN   reduce using rule 23 (expr -> expr AND expr .)
    TIMES_ASSIGN    reduce using rule 23 (expr -> expr AND expr .)
    MINUS_ASSIGN    reduce using rule 23 (expr -> expr AND expr .)
    PLUS_ASSIGN     reduce using rule 23 (expr -> expr AND expr .)
    ASSIGN          reduce using rule 23 (expr -> expr AND expr .)
    ;               reduce using rule 23 (expr -> expr AND expr .)
    [               reduce using rule 23 (expr -> expr AND expr .)
    (               reduce using rule 23 (expr -> expr AND expr .)
    '               reduce using rule 23 (expr -> expr AND expr .)
    :               reduce using rule 23 (expr -> expr AND expr .)
    XOR             reduce using rule 23 (expr -> expr AND expr .)
    OR              reduce using rule 23 (expr -> expr AND expr .)
    AND             reduce using rule 23 (expr -> expr AND expr .)
    FUNCTION        reduce using rule 23 (expr -> expr AND expr .)
    {               reduce using rule 23 (expr -> expr AND expr .)
    FOR             reduce using rule 23 (expr -> expr AND expr .)
    WHILE           reduce using rule 23 (expr -> expr AND expr .)
    IF              reduce using rule 23 (expr -> expr AND expr .)
    CONTINUE        reduce using rule 23 (expr -> expr AND expr .)
    BREAK           reduce using rule 23 (expr -> expr AND expr .)
    RETURN          reduce using rule 23 (expr -> expr AND expr .)
    PRINT           reduce using rule 23 (expr -> expr AND expr .)
    ZEROS           reduce using rule 23 (expr -> expr AND expr .)
    ONES            reduce using rule 23 (expr -> expr AND expr .)
    EYE             reduce using rule 23 (expr -> expr AND expr .)
    STRING          reduce using rule 23 (expr -> expr AND expr .)
    FLOAT_NUMBER    reduce using rule 23 (expr -> expr AND expr .)
    INT_NUMBER      reduce using rule 23 (expr -> expr AND expr .)
    ID              reduce using rule 23 (expr -> expr AND expr .)
    NOT             reduce using rule 23 (expr -> expr AND expr .)
    $end            reduce using rule 23 (expr -> expr AND expr .)
    )               reduce using rule 23 (expr -> expr AND expr .)
    ]               reduce using rule 23 (expr -> expr AND expr .)
    ,               reduce using rule 23 (expr -> expr AND expr .)
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 87

    (24) expr -> expr LOWER_EQUAL expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    DIVIDE_ASSIGN   reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    TIMES_ASSIGN    reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    MINUS_ASSIGN    reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    PLUS_ASSIGN     reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    ASSIGN          reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    ;               reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    [               reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    (               reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    '               reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    :               reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    XOR             reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    OR              reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    AND             reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    LOWER_EQUAL     reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    LOWER           reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    GREATER         reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    NOT_EQUAL       reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    EQUAL           reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    FUNCTION        reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    {               reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    FOR             reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    WHILE           reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    IF              reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    CONTINUE        reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    BREAK           reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    RETURN          reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    PRINT           reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    ZEROS           reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    ONES            reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    EYE             reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    STRING          reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    FLOAT_NUMBER    reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    INT_NUMBER      reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    ID              reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    NOT             reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    $end            reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    )               reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    ]               reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    ,               reduce using rule 24 (expr -> expr LOWER_EQUAL expr .)
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 88

    (25) expr -> expr LOWER expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 25 (expr -> expr LOWER expr .)
    DIVIDE_ASSIGN   reduce using rule 25 (expr -> expr LOWER expr .)
    TIMES_ASSIGN    reduce using rule 25 (expr -> expr LOWER expr .)
    MINUS_ASSIGN    reduce using rule 25 (expr -> expr LOWER expr .)
    PLUS_ASSIGN     reduce using rule 25 (expr -> expr LOWER expr .)
    ASSIGN          reduce using rule 25 (expr -> expr LOWER expr .)
    ;               reduce using rule 25 (expr -> expr LOWER expr .)
    [               reduce using rule 25 (expr -> expr LOWER expr .)
    (               reduce using rule 25 (expr -> expr LOWER expr .)
    '               reduce using rule 25 (expr -> expr LOWER expr .)
    :               reduce using rule 25 (expr -> expr LOWER expr .)
    XOR             reduce using rule 25 (expr -> expr LOWER expr .)
    OR              reduce using rule 25 (expr -> expr LOWER expr .)
    AND             reduce using rule 25 (expr -> expr LOWER expr .)
    LOWER_EQUAL     reduce using rule 25 (expr -> expr LOWER expr .)
    LOWER           reduce using rule 25 (expr -> expr LOWER expr .)
    GREATER_EQUAL   reduce using rule 25 (expr -> expr LOWER expr .)
    GREATER         reduce using rule 25 (expr -> expr LOWER expr .)
    NOT_EQUAL       reduce using rule 25 (expr -> expr LOWER expr .)
    EQUAL           reduce using rule 25 (expr -> expr LOWER expr .)
    FUNCTION        reduce using rule 25 (expr -> expr LOWER expr .)
    {               reduce using rule 25 (expr -> expr LOWER expr .)
    FOR             reduce using rule 25 (expr -> expr LOWER expr .)
    WHILE           reduce using rule 25 (expr -> expr LOWER expr .)
    IF              reduce using rule 25 (expr -> expr LOWER expr .)
    CONTINUE        reduce using rule 25 (expr -> expr LOWER expr .)
    BREAK           reduce using rule 25 (expr -> expr LOWER expr .)
    RETURN          reduce using rule 25 (expr -> expr LOWER expr .)
    PRINT           reduce using rule 25 (expr -> expr LOWER expr .)
    ZEROS           reduce using rule 25 (expr -> expr LOWER expr .)
    ONES            reduce using rule 25 (expr -> expr LOWER expr .)
    EYE             reduce using rule 25 (expr -> expr LOWER expr .)
    STRING          reduce using rule 25 (expr -> expr LOWER expr .)
    FLOAT_NUMBER    reduce using rule 25 (expr -> expr LOWER expr .)
    INT_NUMBER      reduce using rule 25 (expr -> expr LOWER expr .)
    ID              reduce using rule 25 (expr -> expr LOWER expr .)
    NOT             reduce using rule 25 (expr -> expr LOWER expr .)
    $end            reduce using rule 25 (expr -> expr LOWER expr .)
    )               reduce using rule 25 (expr -> expr LOWER expr .)
    ]               reduce using rule 25 (expr -> expr LOWER expr .)
    ,               reduce using rule 25 (expr -> expr LOWER expr .)
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 89

    (26) expr -> expr GREATER_EQUAL expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    DIVIDE_ASSIGN   reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    TIMES_ASSIGN    reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    MINUS_ASSIGN    reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    PLUS_ASSIGN     reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    ASSIGN          reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    ;               reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    [               reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    (               reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    '               reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    :               reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    XOR             reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    OR              reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    AND             reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    LOWER_EQUAL     reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    LOWER           reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    GREATER         reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    NOT_EQUAL       reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    EQUAL           reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    FUNCTION        reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    {               reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    FOR             reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    WHILE           reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    IF              reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    CONTINUE        reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    BREAK           reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    RETURN          reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    PRINT           reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    ZEROS           reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    ONES            reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    EYE             reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    STRING          reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    FLOAT_NUMBER    reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    INT_NUMBER      reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    ID              reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    NOT             reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    $end            reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    )               reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    ]               reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    ,               reduce using rule 26 (expr -> expr GREATER_EQUAL expr .)
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 90

    (27) expr -> expr GREATER expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 27 (expr -> expr GREATER expr .)
    DIVIDE_ASSIGN   reduce using rule 27 (expr -> expr GREATER expr .)
    TIMES_ASSIGN    reduce using rule 27 (expr -> expr GREATER expr .)
    MINUS_ASSIGN    reduce using rule 27 (expr -> expr GREATER expr .)
    PLUS_ASSIGN     reduce using rule 27 (expr -> expr GREATER expr .)
    ASSIGN          reduce using rule 27 (expr -> expr GREATER expr .)
    ;               reduce using rule 27 (expr -> expr GREATER expr .)
    [               reduce using rule 27 (expr -> expr GREATER expr .)
    (               reduce using rule 27 (expr -> expr GREATER expr .)
    '               reduce using rule 27 (expr -> expr GREATER expr .)
    :               reduce using rule 27 (expr -> expr GREATER expr .)
    XOR             reduce using rule 27 (expr -> expr GREATER expr .)
    OR              reduce using rule 27 (expr -> expr GREATER expr .)
    AND             reduce using rule 27 (expr -> expr GREATER expr .)
    LOWER_EQUAL     reduce using rule 27 (expr -> expr GREATER expr .)
    LOWER           reduce using rule 27 (expr -> expr GREATER expr .)
    GREATER_EQUAL   reduce using rule 27 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 27 (expr -> expr GREATER expr .)
    NOT_EQUAL       reduce using rule 27 (expr -> expr GREATER expr .)
    EQUAL           reduce using rule 27 (expr -> expr GREATER expr .)
    FUNCTION        reduce using rule 27 (expr -> expr GREATER expr .)
    {               reduce using rule 27 (expr -> expr GREATER expr .)
    FOR             reduce using rule 27 (expr -> expr GREATER expr .)
    WHILE           reduce using rule 27 (expr -> expr GREATER expr .)
    IF              reduce using rule 27 (expr -> expr GREATER expr .)
    CONTINUE        reduce using rule 27 (expr -> expr GREATER expr .)
    BREAK           reduce using rule 27 (expr -> expr GREATER expr .)
    RETURN          reduce using rule 27 (expr -> expr GREATER expr .)
    PRINT           reduce using rule 27 (expr -> expr GREATER expr .)
    ZEROS           reduce using rule 27 (expr -> expr GREATER expr .)
    ONES            reduce using rule 27 (expr -> expr GREATER expr .)
    EYE             reduce using rule 27 (expr -> expr GREATER expr .)
    STRING          reduce using rule 27 (expr -> expr GREATER expr .)
    FLOAT_NUMBER    reduce using rule 27 (expr -> expr GREATER expr .)
    INT_NUMBER      reduce using rule 27 (expr -> expr GREATER expr .)
    ID              reduce using rule 27 (expr -> expr GREATER expr .)
    NOT             reduce using rule 27 (expr -> expr GREATER expr .)
    $end            reduce using rule 27 (expr -> expr GREATER expr .)
    )               reduce using rule 27 (expr -> expr GREATER expr .)
    ]               reduce using rule 27 (expr -> expr GREATER expr .)
    ,               reduce using rule 27 (expr -> expr GREATER expr .)
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 91

    (28) expr -> expr NOT_EQUAL expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    DIVIDE_ASSIGN   reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    TIMES_ASSIGN    reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    MINUS_ASSIGN    reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    PLUS_ASSIGN     reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    ASSIGN          reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    ;               reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    [               reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    (               reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    '               reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    :               reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    XOR             reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    OR              reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    AND             reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    LOWER_EQUAL     reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    LOWER           reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    GREATER         reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    NOT_EQUAL       reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    EQUAL           reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    FUNCTION        reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    {               reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    FOR             reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    WHILE           reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    IF              reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    CONTINUE        reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    BREAK           reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    RETURN          reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    PRINT           reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    ZEROS           reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    ONES            reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    EYE             reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    STRING          reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    FLOAT_NUMBER    reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    INT_NUMBER      reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    ID              reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    NOT             reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    $end            reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    )               reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    ]               reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    ,               reduce using rule 28 (expr -> expr NOT_EQUAL expr .)
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 92

    (29) expr -> expr EQUAL expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 29 (expr -> expr EQUAL expr .)
    DIVIDE_ASSIGN   reduce using rule 29 (expr -> expr EQUAL expr .)
    TIMES_ASSIGN    reduce using rule 29 (expr -> expr EQUAL expr .)
    MINUS_ASSIGN    reduce using rule 29 (expr -> expr EQUAL expr .)
    PLUS_ASSIGN     reduce using rule 29 (expr -> expr EQUAL expr .)
    ASSIGN          reduce using rule 29 (expr -> expr EQUAL expr .)
    ;               reduce using rule 29 (expr -> expr EQUAL expr .)
    [               reduce using rule 29 (expr -> expr EQUAL expr .)
    (               reduce using rule 29 (expr -> expr EQUAL expr .)
    '               reduce using rule 29 (expr -> expr EQUAL expr .)
    :               reduce using rule 29 (expr -> expr EQUAL expr .)
    XOR             reduce using rule 29 (expr -> expr EQUAL expr .)
    OR              reduce using rule 29 (expr -> expr EQUAL expr .)
    AND             reduce using rule 29 (expr -> expr EQUAL expr .)
    LOWER_EQUAL     reduce using rule 29 (expr -> expr EQUAL expr .)
    LOWER           reduce using rule 29 (expr -> expr EQUAL expr .)
    GREATER_EQUAL   reduce using rule 29 (expr -> expr EQUAL expr .)
    GREATER         reduce using rule 29 (expr -> expr EQUAL expr .)
    NOT_EQUAL       reduce using rule 29 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 29 (expr -> expr EQUAL expr .)
    FUNCTION        reduce using rule 29 (expr -> expr EQUAL expr .)
    {               reduce using rule 29 (expr -> expr EQUAL expr .)
    FOR             reduce using rule 29 (expr -> expr EQUAL expr .)
    WHILE           reduce using rule 29 (expr -> expr EQUAL expr .)
    IF              reduce using rule 29 (expr -> expr EQUAL expr .)
    CONTINUE        reduce using rule 29 (expr -> expr EQUAL expr .)
    BREAK           reduce using rule 29 (expr -> expr EQUAL expr .)
    RETURN          reduce using rule 29 (expr -> expr EQUAL expr .)
    PRINT           reduce using rule 29 (expr -> expr EQUAL expr .)
    ZEROS           reduce using rule 29 (expr -> expr EQUAL expr .)
    ONES            reduce using rule 29 (expr -> expr EQUAL expr .)
    EYE             reduce using rule 29 (expr -> expr EQUAL expr .)
    STRING          reduce using rule 29 (expr -> expr EQUAL expr .)
    FLOAT_NUMBER    reduce using rule 29 (expr -> expr EQUAL expr .)
    INT_NUMBER      reduce using rule 29 (expr -> expr EQUAL expr .)
    ID              reduce using rule 29 (expr -> expr EQUAL expr .)
    NOT             reduce using rule 29 (expr -> expr EQUAL expr .)
    $end            reduce using rule 29 (expr -> expr EQUAL expr .)
    )               reduce using rule 29 (expr -> expr EQUAL expr .)
    ]               reduce using rule 29 (expr -> expr EQUAL expr .)
    ,               reduce using rule 29 (expr -> expr EQUAL expr .)
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 93

    (30) expr -> expr DOT_REMAINDER expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    DIVIDE_ASSIGN   reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    TIMES_ASSIGN    reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    MINUS_ASSIGN    reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    PLUS_ASSIGN     reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    ASSIGN          reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    ;               reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    [               reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    (               reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    '               reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    :               reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    XOR             reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    OR              reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    AND             reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    LOWER_EQUAL     reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    LOWER           reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    GREATER_EQUAL   reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    GREATER         reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    NOT_EQUAL       reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    EQUAL           reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    DOT_REMAINDER   reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    DOT_DIVIDE      reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    DOT_TIMES       reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    DOT_MINUS       reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    DOT_PLUS        reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    REMAINDER       reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    DIVIDE          reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    TIMES           reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    MINUS           reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    PLUS            reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    FUNCTION        reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    {               reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    FOR             reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    WHILE           reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    IF              reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    CONTINUE        reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    BREAK           reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    RETURN          reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    PRINT           reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    ZEROS           reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    ONES            reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    EYE             reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    STRING          reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    FLOAT_NUMBER    reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    INT_NUMBER      reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    ID              reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    NOT             reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    $end            reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    )               reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    ]               reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)
    ,               reduce using rule 30 (expr -> expr DOT_REMAINDER expr .)


state 94

    (31) expr -> expr DOT_DIVIDE expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    DIVIDE_ASSIGN   reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    TIMES_ASSIGN    reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    MINUS_ASSIGN    reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    PLUS_ASSIGN     reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    ASSIGN          reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    ;               reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    [               reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    (               reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    '               reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    :               reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    XOR             reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    OR              reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    AND             reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    LOWER_EQUAL     reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    LOWER           reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    GREATER_EQUAL   reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    GREATER         reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    NOT_EQUAL       reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    EQUAL           reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    DOT_REMAINDER   reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    DOT_DIVIDE      reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    DOT_TIMES       reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    DOT_MINUS       reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    DOT_PLUS        reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    REMAINDER       reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    DIVIDE          reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    TIMES           reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    MINUS           reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    PLUS            reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    FUNCTION        reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    {               reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    FOR             reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    WHILE           reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    IF              reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    CONTINUE        reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    BREAK           reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    RETURN          reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    PRINT           reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    ZEROS           reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    ONES            reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    EYE             reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    STRING          reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    FLOAT_NUMBER    reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    INT_NUMBER      reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    ID              reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    NOT             reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    $end            reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    )               reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    ]               reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)
    ,               reduce using rule 31 (expr -> expr DOT_DIVIDE expr .)


state 95

    (32) expr -> expr DOT_TIMES expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    DIVIDE_ASSIGN   reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    TIMES_ASSIGN    reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    MINUS_ASSIGN    reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    PLUS_ASSIGN     reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    ASSIGN          reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    ;               reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    [               reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    (               reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    '               reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    :               reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    XOR             reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    OR              reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    AND             reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    LOWER_EQUAL     reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    LOWER           reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    GREATER_EQUAL   reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    GREATER         reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    NOT_EQUAL       reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    EQUAL           reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    DOT_REMAINDER   reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    DOT_DIVIDE      reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    DOT_TIMES       reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    DOT_MINUS       reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    DOT_PLUS        reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    REMAINDER       reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    DIVIDE          reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    TIMES           reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    MINUS           reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    PLUS            reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    FUNCTION        reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    {               reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    FOR             reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    WHILE           reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    IF              reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    CONTINUE        reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    BREAK           reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    RETURN          reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    PRINT           reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    ZEROS           reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    ONES            reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    EYE             reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    STRING          reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    FLOAT_NUMBER    reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    INT_NUMBER      reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    ID              reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    NOT             reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    $end            reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    )               reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    ]               reduce using rule 32 (expr -> expr DOT_TIMES expr .)
    ,               reduce using rule 32 (expr -> expr DOT_TIMES expr .)


state 96

    (33) expr -> expr DOT_MINUS expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    DIVIDE_ASSIGN   reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    TIMES_ASSIGN    reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    MINUS_ASSIGN    reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    PLUS_ASSIGN     reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    ASSIGN          reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    ;               reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    [               reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    (               reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    '               reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    :               reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    XOR             reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    OR              reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    AND             reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    LOWER_EQUAL     reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    LOWER           reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    GREATER_EQUAL   reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    GREATER         reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    NOT_EQUAL       reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    EQUAL           reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    DOT_MINUS       reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    DOT_PLUS        reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    MINUS           reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    PLUS            reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    FUNCTION        reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    {               reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    FOR             reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    WHILE           reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    IF              reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    CONTINUE        reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    BREAK           reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    RETURN          reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    PRINT           reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    ZEROS           reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    ONES            reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    EYE             reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    STRING          reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    FLOAT_NUMBER    reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    INT_NUMBER      reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    ID              reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    NOT             reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    $end            reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    )               reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    ]               reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    ,               reduce using rule 33 (expr -> expr DOT_MINUS expr .)
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53


state 97

    (34) expr -> expr DOT_PLUS expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    DIVIDE_ASSIGN   reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    TIMES_ASSIGN    reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    MINUS_ASSIGN    reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    PLUS_ASSIGN     reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    ASSIGN          reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    ;               reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    [               reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    (               reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    '               reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    :               reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    XOR             reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    OR              reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    AND             reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    LOWER_EQUAL     reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    LOWER           reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    GREATER_EQUAL   reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    GREATER         reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    NOT_EQUAL       reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    EQUAL           reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    DOT_MINUS       reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    DOT_PLUS        reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    MINUS           reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    PLUS            reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    FUNCTION        reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    {               reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    FOR             reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    WHILE           reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    IF              reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    CONTINUE        reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    BREAK           reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    RETURN          reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    PRINT           reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    ZEROS           reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    ONES            reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    EYE             reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    STRING          reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    FLOAT_NUMBER    reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    INT_NUMBER      reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    ID              reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    NOT             reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    $end            reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    )               reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    ]               reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    ,               reduce using rule 34 (expr -> expr DOT_PLUS expr .)
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53


state 98

    (35) expr -> expr REMAINDER expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 35 (expr -> expr REMAINDER expr .)
    DIVIDE_ASSIGN   reduce using rule 35 (expr -> expr REMAINDER expr .)
    TIMES_ASSIGN    reduce using rule 35 (expr -> expr REMAINDER expr .)
    MINUS_ASSIGN    reduce using rule 35 (expr -> expr REMAINDER expr .)
    PLUS_ASSIGN     reduce using rule 35 (expr -> expr REMAINDER expr .)
    ASSIGN          reduce using rule 35 (expr -> expr REMAINDER expr .)
    ;               reduce using rule 35 (expr -> expr REMAINDER expr .)
    [               reduce using rule 35 (expr -> expr REMAINDER expr .)
    (               reduce using rule 35 (expr -> expr REMAINDER expr .)
    '               reduce using rule 35 (expr -> expr REMAINDER expr .)
    :               reduce using rule 35 (expr -> expr REMAINDER expr .)
    XOR             reduce using rule 35 (expr -> expr REMAINDER expr .)
    OR              reduce using rule 35 (expr -> expr REMAINDER expr .)
    AND             reduce using rule 35 (expr -> expr REMAINDER expr .)
    LOWER_EQUAL     reduce using rule 35 (expr -> expr REMAINDER expr .)
    LOWER           reduce using rule 35 (expr -> expr REMAINDER expr .)
    GREATER_EQUAL   reduce using rule 35 (expr -> expr REMAINDER expr .)
    GREATER         reduce using rule 35 (expr -> expr REMAINDER expr .)
    NOT_EQUAL       reduce using rule 35 (expr -> expr REMAINDER expr .)
    EQUAL           reduce using rule 35 (expr -> expr REMAINDER expr .)
    DOT_REMAINDER   reduce using rule 35 (expr -> expr REMAINDER expr .)
    DOT_DIVIDE      reduce using rule 35 (expr -> expr REMAINDER expr .)
    DOT_TIMES       reduce using rule 35 (expr -> expr REMAINDER expr .)
    DOT_MINUS       reduce using rule 35 (expr -> expr REMAINDER expr .)
    DOT_PLUS        reduce using rule 35 (expr -> expr REMAINDER expr .)
    REMAINDER       reduce using rule 35 (expr -> expr REMAINDER expr .)
    DIVIDE          reduce using rule 35 (expr -> expr REMAINDER expr .)
    TIMES           reduce using rule 35 (expr -> expr REMAINDER expr .)
    MINUS           reduce using rule 35 (expr -> expr REMAINDER expr .)
    PLUS            reduce using rule 35 (expr -> expr REMAINDER expr .)
    FUNCTION        reduce using rule 35 (expr -> expr REMAINDER expr .)
    {               reduce using rule 35 (expr -> expr REMAINDER expr .)
    FOR             reduce using rule 35 (expr -> expr REMAINDER expr .)
    WHILE           reduce using rule 35 (expr -> expr REMAINDER expr .)
    IF              reduce using rule 35 (expr -> expr REMAINDER expr .)
    CONTINUE        reduce using rule 35 (expr -> expr REMAINDER expr .)
    BREAK           reduce using rule 35 (expr -> expr REMAINDER expr .)
    RETURN          reduce using rule 35 (expr -> expr REMAINDER expr .)
    PRINT           reduce using rule 35 (expr -> expr REMAINDER expr .)
    ZEROS           reduce using rule 35 (expr -> expr REMAINDER expr .)
    ONES            reduce using rule 35 (expr -> expr REMAINDER expr .)
    EYE             reduce using rule 35 (expr -> expr REMAINDER expr .)
    STRING          reduce using rule 35 (expr -> expr REMAINDER expr .)
    FLOAT_NUMBER    reduce using rule 35 (expr -> expr REMAINDER expr .)
    INT_NUMBER      reduce using rule 35 (expr -> expr REMAINDER expr .)
    ID              reduce using rule 35 (expr -> expr REMAINDER expr .)
    NOT             reduce using rule 35 (expr -> expr REMAINDER expr .)
    $end            reduce using rule 35 (expr -> expr REMAINDER expr .)
    )               reduce using rule 35 (expr -> expr REMAINDER expr .)
    ]               reduce using rule 35 (expr -> expr REMAINDER expr .)
    ,               reduce using rule 35 (expr -> expr REMAINDER expr .)


state 99

    (36) expr -> expr DIVIDE expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 36 (expr -> expr DIVIDE expr .)
    DIVIDE_ASSIGN   reduce using rule 36 (expr -> expr DIVIDE expr .)
    TIMES_ASSIGN    reduce using rule 36 (expr -> expr DIVIDE expr .)
    MINUS_ASSIGN    reduce using rule 36 (expr -> expr DIVIDE expr .)
    PLUS_ASSIGN     reduce using rule 36 (expr -> expr DIVIDE expr .)
    ASSIGN          reduce using rule 36 (expr -> expr DIVIDE expr .)
    ;               reduce using rule 36 (expr -> expr DIVIDE expr .)
    [               reduce using rule 36 (expr -> expr DIVIDE expr .)
    (               reduce using rule 36 (expr -> expr DIVIDE expr .)
    '               reduce using rule 36 (expr -> expr DIVIDE expr .)
    :               reduce using rule 36 (expr -> expr DIVIDE expr .)
    XOR             reduce using rule 36 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 36 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 36 (expr -> expr DIVIDE expr .)
    LOWER_EQUAL     reduce using rule 36 (expr -> expr DIVIDE expr .)
    LOWER           reduce using rule 36 (expr -> expr DIVIDE expr .)
    GREATER_EQUAL   reduce using rule 36 (expr -> expr DIVIDE expr .)
    GREATER         reduce using rule 36 (expr -> expr DIVIDE expr .)
    NOT_EQUAL       reduce using rule 36 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 36 (expr -> expr DIVIDE expr .)
    DOT_REMAINDER   reduce using rule 36 (expr -> expr DIVIDE expr .)
    DOT_DIVIDE      reduce using rule 36 (expr -> expr DIVIDE expr .)
    DOT_TIMES       reduce using rule 36 (expr -> expr DIVIDE expr .)
    DOT_MINUS       reduce using rule 36 (expr -> expr DIVIDE expr .)
    DOT_PLUS        reduce using rule 36 (expr -> expr DIVIDE expr .)
    REMAINDER       reduce using rule 36 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 36 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 36 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 36 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 36 (expr -> expr DIVIDE expr .)
    FUNCTION        reduce using rule 36 (expr -> expr DIVIDE expr .)
    {               reduce using rule 36 (expr -> expr DIVIDE expr .)
    FOR             reduce using rule 36 (expr -> expr DIVIDE expr .)
    WHILE           reduce using rule 36 (expr -> expr DIVIDE expr .)
    IF              reduce using rule 36 (expr -> expr DIVIDE expr .)
    CONTINUE        reduce using rule 36 (expr -> expr DIVIDE expr .)
    BREAK           reduce using rule 36 (expr -> expr DIVIDE expr .)
    RETURN          reduce using rule 36 (expr -> expr DIVIDE expr .)
    PRINT           reduce using rule 36 (expr -> expr DIVIDE expr .)
    ZEROS           reduce using rule 36 (expr -> expr DIVIDE expr .)
    ONES            reduce using rule 36 (expr -> expr DIVIDE expr .)
    EYE             reduce using rule 36 (expr -> expr DIVIDE expr .)
    STRING          reduce using rule 36 (expr -> expr DIVIDE expr .)
    FLOAT_NUMBER    reduce using rule 36 (expr -> expr DIVIDE expr .)
    INT_NUMBER      reduce using rule 36 (expr -> expr DIVIDE expr .)
    ID              reduce using rule 36 (expr -> expr DIVIDE expr .)
    NOT             reduce using rule 36 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 36 (expr -> expr DIVIDE expr .)
    )               reduce using rule 36 (expr -> expr DIVIDE expr .)
    ]               reduce using rule 36 (expr -> expr DIVIDE expr .)
    ,               reduce using rule 36 (expr -> expr DIVIDE expr .)


state 100

    (37) expr -> expr TIMES expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 37 (expr -> expr TIMES expr .)
    DIVIDE_ASSIGN   reduce using rule 37 (expr -> expr TIMES expr .)
    TIMES_ASSIGN    reduce using rule 37 (expr -> expr TIMES expr .)
    MINUS_ASSIGN    reduce using rule 37 (expr -> expr TIMES expr .)
    PLUS_ASSIGN     reduce using rule 37 (expr -> expr TIMES expr .)
    ASSIGN          reduce using rule 37 (expr -> expr TIMES expr .)
    ;               reduce using rule 37 (expr -> expr TIMES expr .)
    [               reduce using rule 37 (expr -> expr TIMES expr .)
    (               reduce using rule 37 (expr -> expr TIMES expr .)
    '               reduce using rule 37 (expr -> expr TIMES expr .)
    :               reduce using rule 37 (expr -> expr TIMES expr .)
    XOR             reduce using rule 37 (expr -> expr TIMES expr .)
    OR              reduce using rule 37 (expr -> expr TIMES expr .)
    AND             reduce using rule 37 (expr -> expr TIMES expr .)
    LOWER_EQUAL     reduce using rule 37 (expr -> expr TIMES expr .)
    LOWER           reduce using rule 37 (expr -> expr TIMES expr .)
    GREATER_EQUAL   reduce using rule 37 (expr -> expr TIMES expr .)
    GREATER         reduce using rule 37 (expr -> expr TIMES expr .)
    NOT_EQUAL       reduce using rule 37 (expr -> expr TIMES expr .)
    EQUAL           reduce using rule 37 (expr -> expr TIMES expr .)
    DOT_REMAINDER   reduce using rule 37 (expr -> expr TIMES expr .)
    DOT_DIVIDE      reduce using rule 37 (expr -> expr TIMES expr .)
    DOT_TIMES       reduce using rule 37 (expr -> expr TIMES expr .)
    DOT_MINUS       reduce using rule 37 (expr -> expr TIMES expr .)
    DOT_PLUS        reduce using rule 37 (expr -> expr TIMES expr .)
    REMAINDER       reduce using rule 37 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 37 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 37 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 37 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 37 (expr -> expr TIMES expr .)
    FUNCTION        reduce using rule 37 (expr -> expr TIMES expr .)
    {               reduce using rule 37 (expr -> expr TIMES expr .)
    FOR             reduce using rule 37 (expr -> expr TIMES expr .)
    WHILE           reduce using rule 37 (expr -> expr TIMES expr .)
    IF              reduce using rule 37 (expr -> expr TIMES expr .)
    CONTINUE        reduce using rule 37 (expr -> expr TIMES expr .)
    BREAK           reduce using rule 37 (expr -> expr TIMES expr .)
    RETURN          reduce using rule 37 (expr -> expr TIMES expr .)
    PRINT           reduce using rule 37 (expr -> expr TIMES expr .)
    ZEROS           reduce using rule 37 (expr -> expr TIMES expr .)
    ONES            reduce using rule 37 (expr -> expr TIMES expr .)
    EYE             reduce using rule 37 (expr -> expr TIMES expr .)
    STRING          reduce using rule 37 (expr -> expr TIMES expr .)
    FLOAT_NUMBER    reduce using rule 37 (expr -> expr TIMES expr .)
    INT_NUMBER      reduce using rule 37 (expr -> expr TIMES expr .)
    ID              reduce using rule 37 (expr -> expr TIMES expr .)
    NOT             reduce using rule 37 (expr -> expr TIMES expr .)
    $end            reduce using rule 37 (expr -> expr TIMES expr .)
    )               reduce using rule 37 (expr -> expr TIMES expr .)
    ]               reduce using rule 37 (expr -> expr TIMES expr .)
    ,               reduce using rule 37 (expr -> expr TIMES expr .)


state 101

    (38) expr -> expr MINUS expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 38 (expr -> expr MINUS expr .)
    DIVIDE_ASSIGN   reduce using rule 38 (expr -> expr MINUS expr .)
    TIMES_ASSIGN    reduce using rule 38 (expr -> expr MINUS expr .)
    MINUS_ASSIGN    reduce using rule 38 (expr -> expr MINUS expr .)
    PLUS_ASSIGN     reduce using rule 38 (expr -> expr MINUS expr .)
    ASSIGN          reduce using rule 38 (expr -> expr MINUS expr .)
    ;               reduce using rule 38 (expr -> expr MINUS expr .)
    [               reduce using rule 38 (expr -> expr MINUS expr .)
    (               reduce using rule 38 (expr -> expr MINUS expr .)
    '               reduce using rule 38 (expr -> expr MINUS expr .)
    :               reduce using rule 38 (expr -> expr MINUS expr .)
    XOR             reduce using rule 38 (expr -> expr MINUS expr .)
    OR              reduce using rule 38 (expr -> expr MINUS expr .)
    AND             reduce using rule 38 (expr -> expr MINUS expr .)
    LOWER_EQUAL     reduce using rule 38 (expr -> expr MINUS expr .)
    LOWER           reduce using rule 38 (expr -> expr MINUS expr .)
    GREATER_EQUAL   reduce using rule 38 (expr -> expr MINUS expr .)
    GREATER         reduce using rule 38 (expr -> expr MINUS expr .)
    NOT_EQUAL       reduce using rule 38 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 38 (expr -> expr MINUS expr .)
    DOT_MINUS       reduce using rule 38 (expr -> expr MINUS expr .)
    DOT_PLUS        reduce using rule 38 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 38 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 38 (expr -> expr MINUS expr .)
    FUNCTION        reduce using rule 38 (expr -> expr MINUS expr .)
    {               reduce using rule 38 (expr -> expr MINUS expr .)
    FOR             reduce using rule 38 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 38 (expr -> expr MINUS expr .)
    IF              reduce using rule 38 (expr -> expr MINUS expr .)
    CONTINUE        reduce using rule 38 (expr -> expr MINUS expr .)
    BREAK           reduce using rule 38 (expr -> expr MINUS expr .)
    RETURN          reduce using rule 38 (expr -> expr MINUS expr .)
    PRINT           reduce using rule 38 (expr -> expr MINUS expr .)
    ZEROS           reduce using rule 38 (expr -> expr MINUS expr .)
    ONES            reduce using rule 38 (expr -> expr MINUS expr .)
    EYE             reduce using rule 38 (expr -> expr MINUS expr .)
    STRING          reduce using rule 38 (expr -> expr MINUS expr .)
    FLOAT_NUMBER    reduce using rule 38 (expr -> expr MINUS expr .)
    INT_NUMBER      reduce using rule 38 (expr -> expr MINUS expr .)
    ID              reduce using rule 38 (expr -> expr MINUS expr .)
    NOT             reduce using rule 38 (expr -> expr MINUS expr .)
    $end            reduce using rule 38 (expr -> expr MINUS expr .)
    )               reduce using rule 38 (expr -> expr MINUS expr .)
    ]               reduce using rule 38 (expr -> expr MINUS expr .)
    ,               reduce using rule 38 (expr -> expr MINUS expr .)
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53


state 102

    (39) expr -> expr PLUS expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 39 (expr -> expr PLUS expr .)
    DIVIDE_ASSIGN   reduce using rule 39 (expr -> expr PLUS expr .)
    TIMES_ASSIGN    reduce using rule 39 (expr -> expr PLUS expr .)
    MINUS_ASSIGN    reduce using rule 39 (expr -> expr PLUS expr .)
    PLUS_ASSIGN     reduce using rule 39 (expr -> expr PLUS expr .)
    ASSIGN          reduce using rule 39 (expr -> expr PLUS expr .)
    ;               reduce using rule 39 (expr -> expr PLUS expr .)
    [               reduce using rule 39 (expr -> expr PLUS expr .)
    (               reduce using rule 39 (expr -> expr PLUS expr .)
    '               reduce using rule 39 (expr -> expr PLUS expr .)
    :               reduce using rule 39 (expr -> expr PLUS expr .)
    XOR             reduce using rule 39 (expr -> expr PLUS expr .)
    OR              reduce using rule 39 (expr -> expr PLUS expr .)
    AND             reduce using rule 39 (expr -> expr PLUS expr .)
    LOWER_EQUAL     reduce using rule 39 (expr -> expr PLUS expr .)
    LOWER           reduce using rule 39 (expr -> expr PLUS expr .)
    GREATER_EQUAL   reduce using rule 39 (expr -> expr PLUS expr .)
    GREATER         reduce using rule 39 (expr -> expr PLUS expr .)
    NOT_EQUAL       reduce using rule 39 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 39 (expr -> expr PLUS expr .)
    DOT_MINUS       reduce using rule 39 (expr -> expr PLUS expr .)
    DOT_PLUS        reduce using rule 39 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 39 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 39 (expr -> expr PLUS expr .)
    FUNCTION        reduce using rule 39 (expr -> expr PLUS expr .)
    {               reduce using rule 39 (expr -> expr PLUS expr .)
    FOR             reduce using rule 39 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 39 (expr -> expr PLUS expr .)
    IF              reduce using rule 39 (expr -> expr PLUS expr .)
    CONTINUE        reduce using rule 39 (expr -> expr PLUS expr .)
    BREAK           reduce using rule 39 (expr -> expr PLUS expr .)
    RETURN          reduce using rule 39 (expr -> expr PLUS expr .)
    PRINT           reduce using rule 39 (expr -> expr PLUS expr .)
    ZEROS           reduce using rule 39 (expr -> expr PLUS expr .)
    ONES            reduce using rule 39 (expr -> expr PLUS expr .)
    EYE             reduce using rule 39 (expr -> expr PLUS expr .)
    STRING          reduce using rule 39 (expr -> expr PLUS expr .)
    FLOAT_NUMBER    reduce using rule 39 (expr -> expr PLUS expr .)
    INT_NUMBER      reduce using rule 39 (expr -> expr PLUS expr .)
    ID              reduce using rule 39 (expr -> expr PLUS expr .)
    NOT             reduce using rule 39 (expr -> expr PLUS expr .)
    $end            reduce using rule 39 (expr -> expr PLUS expr .)
    )               reduce using rule 39 (expr -> expr PLUS expr .)
    ]               reduce using rule 39 (expr -> expr PLUS expr .)
    ,               reduce using rule 39 (expr -> expr PLUS expr .)
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53


state 103

    (61) function -> FUNCTION ID ( . ) statement
    (62) function -> FUNCTION ID ( . parameter_list ) statement
    (40) parameter_list -> . expr
    (41) parameter_list -> . parameter_list , expr
    (42) parameter_list -> .
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 124
    ,               reduce using rule 42 (parameter_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    parameter_list                 shift and go to state 125
    expr                           shift and go to state 79

state 104

    (16) expr -> ( expr ) .
    REMAINDER_ASSIGN reduce using rule 16 (expr -> ( expr ) .)
    DIVIDE_ASSIGN   reduce using rule 16 (expr -> ( expr ) .)
    TIMES_ASSIGN    reduce using rule 16 (expr -> ( expr ) .)
    MINUS_ASSIGN    reduce using rule 16 (expr -> ( expr ) .)
    PLUS_ASSIGN     reduce using rule 16 (expr -> ( expr ) .)
    ASSIGN          reduce using rule 16 (expr -> ( expr ) .)
    ;               reduce using rule 16 (expr -> ( expr ) .)
    [               reduce using rule 16 (expr -> ( expr ) .)
    (               reduce using rule 16 (expr -> ( expr ) .)
    '               reduce using rule 16 (expr -> ( expr ) .)
    :               reduce using rule 16 (expr -> ( expr ) .)
    XOR             reduce using rule 16 (expr -> ( expr ) .)
    OR              reduce using rule 16 (expr -> ( expr ) .)
    AND             reduce using rule 16 (expr -> ( expr ) .)
    LOWER_EQUAL     reduce using rule 16 (expr -> ( expr ) .)
    LOWER           reduce using rule 16 (expr -> ( expr ) .)
    GREATER_EQUAL   reduce using rule 16 (expr -> ( expr ) .)
    GREATER         reduce using rule 16 (expr -> ( expr ) .)
    NOT_EQUAL       reduce using rule 16 (expr -> ( expr ) .)
    EQUAL           reduce using rule 16 (expr -> ( expr ) .)
    DOT_REMAINDER   reduce using rule 16 (expr -> ( expr ) .)
    DOT_DIVIDE      reduce using rule 16 (expr -> ( expr ) .)
    DOT_TIMES       reduce using rule 16 (expr -> ( expr ) .)
    DOT_MINUS       reduce using rule 16 (expr -> ( expr ) .)
    DOT_PLUS        reduce using rule 16 (expr -> ( expr ) .)
    REMAINDER       reduce using rule 16 (expr -> ( expr ) .)
    DIVIDE          reduce using rule 16 (expr -> ( expr ) .)
    TIMES           reduce using rule 16 (expr -> ( expr ) .)
    MINUS           reduce using rule 16 (expr -> ( expr ) .)
    PLUS            reduce using rule 16 (expr -> ( expr ) .)
    FUNCTION        reduce using rule 16 (expr -> ( expr ) .)
    {               reduce using rule 16 (expr -> ( expr ) .)
    FOR             reduce using rule 16 (expr -> ( expr ) .)
    WHILE           reduce using rule 16 (expr -> ( expr ) .)
    IF              reduce using rule 16 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 16 (expr -> ( expr ) .)
    BREAK           reduce using rule 16 (expr -> ( expr ) .)
    RETURN          reduce using rule 16 (expr -> ( expr ) .)
    PRINT           reduce using rule 16 (expr -> ( expr ) .)
    ZEROS           reduce using rule 16 (expr -> ( expr ) .)
    ONES            reduce using rule 16 (expr -> ( expr ) .)
    EYE             reduce using rule 16 (expr -> ( expr ) .)
    STRING          reduce using rule 16 (expr -> ( expr ) .)
    FLOAT_NUMBER    reduce using rule 16 (expr -> ( expr ) .)
    INT_NUMBER      reduce using rule 16 (expr -> ( expr ) .)
    ID              reduce using rule 16 (expr -> ( expr ) .)
    NOT             reduce using rule 16 (expr -> ( expr ) .)
    $end            reduce using rule 16 (expr -> ( expr ) .)
    )               reduce using rule 16 (expr -> ( expr ) .)
    ]               reduce using rule 16 (expr -> ( expr ) .)
    ,               reduce using rule 16 (expr -> ( expr ) .)


state 105

    (43) statement -> { statement_series } .
    FUNCTION        reduce using rule 43 (statement -> { statement_series } .)
    {               reduce using rule 43 (statement -> { statement_series } .)
    FOR             reduce using rule 43 (statement -> { statement_series } .)
    WHILE           reduce using rule 43 (statement -> { statement_series } .)
    IF              reduce using rule 43 (statement -> { statement_series } .)
    CONTINUE        reduce using rule 43 (statement -> { statement_series } .)
    BREAK           reduce using rule 43 (statement -> { statement_series } .)
    RETURN          reduce using rule 43 (statement -> { statement_series } .)
    PRINT           reduce using rule 43 (statement -> { statement_series } .)
    ZEROS           reduce using rule 43 (statement -> { statement_series } .)
    ONES            reduce using rule 43 (statement -> { statement_series } .)
    EYE             reduce using rule 43 (statement -> { statement_series } .)
    STRING          reduce using rule 43 (statement -> { statement_series } .)
    FLOAT_NUMBER    reduce using rule 43 (statement -> { statement_series } .)
    INT_NUMBER      reduce using rule 43 (statement -> { statement_series } .)
    ID              reduce using rule 43 (statement -> { statement_series } .)
    (               reduce using rule 43 (statement -> { statement_series } .)
    NOT             reduce using rule 43 (statement -> { statement_series } .)
    MINUS           reduce using rule 43 (statement -> { statement_series } .)
    $end            reduce using rule 43 (statement -> { statement_series } .)
    }               reduce using rule 43 (statement -> { statement_series } .)
    ELSE            reduce using rule 43 (statement -> { statement_series } .)


state 106

    (59) statement_series -> statement_series statement .
    }               reduce using rule 59 (statement_series -> statement_series statement .)
    {               reduce using rule 59 (statement_series -> statement_series statement .)
    FOR             reduce using rule 59 (statement_series -> statement_series statement .)
    WHILE           reduce using rule 59 (statement_series -> statement_series statement .)
    IF              reduce using rule 59 (statement_series -> statement_series statement .)
    CONTINUE        reduce using rule 59 (statement_series -> statement_series statement .)
    BREAK           reduce using rule 59 (statement_series -> statement_series statement .)
    RETURN          reduce using rule 59 (statement_series -> statement_series statement .)
    PRINT           reduce using rule 59 (statement_series -> statement_series statement .)
    ZEROS           reduce using rule 59 (statement_series -> statement_series statement .)
    ONES            reduce using rule 59 (statement_series -> statement_series statement .)
    EYE             reduce using rule 59 (statement_series -> statement_series statement .)
    STRING          reduce using rule 59 (statement_series -> statement_series statement .)
    FLOAT_NUMBER    reduce using rule 59 (statement_series -> statement_series statement .)
    INT_NUMBER      reduce using rule 59 (statement_series -> statement_series statement .)
    ID              reduce using rule 59 (statement_series -> statement_series statement .)
    (               reduce using rule 59 (statement_series -> statement_series statement .)
    NOT             reduce using rule 59 (statement_series -> statement_series statement .)
    MINUS           reduce using rule 59 (statement_series -> statement_series statement .)


state 107

    (44) statement -> FOR ( ID . IN expr ) statement
    IN              shift and go to state 126


state 108

    (45) statement -> WHILE ( expr . ) statement
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    )               shift and go to state 127
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 109

    (46) statement -> IF ( expr . ) statement ELSE statement
    (47) statement -> IF ( expr . ) statement
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    )               shift and go to state 128
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 110

    (56) statement -> RETURN expr ; .
    FUNCTION        reduce using rule 56 (statement -> RETURN expr ; .)
    {               reduce using rule 56 (statement -> RETURN expr ; .)
    FOR             reduce using rule 56 (statement -> RETURN expr ; .)
    WHILE           reduce using rule 56 (statement -> RETURN expr ; .)
    IF              reduce using rule 56 (statement -> RETURN expr ; .)
    CONTINUE        reduce using rule 56 (statement -> RETURN expr ; .)
    BREAK           reduce using rule 56 (statement -> RETURN expr ; .)
    RETURN          reduce using rule 56 (statement -> RETURN expr ; .)
    PRINT           reduce using rule 56 (statement -> RETURN expr ; .)
    ZEROS           reduce using rule 56 (statement -> RETURN expr ; .)
    ONES            reduce using rule 56 (statement -> RETURN expr ; .)
    EYE             reduce using rule 56 (statement -> RETURN expr ; .)
    STRING          reduce using rule 56 (statement -> RETURN expr ; .)
    FLOAT_NUMBER    reduce using rule 56 (statement -> RETURN expr ; .)
    INT_NUMBER      reduce using rule 56 (statement -> RETURN expr ; .)
    ID              reduce using rule 56 (statement -> RETURN expr ; .)
    (               reduce using rule 56 (statement -> RETURN expr ; .)
    NOT             reduce using rule 56 (statement -> RETURN expr ; .)
    MINUS           reduce using rule 56 (statement -> RETURN expr ; .)
    $end            reduce using rule 56 (statement -> RETURN expr ; .)
    }               reduce using rule 56 (statement -> RETURN expr ; .)
    ELSE            reduce using rule 56 (statement -> RETURN expr ; .)


state 111

    (57) statement -> PRINT expr ; .
    FUNCTION        reduce using rule 57 (statement -> PRINT expr ; .)
    {               reduce using rule 57 (statement -> PRINT expr ; .)
    FOR             reduce using rule 57 (statement -> PRINT expr ; .)
    WHILE           reduce using rule 57 (statement -> PRINT expr ; .)
    IF              reduce using rule 57 (statement -> PRINT expr ; .)
    CONTINUE        reduce using rule 57 (statement -> PRINT expr ; .)
    BREAK           reduce using rule 57 (statement -> PRINT expr ; .)
    RETURN          reduce using rule 57 (statement -> PRINT expr ; .)
    PRINT           reduce using rule 57 (statement -> PRINT expr ; .)
    ZEROS           reduce using rule 57 (statement -> PRINT expr ; .)
    ONES            reduce using rule 57 (statement -> PRINT expr ; .)
    EYE             reduce using rule 57 (statement -> PRINT expr ; .)
    STRING          reduce using rule 57 (statement -> PRINT expr ; .)
    FLOAT_NUMBER    reduce using rule 57 (statement -> PRINT expr ; .)
    INT_NUMBER      reduce using rule 57 (statement -> PRINT expr ; .)
    ID              reduce using rule 57 (statement -> PRINT expr ; .)
    (               reduce using rule 57 (statement -> PRINT expr ; .)
    NOT             reduce using rule 57 (statement -> PRINT expr ; .)
    MINUS           reduce using rule 57 (statement -> PRINT expr ; .)
    $end            reduce using rule 57 (statement -> PRINT expr ; .)
    }               reduce using rule 57 (statement -> PRINT expr ; .)
    ELSE            reduce using rule 57 (statement -> PRINT expr ; .)


state 112

    (9) expr -> ZEROS ( parameter_list . )
    (41) parameter_list -> parameter_list . , expr
    )               shift and go to state 129
    ,               shift and go to state 122


state 113

    (10) expr -> ONES ( parameter_list . )
    (41) parameter_list -> parameter_list . , expr
    )               shift and go to state 130
    ,               shift and go to state 122


state 114

    (11) expr -> EYE ( parameter_list . )
    (41) parameter_list -> parameter_list . , expr
    )               shift and go to state 131
    ,               shift and go to state 122


state 115

    (48) statement -> expr REMAINDER_ASSIGN expr ; .
    FUNCTION        reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    {               reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    FOR             reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    WHILE           reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    IF              reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    CONTINUE        reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    BREAK           reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    RETURN          reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    PRINT           reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    ZEROS           reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    ONES            reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    EYE             reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    STRING          reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    ID              reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    (               reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    NOT             reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    MINUS           reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    $end            reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    }               reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)
    ELSE            reduce using rule 48 (statement -> expr REMAINDER_ASSIGN expr ; .)


state 116

    (49) statement -> expr DIVIDE_ASSIGN expr ; .
    FUNCTION        reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    {               reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    FOR             reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    WHILE           reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    IF              reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    CONTINUE        reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    BREAK           reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    RETURN          reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    PRINT           reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    ZEROS           reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    ONES            reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    EYE             reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    STRING          reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    ID              reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    (               reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    NOT             reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    MINUS           reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    $end            reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    }               reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)
    ELSE            reduce using rule 49 (statement -> expr DIVIDE_ASSIGN expr ; .)


state 117

    (50) statement -> expr TIMES_ASSIGN expr ; .
    FUNCTION        reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    {               reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    FOR             reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    WHILE           reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    IF              reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    CONTINUE        reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    BREAK           reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    RETURN          reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    PRINT           reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    ZEROS           reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    ONES            reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    EYE             reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    STRING          reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    ID              reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    (               reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    NOT             reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    MINUS           reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    $end            reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    }               reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)
    ELSE            reduce using rule 50 (statement -> expr TIMES_ASSIGN expr ; .)


state 118

    (51) statement -> expr MINUS_ASSIGN expr ; .
    FUNCTION        reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    {               reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    FOR             reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    WHILE           reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    IF              reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    CONTINUE        reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    BREAK           reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    RETURN          reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    PRINT           reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    ZEROS           reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    ONES            reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    EYE             reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    STRING          reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    ID              reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    (               reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    NOT             reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    MINUS           reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    $end            reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    }               reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)
    ELSE            reduce using rule 51 (statement -> expr MINUS_ASSIGN expr ; .)


state 119

    (52) statement -> expr PLUS_ASSIGN expr ; .
    FUNCTION        reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    {               reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    FOR             reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    WHILE           reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    IF              reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    CONTINUE        reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    BREAK           reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    RETURN          reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    PRINT           reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    ZEROS           reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    ONES            reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    EYE             reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    STRING          reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    ID              reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    (               reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    NOT             reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    MINUS           reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    $end            reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    }               reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)
    ELSE            reduce using rule 52 (statement -> expr PLUS_ASSIGN expr ; .)


state 120

    (53) statement -> expr ASSIGN expr ; .
    FUNCTION        reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    {               reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    FOR             reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    WHILE           reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    IF              reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    CONTINUE        reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    BREAK           reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    RETURN          reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    PRINT           reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    ZEROS           reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    ONES            reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    EYE             reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    STRING          reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    ID              reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    (               reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    NOT             reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    MINUS           reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    $end            reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    }               reduce using rule 53 (statement -> expr ASSIGN expr ; .)
    ELSE            reduce using rule 53 (statement -> expr ASSIGN expr ; .)


state 121

    (6) expr -> expr [ parameter_list ] .
    REMAINDER_ASSIGN reduce using rule 6 (expr -> expr [ parameter_list ] .)
    DIVIDE_ASSIGN   reduce using rule 6 (expr -> expr [ parameter_list ] .)
    TIMES_ASSIGN    reduce using rule 6 (expr -> expr [ parameter_list ] .)
    MINUS_ASSIGN    reduce using rule 6 (expr -> expr [ parameter_list ] .)
    PLUS_ASSIGN     reduce using rule 6 (expr -> expr [ parameter_list ] .)
    ASSIGN          reduce using rule 6 (expr -> expr [ parameter_list ] .)
    ;               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    [               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    (               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    '               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    :               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    XOR             reduce using rule 6 (expr -> expr [ parameter_list ] .)
    OR              reduce using rule 6 (expr -> expr [ parameter_list ] .)
    AND             reduce using rule 6 (expr -> expr [ parameter_list ] .)
    LOWER_EQUAL     reduce using rule 6 (expr -> expr [ parameter_list ] .)
    LOWER           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    GREATER_EQUAL   reduce using rule 6 (expr -> expr [ parameter_list ] .)
    GREATER         reduce using rule 6 (expr -> expr [ parameter_list ] .)
    NOT_EQUAL       reduce using rule 6 (expr -> expr [ parameter_list ] .)
    EQUAL           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    DOT_REMAINDER   reduce using rule 6 (expr -> expr [ parameter_list ] .)
    DOT_DIVIDE      reduce using rule 6 (expr -> expr [ parameter_list ] .)
    DOT_TIMES       reduce using rule 6 (expr -> expr [ parameter_list ] .)
    DOT_MINUS       reduce using rule 6 (expr -> expr [ parameter_list ] .)
    DOT_PLUS        reduce using rule 6 (expr -> expr [ parameter_list ] .)
    REMAINDER       reduce using rule 6 (expr -> expr [ parameter_list ] .)
    DIVIDE          reduce using rule 6 (expr -> expr [ parameter_list ] .)
    TIMES           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    MINUS           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    PLUS            reduce using rule 6 (expr -> expr [ parameter_list ] .)
    FUNCTION        reduce using rule 6 (expr -> expr [ parameter_list ] .)
    {               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    FOR             reduce using rule 6 (expr -> expr [ parameter_list ] .)
    WHILE           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    IF              reduce using rule 6 (expr -> expr [ parameter_list ] .)
    CONTINUE        reduce using rule 6 (expr -> expr [ parameter_list ] .)
    BREAK           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    RETURN          reduce using rule 6 (expr -> expr [ parameter_list ] .)
    PRINT           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    ZEROS           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    ONES            reduce using rule 6 (expr -> expr [ parameter_list ] .)
    EYE             reduce using rule 6 (expr -> expr [ parameter_list ] .)
    STRING          reduce using rule 6 (expr -> expr [ parameter_list ] .)
    FLOAT_NUMBER    reduce using rule 6 (expr -> expr [ parameter_list ] .)
    INT_NUMBER      reduce using rule 6 (expr -> expr [ parameter_list ] .)
    ID              reduce using rule 6 (expr -> expr [ parameter_list ] .)
    NOT             reduce using rule 6 (expr -> expr [ parameter_list ] .)
    $end            reduce using rule 6 (expr -> expr [ parameter_list ] .)
    )               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    ]               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    ,               reduce using rule 6 (expr -> expr [ parameter_list ] .)


state 122

    (41) parameter_list -> parameter_list , . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 132

state 123

    (8) expr -> expr ( parameter_list ) .
    REMAINDER_ASSIGN reduce using rule 8 (expr -> expr ( parameter_list ) .)
    DIVIDE_ASSIGN   reduce using rule 8 (expr -> expr ( parameter_list ) .)
    TIMES_ASSIGN    reduce using rule 8 (expr -> expr ( parameter_list ) .)
    MINUS_ASSIGN    reduce using rule 8 (expr -> expr ( parameter_list ) .)
    PLUS_ASSIGN     reduce using rule 8 (expr -> expr ( parameter_list ) .)
    ASSIGN          reduce using rule 8 (expr -> expr ( parameter_list ) .)
    ;               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    [               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    (               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    '               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    :               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    XOR             reduce using rule 8 (expr -> expr ( parameter_list ) .)
    OR              reduce using rule 8 (expr -> expr ( parameter_list ) .)
    AND             reduce using rule 8 (expr -> expr ( parameter_list ) .)
    LOWER_EQUAL     reduce using rule 8 (expr -> expr ( parameter_list ) .)
    LOWER           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    GREATER_EQUAL   reduce using rule 8 (expr -> expr ( parameter_list ) .)
    GREATER         reduce using rule 8 (expr -> expr ( parameter_list ) .)
    NOT_EQUAL       reduce using rule 8 (expr -> expr ( parameter_list ) .)
    EQUAL           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    DOT_REMAINDER   reduce using rule 8 (expr -> expr ( parameter_list ) .)
    DOT_DIVIDE      reduce using rule 8 (expr -> expr ( parameter_list ) .)
    DOT_TIMES       reduce using rule 8 (expr -> expr ( parameter_list ) .)
    DOT_MINUS       reduce using rule 8 (expr -> expr ( parameter_list ) .)
    DOT_PLUS        reduce using rule 8 (expr -> expr ( parameter_list ) .)
    REMAINDER       reduce using rule 8 (expr -> expr ( parameter_list ) .)
    DIVIDE          reduce using rule 8 (expr -> expr ( parameter_list ) .)
    TIMES           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    MINUS           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    PLUS            reduce using rule 8 (expr -> expr ( parameter_list ) .)
    FUNCTION        reduce using rule 8 (expr -> expr ( parameter_list ) .)
    {               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    FOR             reduce using rule 8 (expr -> expr ( parameter_list ) .)
    WHILE           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    IF              reduce using rule 8 (expr -> expr ( parameter_list ) .)
    CONTINUE        reduce using rule 8 (expr -> expr ( parameter_list ) .)
    BREAK           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    RETURN          reduce using rule 8 (expr -> expr ( parameter_list ) .)
    PRINT           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    ZEROS           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    ONES            reduce using rule 8 (expr -> expr ( parameter_list ) .)
    EYE             reduce using rule 8 (expr -> expr ( parameter_list ) .)
    STRING          reduce using rule 8 (expr -> expr ( parameter_list ) .)
    FLOAT_NUMBER    reduce using rule 8 (expr -> expr ( parameter_list ) .)
    INT_NUMBER      reduce using rule 8 (expr -> expr ( parameter_list ) .)
    ID              reduce using rule 8 (expr -> expr ( parameter_list ) .)
    NOT             reduce using rule 8 (expr -> expr ( parameter_list ) .)
    $end            reduce using rule 8 (expr -> expr ( parameter_list ) .)
    )               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    ]               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    ,               reduce using rule 8 (expr -> expr ( parameter_list ) .)


state 124

    (61) function -> FUNCTION ID ( ) . statement
    (43) statement -> . { statement_series }
    (44) statement -> . FOR ( ID IN expr ) statement
    (45) statement -> . WHILE ( expr ) statement
    (46) statement -> . IF ( expr ) statement ELSE statement
    (47) statement -> . IF ( expr ) statement
    (48) statement -> . expr REMAINDER_ASSIGN expr ;
    (49) statement -> . expr DIVIDE_ASSIGN expr ;
    (50) statement -> . expr TIMES_ASSIGN expr ;
    (51) statement -> . expr MINUS_ASSIGN expr ;
    (52) statement -> . expr PLUS_ASSIGN expr ;
    (53) statement -> . expr ASSIGN expr ;
    (54) statement -> . CONTINUE ;
    (55) statement -> . BREAK ;
    (56) statement -> . RETURN expr ;
    (57) statement -> . PRINT expr ;
    (58) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    statement                      shift and go to state 133
    expr                           shift and go to state 60

state 125

    (62) function -> FUNCTION ID ( parameter_list . ) statement
    (41) parameter_list -> parameter_list . , expr
    )               shift and go to state 134
    ,               shift and go to state 122


state 126

    (44) statement -> FOR ( ID IN . expr ) statement
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 135

state 127

    (45) statement -> WHILE ( expr ) . statement
    (43) statement -> . { statement_series }
    (44) statement -> . FOR ( ID IN expr ) statement
    (45) statement -> . WHILE ( expr ) statement
    (46) statement -> . IF ( expr ) statement ELSE statement
    (47) statement -> . IF ( expr ) statement
    (48) statement -> . expr REMAINDER_ASSIGN expr ;
    (49) statement -> . expr DIVIDE_ASSIGN expr ;
    (50) statement -> . expr TIMES_ASSIGN expr ;
    (51) statement -> . expr MINUS_ASSIGN expr ;
    (52) statement -> . expr PLUS_ASSIGN expr ;
    (53) statement -> . expr ASSIGN expr ;
    (54) statement -> . CONTINUE ;
    (55) statement -> . BREAK ;
    (56) statement -> . RETURN expr ;
    (57) statement -> . PRINT expr ;
    (58) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 60
    statement                      shift and go to state 136

state 128

    (46) statement -> IF ( expr ) . statement ELSE statement
    (47) statement -> IF ( expr ) . statement
    (43) statement -> . { statement_series }
    (44) statement -> . FOR ( ID IN expr ) statement
    (45) statement -> . WHILE ( expr ) statement
    (46) statement -> . IF ( expr ) statement ELSE statement
    (47) statement -> . IF ( expr ) statement
    (48) statement -> . expr REMAINDER_ASSIGN expr ;
    (49) statement -> . expr DIVIDE_ASSIGN expr ;
    (50) statement -> . expr TIMES_ASSIGN expr ;
    (51) statement -> . expr MINUS_ASSIGN expr ;
    (52) statement -> . expr PLUS_ASSIGN expr ;
    (53) statement -> . expr ASSIGN expr ;
    (54) statement -> . CONTINUE ;
    (55) statement -> . BREAK ;
    (56) statement -> . RETURN expr ;
    (57) statement -> . PRINT expr ;
    (58) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 60
    statement                      shift and go to state 137

state 129

    (9) expr -> ZEROS ( parameter_list ) .
    REMAINDER_ASSIGN reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    DIVIDE_ASSIGN   reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    TIMES_ASSIGN    reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    MINUS_ASSIGN    reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    PLUS_ASSIGN     reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    ASSIGN          reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    ;               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    [               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    (               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    '               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    :               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    XOR             reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    OR              reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    AND             reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    LOWER_EQUAL     reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    LOWER           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    GREATER_EQUAL   reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    GREATER         reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    NOT_EQUAL       reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    EQUAL           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    DOT_REMAINDER   reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    DOT_DIVIDE      reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    DOT_TIMES       reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    DOT_MINUS       reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    DOT_PLUS        reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    REMAINDER       reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    DIVIDE          reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    TIMES           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    MINUS           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    PLUS            reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    FUNCTION        reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    {               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    FOR             reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    WHILE           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    IF              reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    CONTINUE        reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    BREAK           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    RETURN          reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    PRINT           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    ZEROS           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    ONES            reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    EYE             reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    STRING          reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    FLOAT_NUMBER    reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    INT_NUMBER      reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    ID              reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    NOT             reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    $end            reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    )               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    ]               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    ,               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)


state 130

    (10) expr -> ONES ( parameter_list ) .
    REMAINDER_ASSIGN reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    DIVIDE_ASSIGN   reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    TIMES_ASSIGN    reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    MINUS_ASSIGN    reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    PLUS_ASSIGN     reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    ASSIGN          reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    ;               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    [               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    (               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    '               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    :               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    XOR             reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    OR              reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    AND             reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    LOWER_EQUAL     reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    LOWER           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    GREATER_EQUAL   reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    GREATER         reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    NOT_EQUAL       reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    EQUAL           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    DOT_REMAINDER   reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    DOT_DIVIDE      reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    DOT_TIMES       reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    DOT_MINUS       reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    DOT_PLUS        reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    REMAINDER       reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    DIVIDE          reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    TIMES           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    MINUS           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    PLUS            reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    FUNCTION        reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    {               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    FOR             reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    WHILE           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    IF              reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    CONTINUE        reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    BREAK           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    RETURN          reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    PRINT           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    ZEROS           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    ONES            reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    EYE             reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    STRING          reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    FLOAT_NUMBER    reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    INT_NUMBER      reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    ID              reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    NOT             reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    $end            reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    )               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    ]               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    ,               reduce using rule 10 (expr -> ONES ( parameter_list ) .)


state 131

    (11) expr -> EYE ( parameter_list ) .
    REMAINDER_ASSIGN reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    DIVIDE_ASSIGN   reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    TIMES_ASSIGN    reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    MINUS_ASSIGN    reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    PLUS_ASSIGN     reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    ASSIGN          reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    ;               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    [               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    (               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    '               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    :               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    XOR             reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    OR              reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    AND             reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    LOWER_EQUAL     reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    LOWER           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    GREATER_EQUAL   reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    GREATER         reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    NOT_EQUAL       reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    EQUAL           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    DOT_REMAINDER   reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    DOT_DIVIDE      reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    DOT_TIMES       reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    DOT_MINUS       reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    DOT_PLUS        reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    REMAINDER       reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    DIVIDE          reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    TIMES           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    MINUS           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    PLUS            reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    FUNCTION        reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    {               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    FOR             reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    WHILE           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    IF              reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    CONTINUE        reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    BREAK           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    RETURN          reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    PRINT           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    ZEROS           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    ONES            reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    EYE             reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    STRING          reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    FLOAT_NUMBER    reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    INT_NUMBER      reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    ID              reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    NOT             reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    $end            reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    )               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    ]               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    ,               reduce using rule 11 (expr -> EYE ( parameter_list ) .)


state 132

    (41) parameter_list -> parameter_list , expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    ]               reduce using rule 41 (parameter_list -> parameter_list , expr .)
    ,               reduce using rule 41 (parameter_list -> parameter_list , expr .)
    )               reduce using rule 41 (parameter_list -> parameter_list , expr .)
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 133

    (61) function -> FUNCTION ID ( ) statement .
    FUNCTION        reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    {               reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    FOR             reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    WHILE           reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    IF              reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    CONTINUE        reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    BREAK           reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    RETURN          reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    PRINT           reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    ZEROS           reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    ONES            reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    EYE             reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    STRING          reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    FLOAT_NUMBER    reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    INT_NUMBER      reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    ID              reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    (               reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    NOT             reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    MINUS           reduce using rule 61 (function -> FUNCTION ID ( ) statement .)
    $end            reduce using rule 61 (function -> FUNCTION ID ( ) statement .)


state 134

    (62) function -> FUNCTION ID ( parameter_list ) . statement
    (43) statement -> . { statement_series }
    (44) statement -> . FOR ( ID IN expr ) statement
    (45) statement -> . WHILE ( expr ) statement
    (46) statement -> . IF ( expr ) statement ELSE statement
    (47) statement -> . IF ( expr ) statement
    (48) statement -> . expr REMAINDER_ASSIGN expr ;
    (49) statement -> . expr DIVIDE_ASSIGN expr ;
    (50) statement -> . expr TIMES_ASSIGN expr ;
    (51) statement -> . expr MINUS_ASSIGN expr ;
    (52) statement -> . expr PLUS_ASSIGN expr ;
    (53) statement -> . expr ASSIGN expr ;
    (54) statement -> . CONTINUE ;
    (55) statement -> . BREAK ;
    (56) statement -> . RETURN expr ;
    (57) statement -> . PRINT expr ;
    (58) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    statement                      shift and go to state 138
    expr                           shift and go to state 60

state 135

    (44) statement -> FOR ( ID IN expr . ) statement
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (17) expr -> expr . '
    (20) expr -> expr . : expr
    (21) expr -> expr . XOR expr
    (22) expr -> expr . OR expr
    (23) expr -> expr . AND expr
    (24) expr -> expr . LOWER_EQUAL expr
    (25) expr -> expr . LOWER expr
    (26) expr -> expr . GREATER_EQUAL expr
    (27) expr -> expr . GREATER expr
    (28) expr -> expr . NOT_EQUAL expr
    (29) expr -> expr . EQUAL expr
    (30) expr -> expr . DOT_REMAINDER expr
    (31) expr -> expr . DOT_DIVIDE expr
    (32) expr -> expr . DOT_TIMES expr
    (33) expr -> expr . DOT_MINUS expr
    (34) expr -> expr . DOT_PLUS expr
    (35) expr -> expr . REMAINDER expr
    (36) expr -> expr . DIVIDE expr
    (37) expr -> expr . TIMES expr
    (38) expr -> expr . MINUS expr
    (39) expr -> expr . PLUS expr
    )               shift and go to state 139
    [               shift and go to state 33
    (               shift and go to state 34
    '               shift and go to state 35
    :               shift and go to state 36
    XOR             shift and go to state 37
    OR              shift and go to state 38
    AND             shift and go to state 39
    LOWER_EQUAL     shift and go to state 40
    LOWER           shift and go to state 41
    GREATER_EQUAL   shift and go to state 42
    GREATER         shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    DOT_REMAINDER   shift and go to state 46
    DOT_DIVIDE      shift and go to state 47
    DOT_TIMES       shift and go to state 48
    DOT_MINUS       shift and go to state 49
    DOT_PLUS        shift and go to state 50
    REMAINDER       shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55


state 136

    (45) statement -> WHILE ( expr ) statement .
    FUNCTION        reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    {               reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    FOR             reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    WHILE           reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    IF              reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    CONTINUE        reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    BREAK           reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    RETURN          reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    PRINT           reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    ZEROS           reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    ONES            reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    EYE             reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    STRING          reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    FLOAT_NUMBER    reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    INT_NUMBER      reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    ID              reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    (               reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    NOT             reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    MINUS           reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    $end            reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    }               reduce using rule 45 (statement -> WHILE ( expr ) statement .)
    ELSE            reduce using rule 45 (statement -> WHILE ( expr ) statement .)


state 137

    (46) statement -> IF ( expr ) statement . ELSE statement
    (47) statement -> IF ( expr ) statement .
    ELSE            shift and go to state 140
    FUNCTION        reduce using rule 47 (statement -> IF ( expr ) statement .)
    {               reduce using rule 47 (statement -> IF ( expr ) statement .)
    FOR             reduce using rule 47 (statement -> IF ( expr ) statement .)
    WHILE           reduce using rule 47 (statement -> IF ( expr ) statement .)
    IF              reduce using rule 47 (statement -> IF ( expr ) statement .)
    CONTINUE        reduce using rule 47 (statement -> IF ( expr ) statement .)
    BREAK           reduce using rule 47 (statement -> IF ( expr ) statement .)
    RETURN          reduce using rule 47 (statement -> IF ( expr ) statement .)
    PRINT           reduce using rule 47 (statement -> IF ( expr ) statement .)
    ZEROS           reduce using rule 47 (statement -> IF ( expr ) statement .)
    ONES            reduce using rule 47 (statement -> IF ( expr ) statement .)
    EYE             reduce using rule 47 (statement -> IF ( expr ) statement .)
    STRING          reduce using rule 47 (statement -> IF ( expr ) statement .)
    FLOAT_NUMBER    reduce using rule 47 (statement -> IF ( expr ) statement .)
    INT_NUMBER      reduce using rule 47 (statement -> IF ( expr ) statement .)
    ID              reduce using rule 47 (statement -> IF ( expr ) statement .)
    (               reduce using rule 47 (statement -> IF ( expr ) statement .)
    NOT             reduce using rule 47 (statement -> IF ( expr ) statement .)
    MINUS           reduce using rule 47 (statement -> IF ( expr ) statement .)
    $end            reduce using rule 47 (statement -> IF ( expr ) statement .)
    }               reduce using rule 47 (statement -> IF ( expr ) statement .)


state 138

    (62) function -> FUNCTION ID ( parameter_list ) statement .
    FUNCTION        reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    {               reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    FOR             reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    WHILE           reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    IF              reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    CONTINUE        reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    BREAK           reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    RETURN          reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    PRINT           reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    ZEROS           reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    ONES            reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    EYE             reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    STRING          reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    FLOAT_NUMBER    reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    INT_NUMBER      reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    ID              reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    (               reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    NOT             reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    MINUS           reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)
    $end            reduce using rule 62 (function -> FUNCTION ID ( parameter_list ) statement .)


state 139

    (44) statement -> FOR ( ID IN expr ) . statement
    (43) statement -> . { statement_series }
    (44) statement -> . FOR ( ID IN expr ) statement
    (45) statement -> . WHILE ( expr ) statement
    (46) statement -> . IF ( expr ) statement ELSE statement
    (47) statement -> . IF ( expr ) statement
    (48) statement -> . expr REMAINDER_ASSIGN expr ;
    (49) statement -> . expr DIVIDE_ASSIGN expr ;
    (50) statement -> . expr TIMES_ASSIGN expr ;
    (51) statement -> . expr MINUS_ASSIGN expr ;
    (52) statement -> . expr PLUS_ASSIGN expr ;
    (53) statement -> . expr ASSIGN expr ;
    (54) statement -> . CONTINUE ;
    (55) statement -> . BREAK ;
    (56) statement -> . RETURN expr ;
    (57) statement -> . PRINT expr ;
    (58) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 60
    statement                      shift and go to state 141

state 140

    (46) statement -> IF ( expr ) statement ELSE . statement
    (43) statement -> . { statement_series }
    (44) statement -> . FOR ( ID IN expr ) statement
    (45) statement -> . WHILE ( expr ) statement
    (46) statement -> . IF ( expr ) statement ELSE statement
    (47) statement -> . IF ( expr ) statement
    (48) statement -> . expr REMAINDER_ASSIGN expr ;
    (49) statement -> . expr DIVIDE_ASSIGN expr ;
    (50) statement -> . expr TIMES_ASSIGN expr ;
    (51) statement -> . expr MINUS_ASSIGN expr ;
    (52) statement -> . expr PLUS_ASSIGN expr ;
    (53) statement -> . expr ASSIGN expr ;
    (54) statement -> . CONTINUE ;
    (55) statement -> . BREAK ;
    (56) statement -> . RETURN expr ;
    (57) statement -> . PRINT expr ;
    (58) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . STRING
    (13) expr -> . FLOAT_NUMBER
    (14) expr -> . INT_NUMBER
    (15) expr -> . ID
    (16) expr -> . ( expr )
    (17) expr -> . expr '
    (18) expr -> . NOT expr
    (19) expr -> . MINUS expr
    (20) expr -> . expr : expr
    (21) expr -> . expr XOR expr
    (22) expr -> . expr OR expr
    (23) expr -> . expr AND expr
    (24) expr -> . expr LOWER_EQUAL expr
    (25) expr -> . expr LOWER expr
    (26) expr -> . expr GREATER_EQUAL expr
    (27) expr -> . expr GREATER expr
    (28) expr -> . expr NOT_EQUAL expr
    (29) expr -> . expr EQUAL expr
    (30) expr -> . expr DOT_REMAINDER expr
    (31) expr -> . expr DOT_DIVIDE expr
    (32) expr -> . expr DOT_TIMES expr
    (33) expr -> . expr DOT_MINUS expr
    (34) expr -> . expr DOT_PLUS expr
    (35) expr -> . expr REMAINDER expr
    (36) expr -> . expr DIVIDE expr
    (37) expr -> . expr TIMES expr
    (38) expr -> . expr MINUS expr
    (39) expr -> . expr PLUS expr
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 20
    FLOAT_NUMBER    shift and go to state 21
    INT_NUMBER      shift and go to state 22
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 23
    MINUS           shift and go to state 24

    expr                           shift and go to state 60
    statement                      shift and go to state 142

state 141

    (44) statement -> FOR ( ID IN expr ) statement .
    FUNCTION        reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    {               reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    FOR             reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    WHILE           reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    IF              reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    CONTINUE        reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    BREAK           reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    RETURN          reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    PRINT           reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    ZEROS           reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    ONES            reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    EYE             reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    STRING          reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    FLOAT_NUMBER    reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    INT_NUMBER      reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    ID              reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    (               reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    NOT             reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    MINUS           reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    $end            reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    }               reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)
    ELSE            reduce using rule 44 (statement -> FOR ( ID IN expr ) statement .)


state 142

    (46) statement -> IF ( expr ) statement ELSE statement .
    FUNCTION        reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    {               reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    FOR             reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    WHILE           reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    IF              reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    CONTINUE        reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    BREAK           reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    RETURN          reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    PRINT           reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    ZEROS           reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    ONES            reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    EYE             reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    STRING          reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    FLOAT_NUMBER    reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    INT_NUMBER      reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    ID              reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    (               reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    NOT             reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    MINUS           reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    $end            reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    }               reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)
    ELSE            reduce using rule 46 (statement -> IF ( expr ) statement ELSE statement .)


Conflicts:

shift/reduce conflict for ( in state 5 resolved as shift
shift/reduce conflict for MINUS in state 5 resolved as shift
shift/reduce conflict for ) in state 34 resolved as shift
shift/reduce conflict for ) in state 103 resolved as shift