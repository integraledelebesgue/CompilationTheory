Grammar:

Rule 0     S' -> program
Rule 1     program -> program action
Rule 2     program -> action
Rule 3     action -> function
Rule 4     action -> statement
Rule 5     action -> expr
Rule 6     expr -> expr [ parameter_list ]
Rule 7     expr -> expr ( )
Rule 8     expr -> expr ( parameter_list )
Rule 9     expr -> ZEROS ( parameter_list )
Rule 10    expr -> ONES ( parameter_list )
Rule 11    expr -> EYE ( parameter_list )
Rule 12    expr -> matrix
Rule 13    expr -> vector
Rule 14    expr -> STRING
Rule 15    expr -> FLOAT_NUMBER
Rule 16    expr -> INT_NUMBER
Rule 17    expr -> ID
Rule 18    expr -> ( expr )
Rule 19    expr -> expr '  [precedence=left, level=8]
Rule 20    expr -> NOT expr  [precedence=right, level=7]
Rule 21    expr -> MINUS expr  [precedence=right, level=7]
Rule 22    expr -> expr : expr  [precedence=nonassoc, level=2]
Rule 23    expr -> expr XOR expr  [precedence=left, level=3]
Rule 24    expr -> expr OR expr  [precedence=left, level=3]
Rule 25    expr -> expr AND expr  [precedence=left, level=3]
Rule 26    expr -> expr LOWER_EQUAL expr  [precedence=left, level=4]
Rule 27    expr -> expr LOWER expr  [precedence=left, level=4]
Rule 28    expr -> expr GREATER_EQUAL expr  [precedence=left, level=4]
Rule 29    expr -> expr GREATER expr  [precedence=left, level=4]
Rule 30    expr -> expr NOT_EQUAL expr  [precedence=left, level=4]
Rule 31    expr -> expr EQUAL expr  [precedence=left, level=4]
Rule 32    expr -> expr DOT_REMAINDER expr  [precedence=left, level=6]
Rule 33    expr -> expr DOT_DIVIDE expr  [precedence=left, level=6]
Rule 34    expr -> expr DOT_TIMES expr  [precedence=left, level=6]
Rule 35    expr -> expr DOT_MINUS expr  [precedence=left, level=5]
Rule 36    expr -> expr DOT_PLUS expr  [precedence=left, level=5]
Rule 37    expr -> expr REMAINDER expr  [precedence=left, level=6]
Rule 38    expr -> expr DIVIDE expr  [precedence=left, level=6]
Rule 39    expr -> expr TIMES expr  [precedence=left, level=6]
Rule 40    expr -> expr MINUS expr  [precedence=left, level=5]
Rule 41    expr -> expr PLUS expr  [precedence=left, level=5]
Rule 42    parameter_list -> expr
Rule 43    parameter_list -> parameter_list , expr
Rule 44    vector -> [ parameter_list ]
Rule 45    vector_list -> vector_list , vector
Rule 46    vector_list -> vector
Rule 47    matrix -> [ vector_list ]
Rule 48    statement -> { statement_series }
Rule 49    statement -> FOR ( ID IN expr ) statement
Rule 50    statement -> WHILE ( expr ) statement
Rule 51    statement -> IF ( expr ) statement ELSE statement  [precedence=nonassoc, level=10]
Rule 52    statement -> IF ( expr ) statement  [precedence=nonassoc, level=9]
Rule 53    statement -> expr REMAINDER_ASSIGN expr ;
Rule 54    statement -> expr DIVIDE_ASSIGN expr ;
Rule 55    statement -> expr TIMES_ASSIGN expr ;
Rule 56    statement -> expr MINUS_ASSIGN expr ;
Rule 57    statement -> expr PLUS_ASSIGN expr ;
Rule 58    statement -> expr ASSIGN expr ;
Rule 59    statement -> CONTINUE ;
Rule 60    statement -> BREAK ;
Rule 61    statement -> RETURN parameter_list ;
Rule 62    statement -> PRINT parameter_list ;
Rule 63    statement -> expr ;
Rule 64    statement_series -> statement_series statement
Rule 65    statement_series -> statement
Rule 66    function -> FUNCTION ID ( ) statement
Rule 67    function -> FUNCTION ID ( parameter_list ) statement

Terminals, with rules where they appear:

'                    : 19
(                    : 7 8 9 10 11 18 49 50 51 52 66 67
)                    : 7 8 9 10 11 18 49 50 51 52 66 67
,                    : 43 45
:                    : 22
;                    : 53 54 55 56 57 58 59 60 61 62 63
AND                  : 25
ASSIGN               : 58
BREAK                : 60
CONTINUE             : 59
DIVIDE               : 38
DIVIDE_ASSIGN        : 54
DOT_DIVIDE           : 33
DOT_MINUS            : 35
DOT_PLUS             : 36
DOT_REMAINDER        : 32
DOT_TIMES            : 34
ELSE                 : 51
EQUAL                : 31
EYE                  : 11
FLOAT_NUMBER         : 15
FOR                  : 49
FUNCTION             : 66 67
GREATER              : 29
GREATER_EQUAL        : 28
ID                   : 17 49 66 67
IF                   : 51 52
IN                   : 49
INT_NUMBER           : 16
LOWER                : 27
LOWER_EQUAL          : 26
MINUS                : 21 40
MINUS_ASSIGN         : 56
NOT                  : 20
NOT_EQUAL            : 30
ONES                 : 10
OR                   : 24
PLUS                 : 41
PLUS_ASSIGN          : 57
PRINT                : 62
REMAINDER            : 37
REMAINDER_ASSIGN     : 53
RETURN               : 61
STRING               : 14
TIMES                : 39
TIMES_ASSIGN         : 55
WHILE                : 50
XOR                  : 23
ZEROS                : 9
[                    : 6 44 47
]                    : 6 44 47
error                : 
{                    : 48
}                    : 48

Nonterminals, with rules where they appear:

action               : 1 2
expr                 : 5 6 7 8 18 19 20 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 43 49 50 51 52 53 53 54 54 55 55 56 56 57 57 58 58 63
function             : 3
matrix               : 12
parameter_list       : 6 8 9 10 11 43 44 61 62 67
program              : 1 0
statement            : 4 49 50 51 51 52 64 65 66 67
statement_series     : 48 64
vector               : 13 45 46
vector_list          : 45 47


state 0

    (0) S' -> . program
    (1) program -> . program action
    (2) program -> . action
    (3) action -> . function
    (4) action -> . statement
    (5) action -> . expr
    (66) function -> . FUNCTION ID ( ) statement
    (67) function -> . FUNCTION ID ( parameter_list ) statement
    (48) statement -> . { statement_series }
    (49) statement -> . FOR ( ID IN expr ) statement
    (50) statement -> . WHILE ( expr ) statement
    (51) statement -> . IF ( expr ) statement ELSE statement
    (52) statement -> . IF ( expr ) statement
    (53) statement -> . expr REMAINDER_ASSIGN expr ;
    (54) statement -> . expr DIVIDE_ASSIGN expr ;
    (55) statement -> . expr TIMES_ASSIGN expr ;
    (56) statement -> . expr MINUS_ASSIGN expr ;
    (57) statement -> . expr PLUS_ASSIGN expr ;
    (58) statement -> . expr ASSIGN expr ;
    (59) statement -> . CONTINUE ;
    (60) statement -> . BREAK ;
    (61) statement -> . RETURN parameter_list ;
    (62) statement -> . PRINT parameter_list ;
    (63) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    FUNCTION        shift and go to state 6
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    program                        shift and go to state 1
    action                         shift and go to state 2
    function                       shift and go to state 3
    statement                      shift and go to state 4
    expr                           shift and go to state 5
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 1

    (0) S' -> program .
    (1) program -> program . action
    (3) action -> . function
    (4) action -> . statement
    (5) action -> . expr
    (66) function -> . FUNCTION ID ( ) statement
    (67) function -> . FUNCTION ID ( parameter_list ) statement
    (48) statement -> . { statement_series }
    (49) statement -> . FOR ( ID IN expr ) statement
    (50) statement -> . WHILE ( expr ) statement
    (51) statement -> . IF ( expr ) statement ELSE statement
    (52) statement -> . IF ( expr ) statement
    (53) statement -> . expr REMAINDER_ASSIGN expr ;
    (54) statement -> . expr DIVIDE_ASSIGN expr ;
    (55) statement -> . expr TIMES_ASSIGN expr ;
    (56) statement -> . expr MINUS_ASSIGN expr ;
    (57) statement -> . expr PLUS_ASSIGN expr ;
    (58) statement -> . expr ASSIGN expr ;
    (59) statement -> . CONTINUE ;
    (60) statement -> . BREAK ;
    (61) statement -> . RETURN parameter_list ;
    (62) statement -> . PRINT parameter_list ;
    (63) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    FUNCTION        shift and go to state 6
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    action                         shift and go to state 28
    function                       shift and go to state 3
    statement                      shift and go to state 4
    expr                           shift and go to state 5
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 2

    (2) program -> action .
    FUNCTION        reduce using rule 2 (program -> action .)
    {               reduce using rule 2 (program -> action .)
    FOR             reduce using rule 2 (program -> action .)
    WHILE           reduce using rule 2 (program -> action .)
    IF              reduce using rule 2 (program -> action .)
    CONTINUE        reduce using rule 2 (program -> action .)
    BREAK           reduce using rule 2 (program -> action .)
    RETURN          reduce using rule 2 (program -> action .)
    PRINT           reduce using rule 2 (program -> action .)
    ZEROS           reduce using rule 2 (program -> action .)
    ONES            reduce using rule 2 (program -> action .)
    EYE             reduce using rule 2 (program -> action .)
    STRING          reduce using rule 2 (program -> action .)
    FLOAT_NUMBER    reduce using rule 2 (program -> action .)
    INT_NUMBER      reduce using rule 2 (program -> action .)
    ID              reduce using rule 2 (program -> action .)
    (               reduce using rule 2 (program -> action .)
    NOT             reduce using rule 2 (program -> action .)
    MINUS           reduce using rule 2 (program -> action .)
    [               reduce using rule 2 (program -> action .)
    $end            reduce using rule 2 (program -> action .)


state 3

    (3) action -> function .
    FUNCTION        reduce using rule 3 (action -> function .)
    {               reduce using rule 3 (action -> function .)
    FOR             reduce using rule 3 (action -> function .)
    WHILE           reduce using rule 3 (action -> function .)
    IF              reduce using rule 3 (action -> function .)
    CONTINUE        reduce using rule 3 (action -> function .)
    BREAK           reduce using rule 3 (action -> function .)
    RETURN          reduce using rule 3 (action -> function .)
    PRINT           reduce using rule 3 (action -> function .)
    ZEROS           reduce using rule 3 (action -> function .)
    ONES            reduce using rule 3 (action -> function .)
    EYE             reduce using rule 3 (action -> function .)
    STRING          reduce using rule 3 (action -> function .)
    FLOAT_NUMBER    reduce using rule 3 (action -> function .)
    INT_NUMBER      reduce using rule 3 (action -> function .)
    ID              reduce using rule 3 (action -> function .)
    (               reduce using rule 3 (action -> function .)
    NOT             reduce using rule 3 (action -> function .)
    MINUS           reduce using rule 3 (action -> function .)
    [               reduce using rule 3 (action -> function .)
    $end            reduce using rule 3 (action -> function .)


state 4

    (4) action -> statement .
    FUNCTION        reduce using rule 4 (action -> statement .)
    {               reduce using rule 4 (action -> statement .)
    FOR             reduce using rule 4 (action -> statement .)
    WHILE           reduce using rule 4 (action -> statement .)
    IF              reduce using rule 4 (action -> statement .)
    CONTINUE        reduce using rule 4 (action -> statement .)
    BREAK           reduce using rule 4 (action -> statement .)
    RETURN          reduce using rule 4 (action -> statement .)
    PRINT           reduce using rule 4 (action -> statement .)
    ZEROS           reduce using rule 4 (action -> statement .)
    ONES            reduce using rule 4 (action -> statement .)
    EYE             reduce using rule 4 (action -> statement .)
    STRING          reduce using rule 4 (action -> statement .)
    FLOAT_NUMBER    reduce using rule 4 (action -> statement .)
    INT_NUMBER      reduce using rule 4 (action -> statement .)
    ID              reduce using rule 4 (action -> statement .)
    (               reduce using rule 4 (action -> statement .)
    NOT             reduce using rule 4 (action -> statement .)
    MINUS           reduce using rule 4 (action -> statement .)
    [               reduce using rule 4 (action -> statement .)
    $end            reduce using rule 4 (action -> statement .)


state 5

    (5) action -> expr .
    (53) statement -> expr . REMAINDER_ASSIGN expr ;
    (54) statement -> expr . DIVIDE_ASSIGN expr ;
    (55) statement -> expr . TIMES_ASSIGN expr ;
    (56) statement -> expr . MINUS_ASSIGN expr ;
    (57) statement -> expr . PLUS_ASSIGN expr ;
    (58) statement -> expr . ASSIGN expr ;
    (63) statement -> expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    FUNCTION        reduce using rule 5 (action -> expr .)
    {               reduce using rule 5 (action -> expr .)
    FOR             reduce using rule 5 (action -> expr .)
    WHILE           reduce using rule 5 (action -> expr .)
    IF              reduce using rule 5 (action -> expr .)
    CONTINUE        reduce using rule 5 (action -> expr .)
    BREAK           reduce using rule 5 (action -> expr .)
    RETURN          reduce using rule 5 (action -> expr .)
    PRINT           reduce using rule 5 (action -> expr .)
    ZEROS           reduce using rule 5 (action -> expr .)
    ONES            reduce using rule 5 (action -> expr .)
    EYE             reduce using rule 5 (action -> expr .)
    STRING          reduce using rule 5 (action -> expr .)
    FLOAT_NUMBER    reduce using rule 5 (action -> expr .)
    INT_NUMBER      reduce using rule 5 (action -> expr .)
    ID              reduce using rule 5 (action -> expr .)
    NOT             reduce using rule 5 (action -> expr .)
    $end            reduce using rule 5 (action -> expr .)
    REMAINDER_ASSIGN shift and go to state 29
    DIVIDE_ASSIGN   shift and go to state 31
    TIMES_ASSIGN    shift and go to state 32
    MINUS_ASSIGN    shift and go to state 33
    PLUS_ASSIGN     shift and go to state 34
    ASSIGN          shift and go to state 35
    ;               shift and go to state 30
    [               shift and go to state 36
    (               shift and go to state 37
    '               shift and go to state 38
    :               shift and go to state 39
    XOR             shift and go to state 40
    OR              shift and go to state 41
    AND             shift and go to state 42
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 6

    (66) function -> FUNCTION . ID ( ) statement
    (67) function -> FUNCTION . ID ( parameter_list ) statement
    ID              shift and go to state 59


state 7

    (17) expr -> ID .
    REMAINDER_ASSIGN reduce using rule 17 (expr -> ID .)
    DIVIDE_ASSIGN   reduce using rule 17 (expr -> ID .)
    TIMES_ASSIGN    reduce using rule 17 (expr -> ID .)
    MINUS_ASSIGN    reduce using rule 17 (expr -> ID .)
    PLUS_ASSIGN     reduce using rule 17 (expr -> ID .)
    ASSIGN          reduce using rule 17 (expr -> ID .)
    ;               reduce using rule 17 (expr -> ID .)
    [               reduce using rule 17 (expr -> ID .)
    (               reduce using rule 17 (expr -> ID .)
    '               reduce using rule 17 (expr -> ID .)
    :               reduce using rule 17 (expr -> ID .)
    XOR             reduce using rule 17 (expr -> ID .)
    OR              reduce using rule 17 (expr -> ID .)
    AND             reduce using rule 17 (expr -> ID .)
    LOWER_EQUAL     reduce using rule 17 (expr -> ID .)
    LOWER           reduce using rule 17 (expr -> ID .)
    GREATER_EQUAL   reduce using rule 17 (expr -> ID .)
    GREATER         reduce using rule 17 (expr -> ID .)
    NOT_EQUAL       reduce using rule 17 (expr -> ID .)
    EQUAL           reduce using rule 17 (expr -> ID .)
    DOT_REMAINDER   reduce using rule 17 (expr -> ID .)
    DOT_DIVIDE      reduce using rule 17 (expr -> ID .)
    DOT_TIMES       reduce using rule 17 (expr -> ID .)
    DOT_MINUS       reduce using rule 17 (expr -> ID .)
    DOT_PLUS        reduce using rule 17 (expr -> ID .)
    REMAINDER       reduce using rule 17 (expr -> ID .)
    DIVIDE          reduce using rule 17 (expr -> ID .)
    TIMES           reduce using rule 17 (expr -> ID .)
    MINUS           reduce using rule 17 (expr -> ID .)
    PLUS            reduce using rule 17 (expr -> ID .)
    FUNCTION        reduce using rule 17 (expr -> ID .)
    {               reduce using rule 17 (expr -> ID .)
    FOR             reduce using rule 17 (expr -> ID .)
    WHILE           reduce using rule 17 (expr -> ID .)
    IF              reduce using rule 17 (expr -> ID .)
    CONTINUE        reduce using rule 17 (expr -> ID .)
    BREAK           reduce using rule 17 (expr -> ID .)
    RETURN          reduce using rule 17 (expr -> ID .)
    PRINT           reduce using rule 17 (expr -> ID .)
    ZEROS           reduce using rule 17 (expr -> ID .)
    ONES            reduce using rule 17 (expr -> ID .)
    EYE             reduce using rule 17 (expr -> ID .)
    STRING          reduce using rule 17 (expr -> ID .)
    FLOAT_NUMBER    reduce using rule 17 (expr -> ID .)
    INT_NUMBER      reduce using rule 17 (expr -> ID .)
    ID              reduce using rule 17 (expr -> ID .)
    NOT             reduce using rule 17 (expr -> ID .)
    $end            reduce using rule 17 (expr -> ID .)
    )               reduce using rule 17 (expr -> ID .)
    ,               reduce using rule 17 (expr -> ID .)
    ]               reduce using rule 17 (expr -> ID .)


state 8

    (18) expr -> ( . expr )
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 60
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 9

    (48) statement -> { . statement_series }
    (64) statement_series -> . statement_series statement
    (65) statement_series -> . statement
    (48) statement -> . { statement_series }
    (49) statement -> . FOR ( ID IN expr ) statement
    (50) statement -> . WHILE ( expr ) statement
    (51) statement -> . IF ( expr ) statement ELSE statement
    (52) statement -> . IF ( expr ) statement
    (53) statement -> . expr REMAINDER_ASSIGN expr ;
    (54) statement -> . expr DIVIDE_ASSIGN expr ;
    (55) statement -> . expr TIMES_ASSIGN expr ;
    (56) statement -> . expr MINUS_ASSIGN expr ;
    (57) statement -> . expr PLUS_ASSIGN expr ;
    (58) statement -> . expr ASSIGN expr ;
    (59) statement -> . CONTINUE ;
    (60) statement -> . BREAK ;
    (61) statement -> . RETURN parameter_list ;
    (62) statement -> . PRINT parameter_list ;
    (63) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    statement_series               shift and go to state 61
    statement                      shift and go to state 62
    expr                           shift and go to state 63
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 10

    (49) statement -> FOR . ( ID IN expr ) statement
    (               shift and go to state 64


state 11

    (50) statement -> WHILE . ( expr ) statement
    (               shift and go to state 65


state 12

    (51) statement -> IF . ( expr ) statement ELSE statement
    (52) statement -> IF . ( expr ) statement
    (               shift and go to state 66


state 13

    (59) statement -> CONTINUE . ;
    ;               shift and go to state 67


state 14

    (60) statement -> BREAK . ;
    ;               shift and go to state 68


state 15

    (61) statement -> RETURN . parameter_list ;
    (42) parameter_list -> . expr
    (43) parameter_list -> . parameter_list , expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    parameter_list                 shift and go to state 69
    expr                           shift and go to state 70
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 16

    (62) statement -> PRINT . parameter_list ;
    (42) parameter_list -> . expr
    (43) parameter_list -> . parameter_list , expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    parameter_list                 shift and go to state 71
    expr                           shift and go to state 70
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 17

    (47) matrix -> [ . vector_list ]
    (44) vector -> [ . parameter_list ]
    (45) vector_list -> . vector_list , vector
    (46) vector_list -> . vector
    (42) parameter_list -> . expr
    (43) parameter_list -> . parameter_list , expr
    (44) vector -> . [ parameter_list ]
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    [               shift and go to state 72
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27

    vector_list                    shift and go to state 73
    parameter_list                 shift and go to state 74
    vector                         shift and go to state 75
    expr                           shift and go to state 70
    matrix                         shift and go to state 21

state 18

    (9) expr -> ZEROS . ( parameter_list )
    (               shift and go to state 76


state 19

    (10) expr -> ONES . ( parameter_list )
    (               shift and go to state 77


state 20

    (11) expr -> EYE . ( parameter_list )
    (               shift and go to state 78


state 21

    (12) expr -> matrix .
    REMAINDER_ASSIGN reduce using rule 12 (expr -> matrix .)
    DIVIDE_ASSIGN   reduce using rule 12 (expr -> matrix .)
    TIMES_ASSIGN    reduce using rule 12 (expr -> matrix .)
    MINUS_ASSIGN    reduce using rule 12 (expr -> matrix .)
    PLUS_ASSIGN     reduce using rule 12 (expr -> matrix .)
    ASSIGN          reduce using rule 12 (expr -> matrix .)
    ;               reduce using rule 12 (expr -> matrix .)
    [               reduce using rule 12 (expr -> matrix .)
    (               reduce using rule 12 (expr -> matrix .)
    '               reduce using rule 12 (expr -> matrix .)
    :               reduce using rule 12 (expr -> matrix .)
    XOR             reduce using rule 12 (expr -> matrix .)
    OR              reduce using rule 12 (expr -> matrix .)
    AND             reduce using rule 12 (expr -> matrix .)
    LOWER_EQUAL     reduce using rule 12 (expr -> matrix .)
    LOWER           reduce using rule 12 (expr -> matrix .)
    GREATER_EQUAL   reduce using rule 12 (expr -> matrix .)
    GREATER         reduce using rule 12 (expr -> matrix .)
    NOT_EQUAL       reduce using rule 12 (expr -> matrix .)
    EQUAL           reduce using rule 12 (expr -> matrix .)
    DOT_REMAINDER   reduce using rule 12 (expr -> matrix .)
    DOT_DIVIDE      reduce using rule 12 (expr -> matrix .)
    DOT_TIMES       reduce using rule 12 (expr -> matrix .)
    DOT_MINUS       reduce using rule 12 (expr -> matrix .)
    DOT_PLUS        reduce using rule 12 (expr -> matrix .)
    REMAINDER       reduce using rule 12 (expr -> matrix .)
    DIVIDE          reduce using rule 12 (expr -> matrix .)
    TIMES           reduce using rule 12 (expr -> matrix .)
    MINUS           reduce using rule 12 (expr -> matrix .)
    PLUS            reduce using rule 12 (expr -> matrix .)
    FUNCTION        reduce using rule 12 (expr -> matrix .)
    {               reduce using rule 12 (expr -> matrix .)
    FOR             reduce using rule 12 (expr -> matrix .)
    WHILE           reduce using rule 12 (expr -> matrix .)
    IF              reduce using rule 12 (expr -> matrix .)
    CONTINUE        reduce using rule 12 (expr -> matrix .)
    BREAK           reduce using rule 12 (expr -> matrix .)
    RETURN          reduce using rule 12 (expr -> matrix .)
    PRINT           reduce using rule 12 (expr -> matrix .)
    ZEROS           reduce using rule 12 (expr -> matrix .)
    ONES            reduce using rule 12 (expr -> matrix .)
    EYE             reduce using rule 12 (expr -> matrix .)
    STRING          reduce using rule 12 (expr -> matrix .)
    FLOAT_NUMBER    reduce using rule 12 (expr -> matrix .)
    INT_NUMBER      reduce using rule 12 (expr -> matrix .)
    ID              reduce using rule 12 (expr -> matrix .)
    NOT             reduce using rule 12 (expr -> matrix .)
    $end            reduce using rule 12 (expr -> matrix .)
    )               reduce using rule 12 (expr -> matrix .)
    ,               reduce using rule 12 (expr -> matrix .)
    ]               reduce using rule 12 (expr -> matrix .)


state 22

    (13) expr -> vector .
    REMAINDER_ASSIGN reduce using rule 13 (expr -> vector .)
    DIVIDE_ASSIGN   reduce using rule 13 (expr -> vector .)
    TIMES_ASSIGN    reduce using rule 13 (expr -> vector .)
    MINUS_ASSIGN    reduce using rule 13 (expr -> vector .)
    PLUS_ASSIGN     reduce using rule 13 (expr -> vector .)
    ASSIGN          reduce using rule 13 (expr -> vector .)
    ;               reduce using rule 13 (expr -> vector .)
    [               reduce using rule 13 (expr -> vector .)
    (               reduce using rule 13 (expr -> vector .)
    '               reduce using rule 13 (expr -> vector .)
    :               reduce using rule 13 (expr -> vector .)
    XOR             reduce using rule 13 (expr -> vector .)
    OR              reduce using rule 13 (expr -> vector .)
    AND             reduce using rule 13 (expr -> vector .)
    LOWER_EQUAL     reduce using rule 13 (expr -> vector .)
    LOWER           reduce using rule 13 (expr -> vector .)
    GREATER_EQUAL   reduce using rule 13 (expr -> vector .)
    GREATER         reduce using rule 13 (expr -> vector .)
    NOT_EQUAL       reduce using rule 13 (expr -> vector .)
    EQUAL           reduce using rule 13 (expr -> vector .)
    DOT_REMAINDER   reduce using rule 13 (expr -> vector .)
    DOT_DIVIDE      reduce using rule 13 (expr -> vector .)
    DOT_TIMES       reduce using rule 13 (expr -> vector .)
    DOT_MINUS       reduce using rule 13 (expr -> vector .)
    DOT_PLUS        reduce using rule 13 (expr -> vector .)
    REMAINDER       reduce using rule 13 (expr -> vector .)
    DIVIDE          reduce using rule 13 (expr -> vector .)
    TIMES           reduce using rule 13 (expr -> vector .)
    MINUS           reduce using rule 13 (expr -> vector .)
    PLUS            reduce using rule 13 (expr -> vector .)
    FUNCTION        reduce using rule 13 (expr -> vector .)
    {               reduce using rule 13 (expr -> vector .)
    FOR             reduce using rule 13 (expr -> vector .)
    WHILE           reduce using rule 13 (expr -> vector .)
    IF              reduce using rule 13 (expr -> vector .)
    CONTINUE        reduce using rule 13 (expr -> vector .)
    BREAK           reduce using rule 13 (expr -> vector .)
    RETURN          reduce using rule 13 (expr -> vector .)
    PRINT           reduce using rule 13 (expr -> vector .)
    ZEROS           reduce using rule 13 (expr -> vector .)
    ONES            reduce using rule 13 (expr -> vector .)
    EYE             reduce using rule 13 (expr -> vector .)
    STRING          reduce using rule 13 (expr -> vector .)
    FLOAT_NUMBER    reduce using rule 13 (expr -> vector .)
    INT_NUMBER      reduce using rule 13 (expr -> vector .)
    ID              reduce using rule 13 (expr -> vector .)
    NOT             reduce using rule 13 (expr -> vector .)
    $end            reduce using rule 13 (expr -> vector .)
    )               reduce using rule 13 (expr -> vector .)
    ,               reduce using rule 13 (expr -> vector .)
    ]               reduce using rule 13 (expr -> vector .)


state 23

    (14) expr -> STRING .
    REMAINDER_ASSIGN reduce using rule 14 (expr -> STRING .)
    DIVIDE_ASSIGN   reduce using rule 14 (expr -> STRING .)
    TIMES_ASSIGN    reduce using rule 14 (expr -> STRING .)
    MINUS_ASSIGN    reduce using rule 14 (expr -> STRING .)
    PLUS_ASSIGN     reduce using rule 14 (expr -> STRING .)
    ASSIGN          reduce using rule 14 (expr -> STRING .)
    ;               reduce using rule 14 (expr -> STRING .)
    [               reduce using rule 14 (expr -> STRING .)
    (               reduce using rule 14 (expr -> STRING .)
    '               reduce using rule 14 (expr -> STRING .)
    :               reduce using rule 14 (expr -> STRING .)
    XOR             reduce using rule 14 (expr -> STRING .)
    OR              reduce using rule 14 (expr -> STRING .)
    AND             reduce using rule 14 (expr -> STRING .)
    LOWER_EQUAL     reduce using rule 14 (expr -> STRING .)
    LOWER           reduce using rule 14 (expr -> STRING .)
    GREATER_EQUAL   reduce using rule 14 (expr -> STRING .)
    GREATER         reduce using rule 14 (expr -> STRING .)
    NOT_EQUAL       reduce using rule 14 (expr -> STRING .)
    EQUAL           reduce using rule 14 (expr -> STRING .)
    DOT_REMAINDER   reduce using rule 14 (expr -> STRING .)
    DOT_DIVIDE      reduce using rule 14 (expr -> STRING .)
    DOT_TIMES       reduce using rule 14 (expr -> STRING .)
    DOT_MINUS       reduce using rule 14 (expr -> STRING .)
    DOT_PLUS        reduce using rule 14 (expr -> STRING .)
    REMAINDER       reduce using rule 14 (expr -> STRING .)
    DIVIDE          reduce using rule 14 (expr -> STRING .)
    TIMES           reduce using rule 14 (expr -> STRING .)
    MINUS           reduce using rule 14 (expr -> STRING .)
    PLUS            reduce using rule 14 (expr -> STRING .)
    FUNCTION        reduce using rule 14 (expr -> STRING .)
    {               reduce using rule 14 (expr -> STRING .)
    FOR             reduce using rule 14 (expr -> STRING .)
    WHILE           reduce using rule 14 (expr -> STRING .)
    IF              reduce using rule 14 (expr -> STRING .)
    CONTINUE        reduce using rule 14 (expr -> STRING .)
    BREAK           reduce using rule 14 (expr -> STRING .)
    RETURN          reduce using rule 14 (expr -> STRING .)
    PRINT           reduce using rule 14 (expr -> STRING .)
    ZEROS           reduce using rule 14 (expr -> STRING .)
    ONES            reduce using rule 14 (expr -> STRING .)
    EYE             reduce using rule 14 (expr -> STRING .)
    STRING          reduce using rule 14 (expr -> STRING .)
    FLOAT_NUMBER    reduce using rule 14 (expr -> STRING .)
    INT_NUMBER      reduce using rule 14 (expr -> STRING .)
    ID              reduce using rule 14 (expr -> STRING .)
    NOT             reduce using rule 14 (expr -> STRING .)
    $end            reduce using rule 14 (expr -> STRING .)
    )               reduce using rule 14 (expr -> STRING .)
    ,               reduce using rule 14 (expr -> STRING .)
    ]               reduce using rule 14 (expr -> STRING .)


state 24

    (15) expr -> FLOAT_NUMBER .
    REMAINDER_ASSIGN reduce using rule 15 (expr -> FLOAT_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 15 (expr -> FLOAT_NUMBER .)
    TIMES_ASSIGN    reduce using rule 15 (expr -> FLOAT_NUMBER .)
    MINUS_ASSIGN    reduce using rule 15 (expr -> FLOAT_NUMBER .)
    PLUS_ASSIGN     reduce using rule 15 (expr -> FLOAT_NUMBER .)
    ASSIGN          reduce using rule 15 (expr -> FLOAT_NUMBER .)
    ;               reduce using rule 15 (expr -> FLOAT_NUMBER .)
    [               reduce using rule 15 (expr -> FLOAT_NUMBER .)
    (               reduce using rule 15 (expr -> FLOAT_NUMBER .)
    '               reduce using rule 15 (expr -> FLOAT_NUMBER .)
    :               reduce using rule 15 (expr -> FLOAT_NUMBER .)
    XOR             reduce using rule 15 (expr -> FLOAT_NUMBER .)
    OR              reduce using rule 15 (expr -> FLOAT_NUMBER .)
    AND             reduce using rule 15 (expr -> FLOAT_NUMBER .)
    LOWER_EQUAL     reduce using rule 15 (expr -> FLOAT_NUMBER .)
    LOWER           reduce using rule 15 (expr -> FLOAT_NUMBER .)
    GREATER_EQUAL   reduce using rule 15 (expr -> FLOAT_NUMBER .)
    GREATER         reduce using rule 15 (expr -> FLOAT_NUMBER .)
    NOT_EQUAL       reduce using rule 15 (expr -> FLOAT_NUMBER .)
    EQUAL           reduce using rule 15 (expr -> FLOAT_NUMBER .)
    DOT_REMAINDER   reduce using rule 15 (expr -> FLOAT_NUMBER .)
    DOT_DIVIDE      reduce using rule 15 (expr -> FLOAT_NUMBER .)
    DOT_TIMES       reduce using rule 15 (expr -> FLOAT_NUMBER .)
    DOT_MINUS       reduce using rule 15 (expr -> FLOAT_NUMBER .)
    DOT_PLUS        reduce using rule 15 (expr -> FLOAT_NUMBER .)
    REMAINDER       reduce using rule 15 (expr -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 15 (expr -> FLOAT_NUMBER .)
    TIMES           reduce using rule 15 (expr -> FLOAT_NUMBER .)
    MINUS           reduce using rule 15 (expr -> FLOAT_NUMBER .)
    PLUS            reduce using rule 15 (expr -> FLOAT_NUMBER .)
    FUNCTION        reduce using rule 15 (expr -> FLOAT_NUMBER .)
    {               reduce using rule 15 (expr -> FLOAT_NUMBER .)
    FOR             reduce using rule 15 (expr -> FLOAT_NUMBER .)
    WHILE           reduce using rule 15 (expr -> FLOAT_NUMBER .)
    IF              reduce using rule 15 (expr -> FLOAT_NUMBER .)
    CONTINUE        reduce using rule 15 (expr -> FLOAT_NUMBER .)
    BREAK           reduce using rule 15 (expr -> FLOAT_NUMBER .)
    RETURN          reduce using rule 15 (expr -> FLOAT_NUMBER .)
    PRINT           reduce using rule 15 (expr -> FLOAT_NUMBER .)
    ZEROS           reduce using rule 15 (expr -> FLOAT_NUMBER .)
    ONES            reduce using rule 15 (expr -> FLOAT_NUMBER .)
    EYE             reduce using rule 15 (expr -> FLOAT_NUMBER .)
    STRING          reduce using rule 15 (expr -> FLOAT_NUMBER .)
    FLOAT_NUMBER    reduce using rule 15 (expr -> FLOAT_NUMBER .)
    INT_NUMBER      reduce using rule 15 (expr -> FLOAT_NUMBER .)
    ID              reduce using rule 15 (expr -> FLOAT_NUMBER .)
    NOT             reduce using rule 15 (expr -> FLOAT_NUMBER .)
    $end            reduce using rule 15 (expr -> FLOAT_NUMBER .)
    )               reduce using rule 15 (expr -> FLOAT_NUMBER .)
    ,               reduce using rule 15 (expr -> FLOAT_NUMBER .)
    ]               reduce using rule 15 (expr -> FLOAT_NUMBER .)


state 25

    (16) expr -> INT_NUMBER .
    REMAINDER_ASSIGN reduce using rule 16 (expr -> INT_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 16 (expr -> INT_NUMBER .)
    TIMES_ASSIGN    reduce using rule 16 (expr -> INT_NUMBER .)
    MINUS_ASSIGN    reduce using rule 16 (expr -> INT_NUMBER .)
    PLUS_ASSIGN     reduce using rule 16 (expr -> INT_NUMBER .)
    ASSIGN          reduce using rule 16 (expr -> INT_NUMBER .)
    ;               reduce using rule 16 (expr -> INT_NUMBER .)
    [               reduce using rule 16 (expr -> INT_NUMBER .)
    (               reduce using rule 16 (expr -> INT_NUMBER .)
    '               reduce using rule 16 (expr -> INT_NUMBER .)
    :               reduce using rule 16 (expr -> INT_NUMBER .)
    XOR             reduce using rule 16 (expr -> INT_NUMBER .)
    OR              reduce using rule 16 (expr -> INT_NUMBER .)
    AND             reduce using rule 16 (expr -> INT_NUMBER .)
    LOWER_EQUAL     reduce using rule 16 (expr -> INT_NUMBER .)
    LOWER           reduce using rule 16 (expr -> INT_NUMBER .)
    GREATER_EQUAL   reduce using rule 16 (expr -> INT_NUMBER .)
    GREATER         reduce using rule 16 (expr -> INT_NUMBER .)
    NOT_EQUAL       reduce using rule 16 (expr -> INT_NUMBER .)
    EQUAL           reduce using rule 16 (expr -> INT_NUMBER .)
    DOT_REMAINDER   reduce using rule 16 (expr -> INT_NUMBER .)
    DOT_DIVIDE      reduce using rule 16 (expr -> INT_NUMBER .)
    DOT_TIMES       reduce using rule 16 (expr -> INT_NUMBER .)
    DOT_MINUS       reduce using rule 16 (expr -> INT_NUMBER .)
    DOT_PLUS        reduce using rule 16 (expr -> INT_NUMBER .)
    REMAINDER       reduce using rule 16 (expr -> INT_NUMBER .)
    DIVIDE          reduce using rule 16 (expr -> INT_NUMBER .)
    TIMES           reduce using rule 16 (expr -> INT_NUMBER .)
    MINUS           reduce using rule 16 (expr -> INT_NUMBER .)
    PLUS            reduce using rule 16 (expr -> INT_NUMBER .)
    FUNCTION        reduce using rule 16 (expr -> INT_NUMBER .)
    {               reduce using rule 16 (expr -> INT_NUMBER .)
    FOR             reduce using rule 16 (expr -> INT_NUMBER .)
    WHILE           reduce using rule 16 (expr -> INT_NUMBER .)
    IF              reduce using rule 16 (expr -> INT_NUMBER .)
    CONTINUE        reduce using rule 16 (expr -> INT_NUMBER .)
    BREAK           reduce using rule 16 (expr -> INT_NUMBER .)
    RETURN          reduce using rule 16 (expr -> INT_NUMBER .)
    PRINT           reduce using rule 16 (expr -> INT_NUMBER .)
    ZEROS           reduce using rule 16 (expr -> INT_NUMBER .)
    ONES            reduce using rule 16 (expr -> INT_NUMBER .)
    EYE             reduce using rule 16 (expr -> INT_NUMBER .)
    STRING          reduce using rule 16 (expr -> INT_NUMBER .)
    FLOAT_NUMBER    reduce using rule 16 (expr -> INT_NUMBER .)
    INT_NUMBER      reduce using rule 16 (expr -> INT_NUMBER .)
    ID              reduce using rule 16 (expr -> INT_NUMBER .)
    NOT             reduce using rule 16 (expr -> INT_NUMBER .)
    $end            reduce using rule 16 (expr -> INT_NUMBER .)
    )               reduce using rule 16 (expr -> INT_NUMBER .)
    ,               reduce using rule 16 (expr -> INT_NUMBER .)
    ]               reduce using rule 16 (expr -> INT_NUMBER .)


state 26

    (20) expr -> NOT . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 79
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 27

    (21) expr -> MINUS . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 80
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 28

    (1) program -> program action .
    FUNCTION        reduce using rule 1 (program -> program action .)
    {               reduce using rule 1 (program -> program action .)
    FOR             reduce using rule 1 (program -> program action .)
    WHILE           reduce using rule 1 (program -> program action .)
    IF              reduce using rule 1 (program -> program action .)
    CONTINUE        reduce using rule 1 (program -> program action .)
    BREAK           reduce using rule 1 (program -> program action .)
    RETURN          reduce using rule 1 (program -> program action .)
    PRINT           reduce using rule 1 (program -> program action .)
    ZEROS           reduce using rule 1 (program -> program action .)
    ONES            reduce using rule 1 (program -> program action .)
    EYE             reduce using rule 1 (program -> program action .)
    STRING          reduce using rule 1 (program -> program action .)
    FLOAT_NUMBER    reduce using rule 1 (program -> program action .)
    INT_NUMBER      reduce using rule 1 (program -> program action .)
    ID              reduce using rule 1 (program -> program action .)
    (               reduce using rule 1 (program -> program action .)
    NOT             reduce using rule 1 (program -> program action .)
    MINUS           reduce using rule 1 (program -> program action .)
    [               reduce using rule 1 (program -> program action .)
    $end            reduce using rule 1 (program -> program action .)


state 29

    (53) statement -> expr REMAINDER_ASSIGN . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 81
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 30

    (63) statement -> expr ; .
    FUNCTION        reduce using rule 63 (statement -> expr ; .)
    {               reduce using rule 63 (statement -> expr ; .)
    FOR             reduce using rule 63 (statement -> expr ; .)
    WHILE           reduce using rule 63 (statement -> expr ; .)
    IF              reduce using rule 63 (statement -> expr ; .)
    CONTINUE        reduce using rule 63 (statement -> expr ; .)
    BREAK           reduce using rule 63 (statement -> expr ; .)
    RETURN          reduce using rule 63 (statement -> expr ; .)
    PRINT           reduce using rule 63 (statement -> expr ; .)
    ZEROS           reduce using rule 63 (statement -> expr ; .)
    ONES            reduce using rule 63 (statement -> expr ; .)
    EYE             reduce using rule 63 (statement -> expr ; .)
    STRING          reduce using rule 63 (statement -> expr ; .)
    FLOAT_NUMBER    reduce using rule 63 (statement -> expr ; .)
    INT_NUMBER      reduce using rule 63 (statement -> expr ; .)
    ID              reduce using rule 63 (statement -> expr ; .)
    (               reduce using rule 63 (statement -> expr ; .)
    NOT             reduce using rule 63 (statement -> expr ; .)
    MINUS           reduce using rule 63 (statement -> expr ; .)
    [               reduce using rule 63 (statement -> expr ; .)
    $end            reduce using rule 63 (statement -> expr ; .)
    }               reduce using rule 63 (statement -> expr ; .)
    ELSE            reduce using rule 63 (statement -> expr ; .)


state 31

    (54) statement -> expr DIVIDE_ASSIGN . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 82
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 32

    (55) statement -> expr TIMES_ASSIGN . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 83
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 33

    (56) statement -> expr MINUS_ASSIGN . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 84
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 34

    (57) statement -> expr PLUS_ASSIGN . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 85
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 35

    (58) statement -> expr ASSIGN . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 86
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 36

    (6) expr -> expr [ . parameter_list ]
    (42) parameter_list -> . expr
    (43) parameter_list -> . parameter_list , expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 70
    parameter_list                 shift and go to state 87
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 37

    (7) expr -> expr ( . )
    (8) expr -> expr ( . parameter_list )
    (42) parameter_list -> . expr
    (43) parameter_list -> . parameter_list , expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    )               shift and go to state 88
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 70
    parameter_list                 shift and go to state 89
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 38

    (19) expr -> expr ' .
    REMAINDER_ASSIGN reduce using rule 19 (expr -> expr ' .)
    DIVIDE_ASSIGN   reduce using rule 19 (expr -> expr ' .)
    TIMES_ASSIGN    reduce using rule 19 (expr -> expr ' .)
    MINUS_ASSIGN    reduce using rule 19 (expr -> expr ' .)
    PLUS_ASSIGN     reduce using rule 19 (expr -> expr ' .)
    ASSIGN          reduce using rule 19 (expr -> expr ' .)
    ;               reduce using rule 19 (expr -> expr ' .)
    [               reduce using rule 19 (expr -> expr ' .)
    (               reduce using rule 19 (expr -> expr ' .)
    '               reduce using rule 19 (expr -> expr ' .)
    :               reduce using rule 19 (expr -> expr ' .)
    XOR             reduce using rule 19 (expr -> expr ' .)
    OR              reduce using rule 19 (expr -> expr ' .)
    AND             reduce using rule 19 (expr -> expr ' .)
    LOWER_EQUAL     reduce using rule 19 (expr -> expr ' .)
    LOWER           reduce using rule 19 (expr -> expr ' .)
    GREATER_EQUAL   reduce using rule 19 (expr -> expr ' .)
    GREATER         reduce using rule 19 (expr -> expr ' .)
    NOT_EQUAL       reduce using rule 19 (expr -> expr ' .)
    EQUAL           reduce using rule 19 (expr -> expr ' .)
    DOT_REMAINDER   reduce using rule 19 (expr -> expr ' .)
    DOT_DIVIDE      reduce using rule 19 (expr -> expr ' .)
    DOT_TIMES       reduce using rule 19 (expr -> expr ' .)
    DOT_MINUS       reduce using rule 19 (expr -> expr ' .)
    DOT_PLUS        reduce using rule 19 (expr -> expr ' .)
    REMAINDER       reduce using rule 19 (expr -> expr ' .)
    DIVIDE          reduce using rule 19 (expr -> expr ' .)
    TIMES           reduce using rule 19 (expr -> expr ' .)
    MINUS           reduce using rule 19 (expr -> expr ' .)
    PLUS            reduce using rule 19 (expr -> expr ' .)
    FUNCTION        reduce using rule 19 (expr -> expr ' .)
    {               reduce using rule 19 (expr -> expr ' .)
    FOR             reduce using rule 19 (expr -> expr ' .)
    WHILE           reduce using rule 19 (expr -> expr ' .)
    IF              reduce using rule 19 (expr -> expr ' .)
    CONTINUE        reduce using rule 19 (expr -> expr ' .)
    BREAK           reduce using rule 19 (expr -> expr ' .)
    RETURN          reduce using rule 19 (expr -> expr ' .)
    PRINT           reduce using rule 19 (expr -> expr ' .)
    ZEROS           reduce using rule 19 (expr -> expr ' .)
    ONES            reduce using rule 19 (expr -> expr ' .)
    EYE             reduce using rule 19 (expr -> expr ' .)
    STRING          reduce using rule 19 (expr -> expr ' .)
    FLOAT_NUMBER    reduce using rule 19 (expr -> expr ' .)
    INT_NUMBER      reduce using rule 19 (expr -> expr ' .)
    ID              reduce using rule 19 (expr -> expr ' .)
    NOT             reduce using rule 19 (expr -> expr ' .)
    $end            reduce using rule 19 (expr -> expr ' .)
    )               reduce using rule 19 (expr -> expr ' .)
    ,               reduce using rule 19 (expr -> expr ' .)
    ]               reduce using rule 19 (expr -> expr ' .)


state 39

    (22) expr -> expr : . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 90
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 40

    (23) expr -> expr XOR . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 91
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 41

    (24) expr -> expr OR . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 92
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 42

    (25) expr -> expr AND . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 93
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 43

    (26) expr -> expr LOWER_EQUAL . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 94
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 44

    (27) expr -> expr LOWER . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 95
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 45

    (28) expr -> expr GREATER_EQUAL . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 96
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 46

    (29) expr -> expr GREATER . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 97
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 47

    (30) expr -> expr NOT_EQUAL . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 98
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 48

    (31) expr -> expr EQUAL . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 99
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 49

    (32) expr -> expr DOT_REMAINDER . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 100
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 50

    (33) expr -> expr DOT_DIVIDE . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 101
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 51

    (34) expr -> expr DOT_TIMES . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 102
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 52

    (35) expr -> expr DOT_MINUS . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 103
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 53

    (36) expr -> expr DOT_PLUS . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 104
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 54

    (37) expr -> expr REMAINDER . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 105
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 55

    (38) expr -> expr DIVIDE . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 106
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 56

    (39) expr -> expr TIMES . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 107
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 57

    (40) expr -> expr MINUS . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 108
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 58

    (41) expr -> expr PLUS . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 109
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 59

    (66) function -> FUNCTION ID . ( ) statement
    (67) function -> FUNCTION ID . ( parameter_list ) statement
    (               shift and go to state 110


state 60

    (18) expr -> ( expr . )
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    )               shift and go to state 111
    [               shift and go to state 36
    (               shift and go to state 37
    '               shift and go to state 38
    :               shift and go to state 39
    XOR             shift and go to state 40
    OR              shift and go to state 41
    AND             shift and go to state 42
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 61

    (48) statement -> { statement_series . }
    (64) statement_series -> statement_series . statement
    (48) statement -> . { statement_series }
    (49) statement -> . FOR ( ID IN expr ) statement
    (50) statement -> . WHILE ( expr ) statement
    (51) statement -> . IF ( expr ) statement ELSE statement
    (52) statement -> . IF ( expr ) statement
    (53) statement -> . expr REMAINDER_ASSIGN expr ;
    (54) statement -> . expr DIVIDE_ASSIGN expr ;
    (55) statement -> . expr TIMES_ASSIGN expr ;
    (56) statement -> . expr MINUS_ASSIGN expr ;
    (57) statement -> . expr PLUS_ASSIGN expr ;
    (58) statement -> . expr ASSIGN expr ;
    (59) statement -> . CONTINUE ;
    (60) statement -> . BREAK ;
    (61) statement -> . RETURN parameter_list ;
    (62) statement -> . PRINT parameter_list ;
    (63) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    }               shift and go to state 112
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    statement                      shift and go to state 113
    expr                           shift and go to state 63
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 62

    (65) statement_series -> statement .
    }               reduce using rule 65 (statement_series -> statement .)
    {               reduce using rule 65 (statement_series -> statement .)
    FOR             reduce using rule 65 (statement_series -> statement .)
    WHILE           reduce using rule 65 (statement_series -> statement .)
    IF              reduce using rule 65 (statement_series -> statement .)
    CONTINUE        reduce using rule 65 (statement_series -> statement .)
    BREAK           reduce using rule 65 (statement_series -> statement .)
    RETURN          reduce using rule 65 (statement_series -> statement .)
    PRINT           reduce using rule 65 (statement_series -> statement .)
    ZEROS           reduce using rule 65 (statement_series -> statement .)
    ONES            reduce using rule 65 (statement_series -> statement .)
    EYE             reduce using rule 65 (statement_series -> statement .)
    STRING          reduce using rule 65 (statement_series -> statement .)
    FLOAT_NUMBER    reduce using rule 65 (statement_series -> statement .)
    INT_NUMBER      reduce using rule 65 (statement_series -> statement .)
    ID              reduce using rule 65 (statement_series -> statement .)
    (               reduce using rule 65 (statement_series -> statement .)
    NOT             reduce using rule 65 (statement_series -> statement .)
    MINUS           reduce using rule 65 (statement_series -> statement .)
    [               reduce using rule 65 (statement_series -> statement .)


state 63

    (53) statement -> expr . REMAINDER_ASSIGN expr ;
    (54) statement -> expr . DIVIDE_ASSIGN expr ;
    (55) statement -> expr . TIMES_ASSIGN expr ;
    (56) statement -> expr . MINUS_ASSIGN expr ;
    (57) statement -> expr . PLUS_ASSIGN expr ;
    (58) statement -> expr . ASSIGN expr ;
    (63) statement -> expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN shift and go to state 29
    DIVIDE_ASSIGN   shift and go to state 31
    TIMES_ASSIGN    shift and go to state 32
    MINUS_ASSIGN    shift and go to state 33
    PLUS_ASSIGN     shift and go to state 34
    ASSIGN          shift and go to state 35
    ;               shift and go to state 30
    [               shift and go to state 36
    (               shift and go to state 37
    '               shift and go to state 38
    :               shift and go to state 39
    XOR             shift and go to state 40
    OR              shift and go to state 41
    AND             shift and go to state 42
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 64

    (49) statement -> FOR ( . ID IN expr ) statement
    ID              shift and go to state 114


state 65

    (50) statement -> WHILE ( . expr ) statement
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 115
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 66

    (51) statement -> IF ( . expr ) statement ELSE statement
    (52) statement -> IF ( . expr ) statement
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 116
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 67

    (59) statement -> CONTINUE ; .
    FUNCTION        reduce using rule 59 (statement -> CONTINUE ; .)
    {               reduce using rule 59 (statement -> CONTINUE ; .)
    FOR             reduce using rule 59 (statement -> CONTINUE ; .)
    WHILE           reduce using rule 59 (statement -> CONTINUE ; .)
    IF              reduce using rule 59 (statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 59 (statement -> CONTINUE ; .)
    BREAK           reduce using rule 59 (statement -> CONTINUE ; .)
    RETURN          reduce using rule 59 (statement -> CONTINUE ; .)
    PRINT           reduce using rule 59 (statement -> CONTINUE ; .)
    ZEROS           reduce using rule 59 (statement -> CONTINUE ; .)
    ONES            reduce using rule 59 (statement -> CONTINUE ; .)
    EYE             reduce using rule 59 (statement -> CONTINUE ; .)
    STRING          reduce using rule 59 (statement -> CONTINUE ; .)
    FLOAT_NUMBER    reduce using rule 59 (statement -> CONTINUE ; .)
    INT_NUMBER      reduce using rule 59 (statement -> CONTINUE ; .)
    ID              reduce using rule 59 (statement -> CONTINUE ; .)
    (               reduce using rule 59 (statement -> CONTINUE ; .)
    NOT             reduce using rule 59 (statement -> CONTINUE ; .)
    MINUS           reduce using rule 59 (statement -> CONTINUE ; .)
    [               reduce using rule 59 (statement -> CONTINUE ; .)
    $end            reduce using rule 59 (statement -> CONTINUE ; .)
    }               reduce using rule 59 (statement -> CONTINUE ; .)
    ELSE            reduce using rule 59 (statement -> CONTINUE ; .)


state 68

    (60) statement -> BREAK ; .
    FUNCTION        reduce using rule 60 (statement -> BREAK ; .)
    {               reduce using rule 60 (statement -> BREAK ; .)
    FOR             reduce using rule 60 (statement -> BREAK ; .)
    WHILE           reduce using rule 60 (statement -> BREAK ; .)
    IF              reduce using rule 60 (statement -> BREAK ; .)
    CONTINUE        reduce using rule 60 (statement -> BREAK ; .)
    BREAK           reduce using rule 60 (statement -> BREAK ; .)
    RETURN          reduce using rule 60 (statement -> BREAK ; .)
    PRINT           reduce using rule 60 (statement -> BREAK ; .)
    ZEROS           reduce using rule 60 (statement -> BREAK ; .)
    ONES            reduce using rule 60 (statement -> BREAK ; .)
    EYE             reduce using rule 60 (statement -> BREAK ; .)
    STRING          reduce using rule 60 (statement -> BREAK ; .)
    FLOAT_NUMBER    reduce using rule 60 (statement -> BREAK ; .)
    INT_NUMBER      reduce using rule 60 (statement -> BREAK ; .)
    ID              reduce using rule 60 (statement -> BREAK ; .)
    (               reduce using rule 60 (statement -> BREAK ; .)
    NOT             reduce using rule 60 (statement -> BREAK ; .)
    MINUS           reduce using rule 60 (statement -> BREAK ; .)
    [               reduce using rule 60 (statement -> BREAK ; .)
    $end            reduce using rule 60 (statement -> BREAK ; .)
    }               reduce using rule 60 (statement -> BREAK ; .)
    ELSE            reduce using rule 60 (statement -> BREAK ; .)


state 69

    (61) statement -> RETURN parameter_list . ;
    (43) parameter_list -> parameter_list . , expr
    ;               shift and go to state 117
    ,               shift and go to state 118


state 70

    (42) parameter_list -> expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    ;               reduce using rule 42 (parameter_list -> expr .)
    ,               reduce using rule 42 (parameter_list -> expr .)
    ]               reduce using rule 42 (parameter_list -> expr .)
    )               reduce using rule 42 (parameter_list -> expr .)
    [               shift and go to state 36
    (               shift and go to state 37
    '               shift and go to state 38
    :               shift and go to state 39
    XOR             shift and go to state 40
    OR              shift and go to state 41
    AND             shift and go to state 42
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 71

    (62) statement -> PRINT parameter_list . ;
    (43) parameter_list -> parameter_list . , expr
    ;               shift and go to state 119
    ,               shift and go to state 118


state 72

    (44) vector -> [ . parameter_list ]
    (47) matrix -> [ . vector_list ]
    (42) parameter_list -> . expr
    (43) parameter_list -> . parameter_list , expr
    (45) vector_list -> . vector_list , vector
    (46) vector_list -> . vector
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (44) vector -> . [ parameter_list ]
    (47) matrix -> . [ vector_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 72

    parameter_list                 shift and go to state 74
    vector_list                    shift and go to state 73
    expr                           shift and go to state 70
    vector                         shift and go to state 75
    matrix                         shift and go to state 21

state 73

    (47) matrix -> [ vector_list . ]
    (45) vector_list -> vector_list . , vector
    ]               shift and go to state 120
    ,               shift and go to state 121


state 74

    (44) vector -> [ parameter_list . ]
    (43) parameter_list -> parameter_list . , expr
    ]               shift and go to state 122
    ,               shift and go to state 118


state 75

    (46) vector_list -> vector .
    (13) expr -> vector .
  ! reduce/reduce conflict for ] resolved using rule 46 (vector_list -> vector .)
  ! reduce/reduce conflict for , resolved using rule 46 (vector_list -> vector .)
    ]               reduce using rule 46 (vector_list -> vector .)
    ,               reduce using rule 46 (vector_list -> vector .)
    [               reduce using rule 13 (expr -> vector .)
    (               reduce using rule 13 (expr -> vector .)
    '               reduce using rule 13 (expr -> vector .)
    :               reduce using rule 13 (expr -> vector .)
    XOR             reduce using rule 13 (expr -> vector .)
    OR              reduce using rule 13 (expr -> vector .)
    AND             reduce using rule 13 (expr -> vector .)
    LOWER_EQUAL     reduce using rule 13 (expr -> vector .)
    LOWER           reduce using rule 13 (expr -> vector .)
    GREATER_EQUAL   reduce using rule 13 (expr -> vector .)
    GREATER         reduce using rule 13 (expr -> vector .)
    NOT_EQUAL       reduce using rule 13 (expr -> vector .)
    EQUAL           reduce using rule 13 (expr -> vector .)
    DOT_REMAINDER   reduce using rule 13 (expr -> vector .)
    DOT_DIVIDE      reduce using rule 13 (expr -> vector .)
    DOT_TIMES       reduce using rule 13 (expr -> vector .)
    DOT_MINUS       reduce using rule 13 (expr -> vector .)
    DOT_PLUS        reduce using rule 13 (expr -> vector .)
    REMAINDER       reduce using rule 13 (expr -> vector .)
    DIVIDE          reduce using rule 13 (expr -> vector .)
    TIMES           reduce using rule 13 (expr -> vector .)
    MINUS           reduce using rule 13 (expr -> vector .)
    PLUS            reduce using rule 13 (expr -> vector .)


state 76

    (9) expr -> ZEROS ( . parameter_list )
    (42) parameter_list -> . expr
    (43) parameter_list -> . parameter_list , expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    parameter_list                 shift and go to state 123
    expr                           shift and go to state 70
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 77

    (10) expr -> ONES ( . parameter_list )
    (42) parameter_list -> . expr
    (43) parameter_list -> . parameter_list , expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    parameter_list                 shift and go to state 124
    expr                           shift and go to state 70
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 78

    (11) expr -> EYE ( . parameter_list )
    (42) parameter_list -> . expr
    (43) parameter_list -> . parameter_list , expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    parameter_list                 shift and go to state 125
    expr                           shift and go to state 70
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 79

    (20) expr -> NOT expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 20 (expr -> NOT expr .)
    DIVIDE_ASSIGN   reduce using rule 20 (expr -> NOT expr .)
    TIMES_ASSIGN    reduce using rule 20 (expr -> NOT expr .)
    MINUS_ASSIGN    reduce using rule 20 (expr -> NOT expr .)
    PLUS_ASSIGN     reduce using rule 20 (expr -> NOT expr .)
    ASSIGN          reduce using rule 20 (expr -> NOT expr .)
    ;               reduce using rule 20 (expr -> NOT expr .)
    [               reduce using rule 20 (expr -> NOT expr .)
    (               reduce using rule 20 (expr -> NOT expr .)
    '               reduce using rule 20 (expr -> NOT expr .)
    :               reduce using rule 20 (expr -> NOT expr .)
    XOR             reduce using rule 20 (expr -> NOT expr .)
    OR              reduce using rule 20 (expr -> NOT expr .)
    AND             reduce using rule 20 (expr -> NOT expr .)
    LOWER_EQUAL     reduce using rule 20 (expr -> NOT expr .)
    LOWER           reduce using rule 20 (expr -> NOT expr .)
    GREATER_EQUAL   reduce using rule 20 (expr -> NOT expr .)
    GREATER         reduce using rule 20 (expr -> NOT expr .)
    NOT_EQUAL       reduce using rule 20 (expr -> NOT expr .)
    EQUAL           reduce using rule 20 (expr -> NOT expr .)
    DOT_REMAINDER   reduce using rule 20 (expr -> NOT expr .)
    DOT_DIVIDE      reduce using rule 20 (expr -> NOT expr .)
    DOT_TIMES       reduce using rule 20 (expr -> NOT expr .)
    DOT_MINUS       reduce using rule 20 (expr -> NOT expr .)
    DOT_PLUS        reduce using rule 20 (expr -> NOT expr .)
    REMAINDER       reduce using rule 20 (expr -> NOT expr .)
    DIVIDE          reduce using rule 20 (expr -> NOT expr .)
    TIMES           reduce using rule 20 (expr -> NOT expr .)
    MINUS           reduce using rule 20 (expr -> NOT expr .)
    PLUS            reduce using rule 20 (expr -> NOT expr .)
    FUNCTION        reduce using rule 20 (expr -> NOT expr .)
    {               reduce using rule 20 (expr -> NOT expr .)
    FOR             reduce using rule 20 (expr -> NOT expr .)
    WHILE           reduce using rule 20 (expr -> NOT expr .)
    IF              reduce using rule 20 (expr -> NOT expr .)
    CONTINUE        reduce using rule 20 (expr -> NOT expr .)
    BREAK           reduce using rule 20 (expr -> NOT expr .)
    RETURN          reduce using rule 20 (expr -> NOT expr .)
    PRINT           reduce using rule 20 (expr -> NOT expr .)
    ZEROS           reduce using rule 20 (expr -> NOT expr .)
    ONES            reduce using rule 20 (expr -> NOT expr .)
    EYE             reduce using rule 20 (expr -> NOT expr .)
    STRING          reduce using rule 20 (expr -> NOT expr .)
    FLOAT_NUMBER    reduce using rule 20 (expr -> NOT expr .)
    INT_NUMBER      reduce using rule 20 (expr -> NOT expr .)
    ID              reduce using rule 20 (expr -> NOT expr .)
    NOT             reduce using rule 20 (expr -> NOT expr .)
    $end            reduce using rule 20 (expr -> NOT expr .)
    )               reduce using rule 20 (expr -> NOT expr .)
    ,               reduce using rule 20 (expr -> NOT expr .)
    ]               reduce using rule 20 (expr -> NOT expr .)


state 80

    (21) expr -> MINUS expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 21 (expr -> MINUS expr .)
    DIVIDE_ASSIGN   reduce using rule 21 (expr -> MINUS expr .)
    TIMES_ASSIGN    reduce using rule 21 (expr -> MINUS expr .)
    MINUS_ASSIGN    reduce using rule 21 (expr -> MINUS expr .)
    PLUS_ASSIGN     reduce using rule 21 (expr -> MINUS expr .)
    ASSIGN          reduce using rule 21 (expr -> MINUS expr .)
    ;               reduce using rule 21 (expr -> MINUS expr .)
    [               reduce using rule 21 (expr -> MINUS expr .)
    (               reduce using rule 21 (expr -> MINUS expr .)
    '               reduce using rule 21 (expr -> MINUS expr .)
    :               reduce using rule 21 (expr -> MINUS expr .)
    XOR             reduce using rule 21 (expr -> MINUS expr .)
    OR              reduce using rule 21 (expr -> MINUS expr .)
    AND             reduce using rule 21 (expr -> MINUS expr .)
    LOWER_EQUAL     reduce using rule 21 (expr -> MINUS expr .)
    LOWER           reduce using rule 21 (expr -> MINUS expr .)
    GREATER_EQUAL   reduce using rule 21 (expr -> MINUS expr .)
    GREATER         reduce using rule 21 (expr -> MINUS expr .)
    NOT_EQUAL       reduce using rule 21 (expr -> MINUS expr .)
    EQUAL           reduce using rule 21 (expr -> MINUS expr .)
    DOT_REMAINDER   reduce using rule 21 (expr -> MINUS expr .)
    DOT_DIVIDE      reduce using rule 21 (expr -> MINUS expr .)
    DOT_TIMES       reduce using rule 21 (expr -> MINUS expr .)
    DOT_MINUS       reduce using rule 21 (expr -> MINUS expr .)
    DOT_PLUS        reduce using rule 21 (expr -> MINUS expr .)
    REMAINDER       reduce using rule 21 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 21 (expr -> MINUS expr .)
    TIMES           reduce using rule 21 (expr -> MINUS expr .)
    MINUS           reduce using rule 21 (expr -> MINUS expr .)
    PLUS            reduce using rule 21 (expr -> MINUS expr .)
    FUNCTION        reduce using rule 21 (expr -> MINUS expr .)
    {               reduce using rule 21 (expr -> MINUS expr .)
    FOR             reduce using rule 21 (expr -> MINUS expr .)
    WHILE           reduce using rule 21 (expr -> MINUS expr .)
    IF              reduce using rule 21 (expr -> MINUS expr .)
    CONTINUE        reduce using rule 21 (expr -> MINUS expr .)
    BREAK           reduce using rule 21 (expr -> MINUS expr .)
    RETURN          reduce using rule 21 (expr -> MINUS expr .)
    PRINT           reduce using rule 21 (expr -> MINUS expr .)
    ZEROS           reduce using rule 21 (expr -> MINUS expr .)
    ONES            reduce using rule 21 (expr -> MINUS expr .)
    EYE             reduce using rule 21 (expr -> MINUS expr .)
    STRING          reduce using rule 21 (expr -> MINUS expr .)
    FLOAT_NUMBER    reduce using rule 21 (expr -> MINUS expr .)
    INT_NUMBER      reduce using rule 21 (expr -> MINUS expr .)
    ID              reduce using rule 21 (expr -> MINUS expr .)
    NOT             reduce using rule 21 (expr -> MINUS expr .)
    $end            reduce using rule 21 (expr -> MINUS expr .)
    )               reduce using rule 21 (expr -> MINUS expr .)
    ,               reduce using rule 21 (expr -> MINUS expr .)
    ]               reduce using rule 21 (expr -> MINUS expr .)


state 81

    (53) statement -> expr REMAINDER_ASSIGN expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    ;               shift and go to state 126
    [               shift and go to state 36
    (               shift and go to state 37
    '               shift and go to state 38
    :               shift and go to state 39
    XOR             shift and go to state 40
    OR              shift and go to state 41
    AND             shift and go to state 42
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 82

    (54) statement -> expr DIVIDE_ASSIGN expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    ;               shift and go to state 127
    [               shift and go to state 36
    (               shift and go to state 37
    '               shift and go to state 38
    :               shift and go to state 39
    XOR             shift and go to state 40
    OR              shift and go to state 41
    AND             shift and go to state 42
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 83

    (55) statement -> expr TIMES_ASSIGN expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    ;               shift and go to state 128
    [               shift and go to state 36
    (               shift and go to state 37
    '               shift and go to state 38
    :               shift and go to state 39
    XOR             shift and go to state 40
    OR              shift and go to state 41
    AND             shift and go to state 42
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 84

    (56) statement -> expr MINUS_ASSIGN expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    ;               shift and go to state 129
    [               shift and go to state 36
    (               shift and go to state 37
    '               shift and go to state 38
    :               shift and go to state 39
    XOR             shift and go to state 40
    OR              shift and go to state 41
    AND             shift and go to state 42
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 85

    (57) statement -> expr PLUS_ASSIGN expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    ;               shift and go to state 130
    [               shift and go to state 36
    (               shift and go to state 37
    '               shift and go to state 38
    :               shift and go to state 39
    XOR             shift and go to state 40
    OR              shift and go to state 41
    AND             shift and go to state 42
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 86

    (58) statement -> expr ASSIGN expr . ;
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    ;               shift and go to state 131
    [               shift and go to state 36
    (               shift and go to state 37
    '               shift and go to state 38
    :               shift and go to state 39
    XOR             shift and go to state 40
    OR              shift and go to state 41
    AND             shift and go to state 42
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 87

    (6) expr -> expr [ parameter_list . ]
    (43) parameter_list -> parameter_list . , expr
    ]               shift and go to state 132
    ,               shift and go to state 118


state 88

    (7) expr -> expr ( ) .
    REMAINDER_ASSIGN reduce using rule 7 (expr -> expr ( ) .)
    DIVIDE_ASSIGN   reduce using rule 7 (expr -> expr ( ) .)
    TIMES_ASSIGN    reduce using rule 7 (expr -> expr ( ) .)
    MINUS_ASSIGN    reduce using rule 7 (expr -> expr ( ) .)
    PLUS_ASSIGN     reduce using rule 7 (expr -> expr ( ) .)
    ASSIGN          reduce using rule 7 (expr -> expr ( ) .)
    ;               reduce using rule 7 (expr -> expr ( ) .)
    [               reduce using rule 7 (expr -> expr ( ) .)
    (               reduce using rule 7 (expr -> expr ( ) .)
    '               reduce using rule 7 (expr -> expr ( ) .)
    :               reduce using rule 7 (expr -> expr ( ) .)
    XOR             reduce using rule 7 (expr -> expr ( ) .)
    OR              reduce using rule 7 (expr -> expr ( ) .)
    AND             reduce using rule 7 (expr -> expr ( ) .)
    LOWER_EQUAL     reduce using rule 7 (expr -> expr ( ) .)
    LOWER           reduce using rule 7 (expr -> expr ( ) .)
    GREATER_EQUAL   reduce using rule 7 (expr -> expr ( ) .)
    GREATER         reduce using rule 7 (expr -> expr ( ) .)
    NOT_EQUAL       reduce using rule 7 (expr -> expr ( ) .)
    EQUAL           reduce using rule 7 (expr -> expr ( ) .)
    DOT_REMAINDER   reduce using rule 7 (expr -> expr ( ) .)
    DOT_DIVIDE      reduce using rule 7 (expr -> expr ( ) .)
    DOT_TIMES       reduce using rule 7 (expr -> expr ( ) .)
    DOT_MINUS       reduce using rule 7 (expr -> expr ( ) .)
    DOT_PLUS        reduce using rule 7 (expr -> expr ( ) .)
    REMAINDER       reduce using rule 7 (expr -> expr ( ) .)
    DIVIDE          reduce using rule 7 (expr -> expr ( ) .)
    TIMES           reduce using rule 7 (expr -> expr ( ) .)
    MINUS           reduce using rule 7 (expr -> expr ( ) .)
    PLUS            reduce using rule 7 (expr -> expr ( ) .)
    FUNCTION        reduce using rule 7 (expr -> expr ( ) .)
    {               reduce using rule 7 (expr -> expr ( ) .)
    FOR             reduce using rule 7 (expr -> expr ( ) .)
    WHILE           reduce using rule 7 (expr -> expr ( ) .)
    IF              reduce using rule 7 (expr -> expr ( ) .)
    CONTINUE        reduce using rule 7 (expr -> expr ( ) .)
    BREAK           reduce using rule 7 (expr -> expr ( ) .)
    RETURN          reduce using rule 7 (expr -> expr ( ) .)
    PRINT           reduce using rule 7 (expr -> expr ( ) .)
    ZEROS           reduce using rule 7 (expr -> expr ( ) .)
    ONES            reduce using rule 7 (expr -> expr ( ) .)
    EYE             reduce using rule 7 (expr -> expr ( ) .)
    STRING          reduce using rule 7 (expr -> expr ( ) .)
    FLOAT_NUMBER    reduce using rule 7 (expr -> expr ( ) .)
    INT_NUMBER      reduce using rule 7 (expr -> expr ( ) .)
    ID              reduce using rule 7 (expr -> expr ( ) .)
    NOT             reduce using rule 7 (expr -> expr ( ) .)
    $end            reduce using rule 7 (expr -> expr ( ) .)
    )               reduce using rule 7 (expr -> expr ( ) .)
    ,               reduce using rule 7 (expr -> expr ( ) .)
    ]               reduce using rule 7 (expr -> expr ( ) .)


state 89

    (8) expr -> expr ( parameter_list . )
    (43) parameter_list -> parameter_list . , expr
    )               shift and go to state 133
    ,               shift and go to state 118


state 90

    (22) expr -> expr : expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 22 (expr -> expr : expr .)
    DIVIDE_ASSIGN   reduce using rule 22 (expr -> expr : expr .)
    TIMES_ASSIGN    reduce using rule 22 (expr -> expr : expr .)
    MINUS_ASSIGN    reduce using rule 22 (expr -> expr : expr .)
    PLUS_ASSIGN     reduce using rule 22 (expr -> expr : expr .)
    ASSIGN          reduce using rule 22 (expr -> expr : expr .)
    ;               reduce using rule 22 (expr -> expr : expr .)
    [               reduce using rule 22 (expr -> expr : expr .)
    (               reduce using rule 22 (expr -> expr : expr .)
    '               reduce using rule 22 (expr -> expr : expr .)
    :               reduce using rule 22 (expr -> expr : expr .)
    FUNCTION        reduce using rule 22 (expr -> expr : expr .)
    {               reduce using rule 22 (expr -> expr : expr .)
    FOR             reduce using rule 22 (expr -> expr : expr .)
    WHILE           reduce using rule 22 (expr -> expr : expr .)
    IF              reduce using rule 22 (expr -> expr : expr .)
    CONTINUE        reduce using rule 22 (expr -> expr : expr .)
    BREAK           reduce using rule 22 (expr -> expr : expr .)
    RETURN          reduce using rule 22 (expr -> expr : expr .)
    PRINT           reduce using rule 22 (expr -> expr : expr .)
    ZEROS           reduce using rule 22 (expr -> expr : expr .)
    ONES            reduce using rule 22 (expr -> expr : expr .)
    EYE             reduce using rule 22 (expr -> expr : expr .)
    STRING          reduce using rule 22 (expr -> expr : expr .)
    FLOAT_NUMBER    reduce using rule 22 (expr -> expr : expr .)
    INT_NUMBER      reduce using rule 22 (expr -> expr : expr .)
    ID              reduce using rule 22 (expr -> expr : expr .)
    NOT             reduce using rule 22 (expr -> expr : expr .)
    $end            reduce using rule 22 (expr -> expr : expr .)
    )               reduce using rule 22 (expr -> expr : expr .)
    ,               reduce using rule 22 (expr -> expr : expr .)
    ]               reduce using rule 22 (expr -> expr : expr .)
    XOR             shift and go to state 40
    OR              shift and go to state 41
    AND             shift and go to state 42
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 91

    (23) expr -> expr XOR expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 23 (expr -> expr XOR expr .)
    DIVIDE_ASSIGN   reduce using rule 23 (expr -> expr XOR expr .)
    TIMES_ASSIGN    reduce using rule 23 (expr -> expr XOR expr .)
    MINUS_ASSIGN    reduce using rule 23 (expr -> expr XOR expr .)
    PLUS_ASSIGN     reduce using rule 23 (expr -> expr XOR expr .)
    ASSIGN          reduce using rule 23 (expr -> expr XOR expr .)
    ;               reduce using rule 23 (expr -> expr XOR expr .)
    [               reduce using rule 23 (expr -> expr XOR expr .)
    (               reduce using rule 23 (expr -> expr XOR expr .)
    '               reduce using rule 23 (expr -> expr XOR expr .)
    :               reduce using rule 23 (expr -> expr XOR expr .)
    XOR             reduce using rule 23 (expr -> expr XOR expr .)
    OR              reduce using rule 23 (expr -> expr XOR expr .)
    AND             reduce using rule 23 (expr -> expr XOR expr .)
    FUNCTION        reduce using rule 23 (expr -> expr XOR expr .)
    {               reduce using rule 23 (expr -> expr XOR expr .)
    FOR             reduce using rule 23 (expr -> expr XOR expr .)
    WHILE           reduce using rule 23 (expr -> expr XOR expr .)
    IF              reduce using rule 23 (expr -> expr XOR expr .)
    CONTINUE        reduce using rule 23 (expr -> expr XOR expr .)
    BREAK           reduce using rule 23 (expr -> expr XOR expr .)
    RETURN          reduce using rule 23 (expr -> expr XOR expr .)
    PRINT           reduce using rule 23 (expr -> expr XOR expr .)
    ZEROS           reduce using rule 23 (expr -> expr XOR expr .)
    ONES            reduce using rule 23 (expr -> expr XOR expr .)
    EYE             reduce using rule 23 (expr -> expr XOR expr .)
    STRING          reduce using rule 23 (expr -> expr XOR expr .)
    FLOAT_NUMBER    reduce using rule 23 (expr -> expr XOR expr .)
    INT_NUMBER      reduce using rule 23 (expr -> expr XOR expr .)
    ID              reduce using rule 23 (expr -> expr XOR expr .)
    NOT             reduce using rule 23 (expr -> expr XOR expr .)
    $end            reduce using rule 23 (expr -> expr XOR expr .)
    )               reduce using rule 23 (expr -> expr XOR expr .)
    ,               reduce using rule 23 (expr -> expr XOR expr .)
    ]               reduce using rule 23 (expr -> expr XOR expr .)
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 92

    (24) expr -> expr OR expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 24 (expr -> expr OR expr .)
    DIVIDE_ASSIGN   reduce using rule 24 (expr -> expr OR expr .)
    TIMES_ASSIGN    reduce using rule 24 (expr -> expr OR expr .)
    MINUS_ASSIGN    reduce using rule 24 (expr -> expr OR expr .)
    PLUS_ASSIGN     reduce using rule 24 (expr -> expr OR expr .)
    ASSIGN          reduce using rule 24 (expr -> expr OR expr .)
    ;               reduce using rule 24 (expr -> expr OR expr .)
    [               reduce using rule 24 (expr -> expr OR expr .)
    (               reduce using rule 24 (expr -> expr OR expr .)
    '               reduce using rule 24 (expr -> expr OR expr .)
    :               reduce using rule 24 (expr -> expr OR expr .)
    XOR             reduce using rule 24 (expr -> expr OR expr .)
    OR              reduce using rule 24 (expr -> expr OR expr .)
    AND             reduce using rule 24 (expr -> expr OR expr .)
    FUNCTION        reduce using rule 24 (expr -> expr OR expr .)
    {               reduce using rule 24 (expr -> expr OR expr .)
    FOR             reduce using rule 24 (expr -> expr OR expr .)
    WHILE           reduce using rule 24 (expr -> expr OR expr .)
    IF              reduce using rule 24 (expr -> expr OR expr .)
    CONTINUE        reduce using rule 24 (expr -> expr OR expr .)
    BREAK           reduce using rule 24 (expr -> expr OR expr .)
    RETURN          reduce using rule 24 (expr -> expr OR expr .)
    PRINT           reduce using rule 24 (expr -> expr OR expr .)
    ZEROS           reduce using rule 24 (expr -> expr OR expr .)
    ONES            reduce using rule 24 (expr -> expr OR expr .)
    EYE             reduce using rule 24 (expr -> expr OR expr .)
    STRING          reduce using rule 24 (expr -> expr OR expr .)
    FLOAT_NUMBER    reduce using rule 24 (expr -> expr OR expr .)
    INT_NUMBER      reduce using rule 24 (expr -> expr OR expr .)
    ID              reduce using rule 24 (expr -> expr OR expr .)
    NOT             reduce using rule 24 (expr -> expr OR expr .)
    $end            reduce using rule 24 (expr -> expr OR expr .)
    )               reduce using rule 24 (expr -> expr OR expr .)
    ,               reduce using rule 24 (expr -> expr OR expr .)
    ]               reduce using rule 24 (expr -> expr OR expr .)
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 93

    (25) expr -> expr AND expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 25 (expr -> expr AND expr .)
    DIVIDE_ASSIGN   reduce using rule 25 (expr -> expr AND expr .)
    TIMES_ASSIGN    reduce using rule 25 (expr -> expr AND expr .)
    MINUS_ASSIGN    reduce using rule 25 (expr -> expr AND expr .)
    PLUS_ASSIGN     reduce using rule 25 (expr -> expr AND expr .)
    ASSIGN          reduce using rule 25 (expr -> expr AND expr .)
    ;               reduce using rule 25 (expr -> expr AND expr .)
    [               reduce using rule 25 (expr -> expr AND expr .)
    (               reduce using rule 25 (expr -> expr AND expr .)
    '               reduce using rule 25 (expr -> expr AND expr .)
    :               reduce using rule 25 (expr -> expr AND expr .)
    XOR             reduce using rule 25 (expr -> expr AND expr .)
    OR              reduce using rule 25 (expr -> expr AND expr .)
    AND             reduce using rule 25 (expr -> expr AND expr .)
    FUNCTION        reduce using rule 25 (expr -> expr AND expr .)
    {               reduce using rule 25 (expr -> expr AND expr .)
    FOR             reduce using rule 25 (expr -> expr AND expr .)
    WHILE           reduce using rule 25 (expr -> expr AND expr .)
    IF              reduce using rule 25 (expr -> expr AND expr .)
    CONTINUE        reduce using rule 25 (expr -> expr AND expr .)
    BREAK           reduce using rule 25 (expr -> expr AND expr .)
    RETURN          reduce using rule 25 (expr -> expr AND expr .)
    PRINT           reduce using rule 25 (expr -> expr AND expr .)
    ZEROS           reduce using rule 25 (expr -> expr AND expr .)
    ONES            reduce using rule 25 (expr -> expr AND expr .)
    EYE             reduce using rule 25 (expr -> expr AND expr .)
    STRING          reduce using rule 25 (expr -> expr AND expr .)
    FLOAT_NUMBER    reduce using rule 25 (expr -> expr AND expr .)
    INT_NUMBER      reduce using rule 25 (expr -> expr AND expr .)
    ID              reduce using rule 25 (expr -> expr AND expr .)
    NOT             reduce using rule 25 (expr -> expr AND expr .)
    $end            reduce using rule 25 (expr -> expr AND expr .)
    )               reduce using rule 25 (expr -> expr AND expr .)
    ,               reduce using rule 25 (expr -> expr AND expr .)
    ]               reduce using rule 25 (expr -> expr AND expr .)
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 94

    (26) expr -> expr LOWER_EQUAL expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    DIVIDE_ASSIGN   reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    TIMES_ASSIGN    reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    MINUS_ASSIGN    reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    PLUS_ASSIGN     reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    ASSIGN          reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    ;               reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    [               reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    (               reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    '               reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    :               reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    XOR             reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    OR              reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    AND             reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    LOWER_EQUAL     reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    LOWER           reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    GREATER         reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    NOT_EQUAL       reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    EQUAL           reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    FUNCTION        reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    {               reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    FOR             reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    WHILE           reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    IF              reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    CONTINUE        reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    BREAK           reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    RETURN          reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    PRINT           reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    ZEROS           reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    ONES            reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    EYE             reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    STRING          reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    FLOAT_NUMBER    reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    INT_NUMBER      reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    ID              reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    NOT             reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    $end            reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    )               reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    ,               reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    ]               reduce using rule 26 (expr -> expr LOWER_EQUAL expr .)
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 95

    (27) expr -> expr LOWER expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 27 (expr -> expr LOWER expr .)
    DIVIDE_ASSIGN   reduce using rule 27 (expr -> expr LOWER expr .)
    TIMES_ASSIGN    reduce using rule 27 (expr -> expr LOWER expr .)
    MINUS_ASSIGN    reduce using rule 27 (expr -> expr LOWER expr .)
    PLUS_ASSIGN     reduce using rule 27 (expr -> expr LOWER expr .)
    ASSIGN          reduce using rule 27 (expr -> expr LOWER expr .)
    ;               reduce using rule 27 (expr -> expr LOWER expr .)
    [               reduce using rule 27 (expr -> expr LOWER expr .)
    (               reduce using rule 27 (expr -> expr LOWER expr .)
    '               reduce using rule 27 (expr -> expr LOWER expr .)
    :               reduce using rule 27 (expr -> expr LOWER expr .)
    XOR             reduce using rule 27 (expr -> expr LOWER expr .)
    OR              reduce using rule 27 (expr -> expr LOWER expr .)
    AND             reduce using rule 27 (expr -> expr LOWER expr .)
    LOWER_EQUAL     reduce using rule 27 (expr -> expr LOWER expr .)
    LOWER           reduce using rule 27 (expr -> expr LOWER expr .)
    GREATER_EQUAL   reduce using rule 27 (expr -> expr LOWER expr .)
    GREATER         reduce using rule 27 (expr -> expr LOWER expr .)
    NOT_EQUAL       reduce using rule 27 (expr -> expr LOWER expr .)
    EQUAL           reduce using rule 27 (expr -> expr LOWER expr .)
    FUNCTION        reduce using rule 27 (expr -> expr LOWER expr .)
    {               reduce using rule 27 (expr -> expr LOWER expr .)
    FOR             reduce using rule 27 (expr -> expr LOWER expr .)
    WHILE           reduce using rule 27 (expr -> expr LOWER expr .)
    IF              reduce using rule 27 (expr -> expr LOWER expr .)
    CONTINUE        reduce using rule 27 (expr -> expr LOWER expr .)
    BREAK           reduce using rule 27 (expr -> expr LOWER expr .)
    RETURN          reduce using rule 27 (expr -> expr LOWER expr .)
    PRINT           reduce using rule 27 (expr -> expr LOWER expr .)
    ZEROS           reduce using rule 27 (expr -> expr LOWER expr .)
    ONES            reduce using rule 27 (expr -> expr LOWER expr .)
    EYE             reduce using rule 27 (expr -> expr LOWER expr .)
    STRING          reduce using rule 27 (expr -> expr LOWER expr .)
    FLOAT_NUMBER    reduce using rule 27 (expr -> expr LOWER expr .)
    INT_NUMBER      reduce using rule 27 (expr -> expr LOWER expr .)
    ID              reduce using rule 27 (expr -> expr LOWER expr .)
    NOT             reduce using rule 27 (expr -> expr LOWER expr .)
    $end            reduce using rule 27 (expr -> expr LOWER expr .)
    )               reduce using rule 27 (expr -> expr LOWER expr .)
    ,               reduce using rule 27 (expr -> expr LOWER expr .)
    ]               reduce using rule 27 (expr -> expr LOWER expr .)
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 96

    (28) expr -> expr GREATER_EQUAL expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    DIVIDE_ASSIGN   reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    TIMES_ASSIGN    reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    MINUS_ASSIGN    reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    PLUS_ASSIGN     reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    ASSIGN          reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    ;               reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    [               reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    (               reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    '               reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    :               reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    XOR             reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    OR              reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    AND             reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    LOWER_EQUAL     reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    LOWER           reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    GREATER         reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    NOT_EQUAL       reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    EQUAL           reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    FUNCTION        reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    {               reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    FOR             reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    WHILE           reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    IF              reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    CONTINUE        reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    BREAK           reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    RETURN          reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    PRINT           reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    ZEROS           reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    ONES            reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    EYE             reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    STRING          reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    FLOAT_NUMBER    reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    INT_NUMBER      reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    ID              reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    NOT             reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    $end            reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    )               reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    ,               reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    ]               reduce using rule 28 (expr -> expr GREATER_EQUAL expr .)
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 97

    (29) expr -> expr GREATER expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 29 (expr -> expr GREATER expr .)
    DIVIDE_ASSIGN   reduce using rule 29 (expr -> expr GREATER expr .)
    TIMES_ASSIGN    reduce using rule 29 (expr -> expr GREATER expr .)
    MINUS_ASSIGN    reduce using rule 29 (expr -> expr GREATER expr .)
    PLUS_ASSIGN     reduce using rule 29 (expr -> expr GREATER expr .)
    ASSIGN          reduce using rule 29 (expr -> expr GREATER expr .)
    ;               reduce using rule 29 (expr -> expr GREATER expr .)
    [               reduce using rule 29 (expr -> expr GREATER expr .)
    (               reduce using rule 29 (expr -> expr GREATER expr .)
    '               reduce using rule 29 (expr -> expr GREATER expr .)
    :               reduce using rule 29 (expr -> expr GREATER expr .)
    XOR             reduce using rule 29 (expr -> expr GREATER expr .)
    OR              reduce using rule 29 (expr -> expr GREATER expr .)
    AND             reduce using rule 29 (expr -> expr GREATER expr .)
    LOWER_EQUAL     reduce using rule 29 (expr -> expr GREATER expr .)
    LOWER           reduce using rule 29 (expr -> expr GREATER expr .)
    GREATER_EQUAL   reduce using rule 29 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 29 (expr -> expr GREATER expr .)
    NOT_EQUAL       reduce using rule 29 (expr -> expr GREATER expr .)
    EQUAL           reduce using rule 29 (expr -> expr GREATER expr .)
    FUNCTION        reduce using rule 29 (expr -> expr GREATER expr .)
    {               reduce using rule 29 (expr -> expr GREATER expr .)
    FOR             reduce using rule 29 (expr -> expr GREATER expr .)
    WHILE           reduce using rule 29 (expr -> expr GREATER expr .)
    IF              reduce using rule 29 (expr -> expr GREATER expr .)
    CONTINUE        reduce using rule 29 (expr -> expr GREATER expr .)
    BREAK           reduce using rule 29 (expr -> expr GREATER expr .)
    RETURN          reduce using rule 29 (expr -> expr GREATER expr .)
    PRINT           reduce using rule 29 (expr -> expr GREATER expr .)
    ZEROS           reduce using rule 29 (expr -> expr GREATER expr .)
    ONES            reduce using rule 29 (expr -> expr GREATER expr .)
    EYE             reduce using rule 29 (expr -> expr GREATER expr .)
    STRING          reduce using rule 29 (expr -> expr GREATER expr .)
    FLOAT_NUMBER    reduce using rule 29 (expr -> expr GREATER expr .)
    INT_NUMBER      reduce using rule 29 (expr -> expr GREATER expr .)
    ID              reduce using rule 29 (expr -> expr GREATER expr .)
    NOT             reduce using rule 29 (expr -> expr GREATER expr .)
    $end            reduce using rule 29 (expr -> expr GREATER expr .)
    )               reduce using rule 29 (expr -> expr GREATER expr .)
    ,               reduce using rule 29 (expr -> expr GREATER expr .)
    ]               reduce using rule 29 (expr -> expr GREATER expr .)
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 98

    (30) expr -> expr NOT_EQUAL expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    DIVIDE_ASSIGN   reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    TIMES_ASSIGN    reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    MINUS_ASSIGN    reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    PLUS_ASSIGN     reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    ASSIGN          reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    ;               reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    [               reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    (               reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    '               reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    :               reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    XOR             reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    OR              reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    AND             reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    LOWER_EQUAL     reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    LOWER           reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    GREATER         reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    NOT_EQUAL       reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    EQUAL           reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    FUNCTION        reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    {               reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    FOR             reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    WHILE           reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    IF              reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    CONTINUE        reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    BREAK           reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    RETURN          reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    PRINT           reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    ZEROS           reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    ONES            reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    EYE             reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    STRING          reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    FLOAT_NUMBER    reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    INT_NUMBER      reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    ID              reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    NOT             reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    $end            reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    )               reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    ,               reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    ]               reduce using rule 30 (expr -> expr NOT_EQUAL expr .)
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 99

    (31) expr -> expr EQUAL expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 31 (expr -> expr EQUAL expr .)
    DIVIDE_ASSIGN   reduce using rule 31 (expr -> expr EQUAL expr .)
    TIMES_ASSIGN    reduce using rule 31 (expr -> expr EQUAL expr .)
    MINUS_ASSIGN    reduce using rule 31 (expr -> expr EQUAL expr .)
    PLUS_ASSIGN     reduce using rule 31 (expr -> expr EQUAL expr .)
    ASSIGN          reduce using rule 31 (expr -> expr EQUAL expr .)
    ;               reduce using rule 31 (expr -> expr EQUAL expr .)
    [               reduce using rule 31 (expr -> expr EQUAL expr .)
    (               reduce using rule 31 (expr -> expr EQUAL expr .)
    '               reduce using rule 31 (expr -> expr EQUAL expr .)
    :               reduce using rule 31 (expr -> expr EQUAL expr .)
    XOR             reduce using rule 31 (expr -> expr EQUAL expr .)
    OR              reduce using rule 31 (expr -> expr EQUAL expr .)
    AND             reduce using rule 31 (expr -> expr EQUAL expr .)
    LOWER_EQUAL     reduce using rule 31 (expr -> expr EQUAL expr .)
    LOWER           reduce using rule 31 (expr -> expr EQUAL expr .)
    GREATER_EQUAL   reduce using rule 31 (expr -> expr EQUAL expr .)
    GREATER         reduce using rule 31 (expr -> expr EQUAL expr .)
    NOT_EQUAL       reduce using rule 31 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 31 (expr -> expr EQUAL expr .)
    FUNCTION        reduce using rule 31 (expr -> expr EQUAL expr .)
    {               reduce using rule 31 (expr -> expr EQUAL expr .)
    FOR             reduce using rule 31 (expr -> expr EQUAL expr .)
    WHILE           reduce using rule 31 (expr -> expr EQUAL expr .)
    IF              reduce using rule 31 (expr -> expr EQUAL expr .)
    CONTINUE        reduce using rule 31 (expr -> expr EQUAL expr .)
    BREAK           reduce using rule 31 (expr -> expr EQUAL expr .)
    RETURN          reduce using rule 31 (expr -> expr EQUAL expr .)
    PRINT           reduce using rule 31 (expr -> expr EQUAL expr .)
    ZEROS           reduce using rule 31 (expr -> expr EQUAL expr .)
    ONES            reduce using rule 31 (expr -> expr EQUAL expr .)
    EYE             reduce using rule 31 (expr -> expr EQUAL expr .)
    STRING          reduce using rule 31 (expr -> expr EQUAL expr .)
    FLOAT_NUMBER    reduce using rule 31 (expr -> expr EQUAL expr .)
    INT_NUMBER      reduce using rule 31 (expr -> expr EQUAL expr .)
    ID              reduce using rule 31 (expr -> expr EQUAL expr .)
    NOT             reduce using rule 31 (expr -> expr EQUAL expr .)
    $end            reduce using rule 31 (expr -> expr EQUAL expr .)
    )               reduce using rule 31 (expr -> expr EQUAL expr .)
    ,               reduce using rule 31 (expr -> expr EQUAL expr .)
    ]               reduce using rule 31 (expr -> expr EQUAL expr .)
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 100

    (32) expr -> expr DOT_REMAINDER expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    DIVIDE_ASSIGN   reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    TIMES_ASSIGN    reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    MINUS_ASSIGN    reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    PLUS_ASSIGN     reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    ASSIGN          reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    ;               reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    [               reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    (               reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    '               reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    :               reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    XOR             reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    OR              reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    AND             reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    LOWER_EQUAL     reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    LOWER           reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    GREATER_EQUAL   reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    GREATER         reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    NOT_EQUAL       reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    EQUAL           reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    DOT_REMAINDER   reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    DOT_DIVIDE      reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    DOT_TIMES       reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    DOT_MINUS       reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    DOT_PLUS        reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    REMAINDER       reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    DIVIDE          reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    TIMES           reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    MINUS           reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    PLUS            reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    FUNCTION        reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    {               reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    FOR             reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    WHILE           reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    IF              reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    CONTINUE        reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    BREAK           reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    RETURN          reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    PRINT           reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    ZEROS           reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    ONES            reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    EYE             reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    STRING          reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    FLOAT_NUMBER    reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    INT_NUMBER      reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    ID              reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    NOT             reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    $end            reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    )               reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    ,               reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)
    ]               reduce using rule 32 (expr -> expr DOT_REMAINDER expr .)


state 101

    (33) expr -> expr DOT_DIVIDE expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    DIVIDE_ASSIGN   reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    TIMES_ASSIGN    reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    MINUS_ASSIGN    reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    PLUS_ASSIGN     reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    ASSIGN          reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    ;               reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    [               reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    (               reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    '               reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    :               reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    XOR             reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    OR              reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    AND             reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    LOWER_EQUAL     reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    LOWER           reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    GREATER_EQUAL   reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    GREATER         reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    NOT_EQUAL       reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    EQUAL           reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    DOT_REMAINDER   reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    DOT_DIVIDE      reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    DOT_TIMES       reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    DOT_MINUS       reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    DOT_PLUS        reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    REMAINDER       reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    DIVIDE          reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    TIMES           reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    MINUS           reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    PLUS            reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    FUNCTION        reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    {               reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    FOR             reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    WHILE           reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    IF              reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    CONTINUE        reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    BREAK           reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    RETURN          reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    PRINT           reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    ZEROS           reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    ONES            reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    EYE             reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    STRING          reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    FLOAT_NUMBER    reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    INT_NUMBER      reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    ID              reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    NOT             reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    $end            reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    )               reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    ,               reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)
    ]               reduce using rule 33 (expr -> expr DOT_DIVIDE expr .)


state 102

    (34) expr -> expr DOT_TIMES expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    DIVIDE_ASSIGN   reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    TIMES_ASSIGN    reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    MINUS_ASSIGN    reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    PLUS_ASSIGN     reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    ASSIGN          reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    ;               reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    [               reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    (               reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    '               reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    :               reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    XOR             reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    OR              reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    AND             reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    LOWER_EQUAL     reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    LOWER           reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    GREATER_EQUAL   reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    GREATER         reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    NOT_EQUAL       reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    EQUAL           reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    DOT_REMAINDER   reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    DOT_DIVIDE      reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    DOT_TIMES       reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    DOT_MINUS       reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    DOT_PLUS        reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    REMAINDER       reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    DIVIDE          reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    TIMES           reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    MINUS           reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    PLUS            reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    FUNCTION        reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    {               reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    FOR             reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    WHILE           reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    IF              reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    CONTINUE        reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    BREAK           reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    RETURN          reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    PRINT           reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    ZEROS           reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    ONES            reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    EYE             reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    STRING          reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    FLOAT_NUMBER    reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    INT_NUMBER      reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    ID              reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    NOT             reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    $end            reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    )               reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    ,               reduce using rule 34 (expr -> expr DOT_TIMES expr .)
    ]               reduce using rule 34 (expr -> expr DOT_TIMES expr .)


state 103

    (35) expr -> expr DOT_MINUS expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    DIVIDE_ASSIGN   reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    TIMES_ASSIGN    reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    MINUS_ASSIGN    reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    PLUS_ASSIGN     reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    ASSIGN          reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    ;               reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    [               reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    (               reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    '               reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    :               reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    XOR             reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    OR              reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    AND             reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    LOWER_EQUAL     reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    LOWER           reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    GREATER_EQUAL   reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    GREATER         reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    NOT_EQUAL       reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    EQUAL           reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    DOT_MINUS       reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    DOT_PLUS        reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    MINUS           reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    PLUS            reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    FUNCTION        reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    {               reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    FOR             reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    WHILE           reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    IF              reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    CONTINUE        reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    BREAK           reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    RETURN          reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    PRINT           reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    ZEROS           reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    ONES            reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    EYE             reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    STRING          reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    FLOAT_NUMBER    reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    INT_NUMBER      reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    ID              reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    NOT             reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    $end            reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    )               reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    ,               reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    ]               reduce using rule 35 (expr -> expr DOT_MINUS expr .)
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56


state 104

    (36) expr -> expr DOT_PLUS expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    DIVIDE_ASSIGN   reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    TIMES_ASSIGN    reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    MINUS_ASSIGN    reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    PLUS_ASSIGN     reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    ASSIGN          reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    ;               reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    [               reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    (               reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    '               reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    :               reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    XOR             reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    OR              reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    AND             reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    LOWER_EQUAL     reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    LOWER           reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    GREATER_EQUAL   reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    GREATER         reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    NOT_EQUAL       reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    EQUAL           reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    DOT_MINUS       reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    DOT_PLUS        reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    MINUS           reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    PLUS            reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    FUNCTION        reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    {               reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    FOR             reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    WHILE           reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    IF              reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    CONTINUE        reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    BREAK           reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    RETURN          reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    PRINT           reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    ZEROS           reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    ONES            reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    EYE             reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    STRING          reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    FLOAT_NUMBER    reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    INT_NUMBER      reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    ID              reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    NOT             reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    $end            reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    )               reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    ,               reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    ]               reduce using rule 36 (expr -> expr DOT_PLUS expr .)
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56


state 105

    (37) expr -> expr REMAINDER expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 37 (expr -> expr REMAINDER expr .)
    DIVIDE_ASSIGN   reduce using rule 37 (expr -> expr REMAINDER expr .)
    TIMES_ASSIGN    reduce using rule 37 (expr -> expr REMAINDER expr .)
    MINUS_ASSIGN    reduce using rule 37 (expr -> expr REMAINDER expr .)
    PLUS_ASSIGN     reduce using rule 37 (expr -> expr REMAINDER expr .)
    ASSIGN          reduce using rule 37 (expr -> expr REMAINDER expr .)
    ;               reduce using rule 37 (expr -> expr REMAINDER expr .)
    [               reduce using rule 37 (expr -> expr REMAINDER expr .)
    (               reduce using rule 37 (expr -> expr REMAINDER expr .)
    '               reduce using rule 37 (expr -> expr REMAINDER expr .)
    :               reduce using rule 37 (expr -> expr REMAINDER expr .)
    XOR             reduce using rule 37 (expr -> expr REMAINDER expr .)
    OR              reduce using rule 37 (expr -> expr REMAINDER expr .)
    AND             reduce using rule 37 (expr -> expr REMAINDER expr .)
    LOWER_EQUAL     reduce using rule 37 (expr -> expr REMAINDER expr .)
    LOWER           reduce using rule 37 (expr -> expr REMAINDER expr .)
    GREATER_EQUAL   reduce using rule 37 (expr -> expr REMAINDER expr .)
    GREATER         reduce using rule 37 (expr -> expr REMAINDER expr .)
    NOT_EQUAL       reduce using rule 37 (expr -> expr REMAINDER expr .)
    EQUAL           reduce using rule 37 (expr -> expr REMAINDER expr .)
    DOT_REMAINDER   reduce using rule 37 (expr -> expr REMAINDER expr .)
    DOT_DIVIDE      reduce using rule 37 (expr -> expr REMAINDER expr .)
    DOT_TIMES       reduce using rule 37 (expr -> expr REMAINDER expr .)
    DOT_MINUS       reduce using rule 37 (expr -> expr REMAINDER expr .)
    DOT_PLUS        reduce using rule 37 (expr -> expr REMAINDER expr .)
    REMAINDER       reduce using rule 37 (expr -> expr REMAINDER expr .)
    DIVIDE          reduce using rule 37 (expr -> expr REMAINDER expr .)
    TIMES           reduce using rule 37 (expr -> expr REMAINDER expr .)
    MINUS           reduce using rule 37 (expr -> expr REMAINDER expr .)
    PLUS            reduce using rule 37 (expr -> expr REMAINDER expr .)
    FUNCTION        reduce using rule 37 (expr -> expr REMAINDER expr .)
    {               reduce using rule 37 (expr -> expr REMAINDER expr .)
    FOR             reduce using rule 37 (expr -> expr REMAINDER expr .)
    WHILE           reduce using rule 37 (expr -> expr REMAINDER expr .)
    IF              reduce using rule 37 (expr -> expr REMAINDER expr .)
    CONTINUE        reduce using rule 37 (expr -> expr REMAINDER expr .)
    BREAK           reduce using rule 37 (expr -> expr REMAINDER expr .)
    RETURN          reduce using rule 37 (expr -> expr REMAINDER expr .)
    PRINT           reduce using rule 37 (expr -> expr REMAINDER expr .)
    ZEROS           reduce using rule 37 (expr -> expr REMAINDER expr .)
    ONES            reduce using rule 37 (expr -> expr REMAINDER expr .)
    EYE             reduce using rule 37 (expr -> expr REMAINDER expr .)
    STRING          reduce using rule 37 (expr -> expr REMAINDER expr .)
    FLOAT_NUMBER    reduce using rule 37 (expr -> expr REMAINDER expr .)
    INT_NUMBER      reduce using rule 37 (expr -> expr REMAINDER expr .)
    ID              reduce using rule 37 (expr -> expr REMAINDER expr .)
    NOT             reduce using rule 37 (expr -> expr REMAINDER expr .)
    $end            reduce using rule 37 (expr -> expr REMAINDER expr .)
    )               reduce using rule 37 (expr -> expr REMAINDER expr .)
    ,               reduce using rule 37 (expr -> expr REMAINDER expr .)
    ]               reduce using rule 37 (expr -> expr REMAINDER expr .)


state 106

    (38) expr -> expr DIVIDE expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 38 (expr -> expr DIVIDE expr .)
    DIVIDE_ASSIGN   reduce using rule 38 (expr -> expr DIVIDE expr .)
    TIMES_ASSIGN    reduce using rule 38 (expr -> expr DIVIDE expr .)
    MINUS_ASSIGN    reduce using rule 38 (expr -> expr DIVIDE expr .)
    PLUS_ASSIGN     reduce using rule 38 (expr -> expr DIVIDE expr .)
    ASSIGN          reduce using rule 38 (expr -> expr DIVIDE expr .)
    ;               reduce using rule 38 (expr -> expr DIVIDE expr .)
    [               reduce using rule 38 (expr -> expr DIVIDE expr .)
    (               reduce using rule 38 (expr -> expr DIVIDE expr .)
    '               reduce using rule 38 (expr -> expr DIVIDE expr .)
    :               reduce using rule 38 (expr -> expr DIVIDE expr .)
    XOR             reduce using rule 38 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 38 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 38 (expr -> expr DIVIDE expr .)
    LOWER_EQUAL     reduce using rule 38 (expr -> expr DIVIDE expr .)
    LOWER           reduce using rule 38 (expr -> expr DIVIDE expr .)
    GREATER_EQUAL   reduce using rule 38 (expr -> expr DIVIDE expr .)
    GREATER         reduce using rule 38 (expr -> expr DIVIDE expr .)
    NOT_EQUAL       reduce using rule 38 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 38 (expr -> expr DIVIDE expr .)
    DOT_REMAINDER   reduce using rule 38 (expr -> expr DIVIDE expr .)
    DOT_DIVIDE      reduce using rule 38 (expr -> expr DIVIDE expr .)
    DOT_TIMES       reduce using rule 38 (expr -> expr DIVIDE expr .)
    DOT_MINUS       reduce using rule 38 (expr -> expr DIVIDE expr .)
    DOT_PLUS        reduce using rule 38 (expr -> expr DIVIDE expr .)
    REMAINDER       reduce using rule 38 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 38 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 38 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 38 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 38 (expr -> expr DIVIDE expr .)
    FUNCTION        reduce using rule 38 (expr -> expr DIVIDE expr .)
    {               reduce using rule 38 (expr -> expr DIVIDE expr .)
    FOR             reduce using rule 38 (expr -> expr DIVIDE expr .)
    WHILE           reduce using rule 38 (expr -> expr DIVIDE expr .)
    IF              reduce using rule 38 (expr -> expr DIVIDE expr .)
    CONTINUE        reduce using rule 38 (expr -> expr DIVIDE expr .)
    BREAK           reduce using rule 38 (expr -> expr DIVIDE expr .)
    RETURN          reduce using rule 38 (expr -> expr DIVIDE expr .)
    PRINT           reduce using rule 38 (expr -> expr DIVIDE expr .)
    ZEROS           reduce using rule 38 (expr -> expr DIVIDE expr .)
    ONES            reduce using rule 38 (expr -> expr DIVIDE expr .)
    EYE             reduce using rule 38 (expr -> expr DIVIDE expr .)
    STRING          reduce using rule 38 (expr -> expr DIVIDE expr .)
    FLOAT_NUMBER    reduce using rule 38 (expr -> expr DIVIDE expr .)
    INT_NUMBER      reduce using rule 38 (expr -> expr DIVIDE expr .)
    ID              reduce using rule 38 (expr -> expr DIVIDE expr .)
    NOT             reduce using rule 38 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 38 (expr -> expr DIVIDE expr .)
    )               reduce using rule 38 (expr -> expr DIVIDE expr .)
    ,               reduce using rule 38 (expr -> expr DIVIDE expr .)
    ]               reduce using rule 38 (expr -> expr DIVIDE expr .)


state 107

    (39) expr -> expr TIMES expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 39 (expr -> expr TIMES expr .)
    DIVIDE_ASSIGN   reduce using rule 39 (expr -> expr TIMES expr .)
    TIMES_ASSIGN    reduce using rule 39 (expr -> expr TIMES expr .)
    MINUS_ASSIGN    reduce using rule 39 (expr -> expr TIMES expr .)
    PLUS_ASSIGN     reduce using rule 39 (expr -> expr TIMES expr .)
    ASSIGN          reduce using rule 39 (expr -> expr TIMES expr .)
    ;               reduce using rule 39 (expr -> expr TIMES expr .)
    [               reduce using rule 39 (expr -> expr TIMES expr .)
    (               reduce using rule 39 (expr -> expr TIMES expr .)
    '               reduce using rule 39 (expr -> expr TIMES expr .)
    :               reduce using rule 39 (expr -> expr TIMES expr .)
    XOR             reduce using rule 39 (expr -> expr TIMES expr .)
    OR              reduce using rule 39 (expr -> expr TIMES expr .)
    AND             reduce using rule 39 (expr -> expr TIMES expr .)
    LOWER_EQUAL     reduce using rule 39 (expr -> expr TIMES expr .)
    LOWER           reduce using rule 39 (expr -> expr TIMES expr .)
    GREATER_EQUAL   reduce using rule 39 (expr -> expr TIMES expr .)
    GREATER         reduce using rule 39 (expr -> expr TIMES expr .)
    NOT_EQUAL       reduce using rule 39 (expr -> expr TIMES expr .)
    EQUAL           reduce using rule 39 (expr -> expr TIMES expr .)
    DOT_REMAINDER   reduce using rule 39 (expr -> expr TIMES expr .)
    DOT_DIVIDE      reduce using rule 39 (expr -> expr TIMES expr .)
    DOT_TIMES       reduce using rule 39 (expr -> expr TIMES expr .)
    DOT_MINUS       reduce using rule 39 (expr -> expr TIMES expr .)
    DOT_PLUS        reduce using rule 39 (expr -> expr TIMES expr .)
    REMAINDER       reduce using rule 39 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 39 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 39 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 39 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 39 (expr -> expr TIMES expr .)
    FUNCTION        reduce using rule 39 (expr -> expr TIMES expr .)
    {               reduce using rule 39 (expr -> expr TIMES expr .)
    FOR             reduce using rule 39 (expr -> expr TIMES expr .)
    WHILE           reduce using rule 39 (expr -> expr TIMES expr .)
    IF              reduce using rule 39 (expr -> expr TIMES expr .)
    CONTINUE        reduce using rule 39 (expr -> expr TIMES expr .)
    BREAK           reduce using rule 39 (expr -> expr TIMES expr .)
    RETURN          reduce using rule 39 (expr -> expr TIMES expr .)
    PRINT           reduce using rule 39 (expr -> expr TIMES expr .)
    ZEROS           reduce using rule 39 (expr -> expr TIMES expr .)
    ONES            reduce using rule 39 (expr -> expr TIMES expr .)
    EYE             reduce using rule 39 (expr -> expr TIMES expr .)
    STRING          reduce using rule 39 (expr -> expr TIMES expr .)
    FLOAT_NUMBER    reduce using rule 39 (expr -> expr TIMES expr .)
    INT_NUMBER      reduce using rule 39 (expr -> expr TIMES expr .)
    ID              reduce using rule 39 (expr -> expr TIMES expr .)
    NOT             reduce using rule 39 (expr -> expr TIMES expr .)
    $end            reduce using rule 39 (expr -> expr TIMES expr .)
    )               reduce using rule 39 (expr -> expr TIMES expr .)
    ,               reduce using rule 39 (expr -> expr TIMES expr .)
    ]               reduce using rule 39 (expr -> expr TIMES expr .)


state 108

    (40) expr -> expr MINUS expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 40 (expr -> expr MINUS expr .)
    DIVIDE_ASSIGN   reduce using rule 40 (expr -> expr MINUS expr .)
    TIMES_ASSIGN    reduce using rule 40 (expr -> expr MINUS expr .)
    MINUS_ASSIGN    reduce using rule 40 (expr -> expr MINUS expr .)
    PLUS_ASSIGN     reduce using rule 40 (expr -> expr MINUS expr .)
    ASSIGN          reduce using rule 40 (expr -> expr MINUS expr .)
    ;               reduce using rule 40 (expr -> expr MINUS expr .)
    [               reduce using rule 40 (expr -> expr MINUS expr .)
    (               reduce using rule 40 (expr -> expr MINUS expr .)
    '               reduce using rule 40 (expr -> expr MINUS expr .)
    :               reduce using rule 40 (expr -> expr MINUS expr .)
    XOR             reduce using rule 40 (expr -> expr MINUS expr .)
    OR              reduce using rule 40 (expr -> expr MINUS expr .)
    AND             reduce using rule 40 (expr -> expr MINUS expr .)
    LOWER_EQUAL     reduce using rule 40 (expr -> expr MINUS expr .)
    LOWER           reduce using rule 40 (expr -> expr MINUS expr .)
    GREATER_EQUAL   reduce using rule 40 (expr -> expr MINUS expr .)
    GREATER         reduce using rule 40 (expr -> expr MINUS expr .)
    NOT_EQUAL       reduce using rule 40 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 40 (expr -> expr MINUS expr .)
    DOT_MINUS       reduce using rule 40 (expr -> expr MINUS expr .)
    DOT_PLUS        reduce using rule 40 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 40 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 40 (expr -> expr MINUS expr .)
    FUNCTION        reduce using rule 40 (expr -> expr MINUS expr .)
    {               reduce using rule 40 (expr -> expr MINUS expr .)
    FOR             reduce using rule 40 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 40 (expr -> expr MINUS expr .)
    IF              reduce using rule 40 (expr -> expr MINUS expr .)
    CONTINUE        reduce using rule 40 (expr -> expr MINUS expr .)
    BREAK           reduce using rule 40 (expr -> expr MINUS expr .)
    RETURN          reduce using rule 40 (expr -> expr MINUS expr .)
    PRINT           reduce using rule 40 (expr -> expr MINUS expr .)
    ZEROS           reduce using rule 40 (expr -> expr MINUS expr .)
    ONES            reduce using rule 40 (expr -> expr MINUS expr .)
    EYE             reduce using rule 40 (expr -> expr MINUS expr .)
    STRING          reduce using rule 40 (expr -> expr MINUS expr .)
    FLOAT_NUMBER    reduce using rule 40 (expr -> expr MINUS expr .)
    INT_NUMBER      reduce using rule 40 (expr -> expr MINUS expr .)
    ID              reduce using rule 40 (expr -> expr MINUS expr .)
    NOT             reduce using rule 40 (expr -> expr MINUS expr .)
    $end            reduce using rule 40 (expr -> expr MINUS expr .)
    )               reduce using rule 40 (expr -> expr MINUS expr .)
    ,               reduce using rule 40 (expr -> expr MINUS expr .)
    ]               reduce using rule 40 (expr -> expr MINUS expr .)
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56


state 109

    (41) expr -> expr PLUS expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 41 (expr -> expr PLUS expr .)
    DIVIDE_ASSIGN   reduce using rule 41 (expr -> expr PLUS expr .)
    TIMES_ASSIGN    reduce using rule 41 (expr -> expr PLUS expr .)
    MINUS_ASSIGN    reduce using rule 41 (expr -> expr PLUS expr .)
    PLUS_ASSIGN     reduce using rule 41 (expr -> expr PLUS expr .)
    ASSIGN          reduce using rule 41 (expr -> expr PLUS expr .)
    ;               reduce using rule 41 (expr -> expr PLUS expr .)
    [               reduce using rule 41 (expr -> expr PLUS expr .)
    (               reduce using rule 41 (expr -> expr PLUS expr .)
    '               reduce using rule 41 (expr -> expr PLUS expr .)
    :               reduce using rule 41 (expr -> expr PLUS expr .)
    XOR             reduce using rule 41 (expr -> expr PLUS expr .)
    OR              reduce using rule 41 (expr -> expr PLUS expr .)
    AND             reduce using rule 41 (expr -> expr PLUS expr .)
    LOWER_EQUAL     reduce using rule 41 (expr -> expr PLUS expr .)
    LOWER           reduce using rule 41 (expr -> expr PLUS expr .)
    GREATER_EQUAL   reduce using rule 41 (expr -> expr PLUS expr .)
    GREATER         reduce using rule 41 (expr -> expr PLUS expr .)
    NOT_EQUAL       reduce using rule 41 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 41 (expr -> expr PLUS expr .)
    DOT_MINUS       reduce using rule 41 (expr -> expr PLUS expr .)
    DOT_PLUS        reduce using rule 41 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 41 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 41 (expr -> expr PLUS expr .)
    FUNCTION        reduce using rule 41 (expr -> expr PLUS expr .)
    {               reduce using rule 41 (expr -> expr PLUS expr .)
    FOR             reduce using rule 41 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 41 (expr -> expr PLUS expr .)
    IF              reduce using rule 41 (expr -> expr PLUS expr .)
    CONTINUE        reduce using rule 41 (expr -> expr PLUS expr .)
    BREAK           reduce using rule 41 (expr -> expr PLUS expr .)
    RETURN          reduce using rule 41 (expr -> expr PLUS expr .)
    PRINT           reduce using rule 41 (expr -> expr PLUS expr .)
    ZEROS           reduce using rule 41 (expr -> expr PLUS expr .)
    ONES            reduce using rule 41 (expr -> expr PLUS expr .)
    EYE             reduce using rule 41 (expr -> expr PLUS expr .)
    STRING          reduce using rule 41 (expr -> expr PLUS expr .)
    FLOAT_NUMBER    reduce using rule 41 (expr -> expr PLUS expr .)
    INT_NUMBER      reduce using rule 41 (expr -> expr PLUS expr .)
    ID              reduce using rule 41 (expr -> expr PLUS expr .)
    NOT             reduce using rule 41 (expr -> expr PLUS expr .)
    $end            reduce using rule 41 (expr -> expr PLUS expr .)
    )               reduce using rule 41 (expr -> expr PLUS expr .)
    ,               reduce using rule 41 (expr -> expr PLUS expr .)
    ]               reduce using rule 41 (expr -> expr PLUS expr .)
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56


state 110

    (66) function -> FUNCTION ID ( . ) statement
    (67) function -> FUNCTION ID ( . parameter_list ) statement
    (42) parameter_list -> . expr
    (43) parameter_list -> . parameter_list , expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    )               shift and go to state 134
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    parameter_list                 shift and go to state 135
    expr                           shift and go to state 70
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 111

    (18) expr -> ( expr ) .
    REMAINDER_ASSIGN reduce using rule 18 (expr -> ( expr ) .)
    DIVIDE_ASSIGN   reduce using rule 18 (expr -> ( expr ) .)
    TIMES_ASSIGN    reduce using rule 18 (expr -> ( expr ) .)
    MINUS_ASSIGN    reduce using rule 18 (expr -> ( expr ) .)
    PLUS_ASSIGN     reduce using rule 18 (expr -> ( expr ) .)
    ASSIGN          reduce using rule 18 (expr -> ( expr ) .)
    ;               reduce using rule 18 (expr -> ( expr ) .)
    [               reduce using rule 18 (expr -> ( expr ) .)
    (               reduce using rule 18 (expr -> ( expr ) .)
    '               reduce using rule 18 (expr -> ( expr ) .)
    :               reduce using rule 18 (expr -> ( expr ) .)
    XOR             reduce using rule 18 (expr -> ( expr ) .)
    OR              reduce using rule 18 (expr -> ( expr ) .)
    AND             reduce using rule 18 (expr -> ( expr ) .)
    LOWER_EQUAL     reduce using rule 18 (expr -> ( expr ) .)
    LOWER           reduce using rule 18 (expr -> ( expr ) .)
    GREATER_EQUAL   reduce using rule 18 (expr -> ( expr ) .)
    GREATER         reduce using rule 18 (expr -> ( expr ) .)
    NOT_EQUAL       reduce using rule 18 (expr -> ( expr ) .)
    EQUAL           reduce using rule 18 (expr -> ( expr ) .)
    DOT_REMAINDER   reduce using rule 18 (expr -> ( expr ) .)
    DOT_DIVIDE      reduce using rule 18 (expr -> ( expr ) .)
    DOT_TIMES       reduce using rule 18 (expr -> ( expr ) .)
    DOT_MINUS       reduce using rule 18 (expr -> ( expr ) .)
    DOT_PLUS        reduce using rule 18 (expr -> ( expr ) .)
    REMAINDER       reduce using rule 18 (expr -> ( expr ) .)
    DIVIDE          reduce using rule 18 (expr -> ( expr ) .)
    TIMES           reduce using rule 18 (expr -> ( expr ) .)
    MINUS           reduce using rule 18 (expr -> ( expr ) .)
    PLUS            reduce using rule 18 (expr -> ( expr ) .)
    FUNCTION        reduce using rule 18 (expr -> ( expr ) .)
    {               reduce using rule 18 (expr -> ( expr ) .)
    FOR             reduce using rule 18 (expr -> ( expr ) .)
    WHILE           reduce using rule 18 (expr -> ( expr ) .)
    IF              reduce using rule 18 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 18 (expr -> ( expr ) .)
    BREAK           reduce using rule 18 (expr -> ( expr ) .)
    RETURN          reduce using rule 18 (expr -> ( expr ) .)
    PRINT           reduce using rule 18 (expr -> ( expr ) .)
    ZEROS           reduce using rule 18 (expr -> ( expr ) .)
    ONES            reduce using rule 18 (expr -> ( expr ) .)
    EYE             reduce using rule 18 (expr -> ( expr ) .)
    STRING          reduce using rule 18 (expr -> ( expr ) .)
    FLOAT_NUMBER    reduce using rule 18 (expr -> ( expr ) .)
    INT_NUMBER      reduce using rule 18 (expr -> ( expr ) .)
    ID              reduce using rule 18 (expr -> ( expr ) .)
    NOT             reduce using rule 18 (expr -> ( expr ) .)
    $end            reduce using rule 18 (expr -> ( expr ) .)
    )               reduce using rule 18 (expr -> ( expr ) .)
    ,               reduce using rule 18 (expr -> ( expr ) .)
    ]               reduce using rule 18 (expr -> ( expr ) .)


state 112

    (48) statement -> { statement_series } .
    FUNCTION        reduce using rule 48 (statement -> { statement_series } .)
    {               reduce using rule 48 (statement -> { statement_series } .)
    FOR             reduce using rule 48 (statement -> { statement_series } .)
    WHILE           reduce using rule 48 (statement -> { statement_series } .)
    IF              reduce using rule 48 (statement -> { statement_series } .)
    CONTINUE        reduce using rule 48 (statement -> { statement_series } .)
    BREAK           reduce using rule 48 (statement -> { statement_series } .)
    RETURN          reduce using rule 48 (statement -> { statement_series } .)
    PRINT           reduce using rule 48 (statement -> { statement_series } .)
    ZEROS           reduce using rule 48 (statement -> { statement_series } .)
    ONES            reduce using rule 48 (statement -> { statement_series } .)
    EYE             reduce using rule 48 (statement -> { statement_series } .)
    STRING          reduce using rule 48 (statement -> { statement_series } .)
    FLOAT_NUMBER    reduce using rule 48 (statement -> { statement_series } .)
    INT_NUMBER      reduce using rule 48 (statement -> { statement_series } .)
    ID              reduce using rule 48 (statement -> { statement_series } .)
    (               reduce using rule 48 (statement -> { statement_series } .)
    NOT             reduce using rule 48 (statement -> { statement_series } .)
    MINUS           reduce using rule 48 (statement -> { statement_series } .)
    [               reduce using rule 48 (statement -> { statement_series } .)
    $end            reduce using rule 48 (statement -> { statement_series } .)
    }               reduce using rule 48 (statement -> { statement_series } .)
    ELSE            reduce using rule 48 (statement -> { statement_series } .)


state 113

    (64) statement_series -> statement_series statement .
    }               reduce using rule 64 (statement_series -> statement_series statement .)
    {               reduce using rule 64 (statement_series -> statement_series statement .)
    FOR             reduce using rule 64 (statement_series -> statement_series statement .)
    WHILE           reduce using rule 64 (statement_series -> statement_series statement .)
    IF              reduce using rule 64 (statement_series -> statement_series statement .)
    CONTINUE        reduce using rule 64 (statement_series -> statement_series statement .)
    BREAK           reduce using rule 64 (statement_series -> statement_series statement .)
    RETURN          reduce using rule 64 (statement_series -> statement_series statement .)
    PRINT           reduce using rule 64 (statement_series -> statement_series statement .)
    ZEROS           reduce using rule 64 (statement_series -> statement_series statement .)
    ONES            reduce using rule 64 (statement_series -> statement_series statement .)
    EYE             reduce using rule 64 (statement_series -> statement_series statement .)
    STRING          reduce using rule 64 (statement_series -> statement_series statement .)
    FLOAT_NUMBER    reduce using rule 64 (statement_series -> statement_series statement .)
    INT_NUMBER      reduce using rule 64 (statement_series -> statement_series statement .)
    ID              reduce using rule 64 (statement_series -> statement_series statement .)
    (               reduce using rule 64 (statement_series -> statement_series statement .)
    NOT             reduce using rule 64 (statement_series -> statement_series statement .)
    MINUS           reduce using rule 64 (statement_series -> statement_series statement .)
    [               reduce using rule 64 (statement_series -> statement_series statement .)


state 114

    (49) statement -> FOR ( ID . IN expr ) statement
    IN              shift and go to state 136


state 115

    (50) statement -> WHILE ( expr . ) statement
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    )               shift and go to state 137
    [               shift and go to state 36
    (               shift and go to state 37
    '               shift and go to state 38
    :               shift and go to state 39
    XOR             shift and go to state 40
    OR              shift and go to state 41
    AND             shift and go to state 42
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 116

    (51) statement -> IF ( expr . ) statement ELSE statement
    (52) statement -> IF ( expr . ) statement
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    )               shift and go to state 138
    [               shift and go to state 36
    (               shift and go to state 37
    '               shift and go to state 38
    :               shift and go to state 39
    XOR             shift and go to state 40
    OR              shift and go to state 41
    AND             shift and go to state 42
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 117

    (61) statement -> RETURN parameter_list ; .
    FUNCTION        reduce using rule 61 (statement -> RETURN parameter_list ; .)
    {               reduce using rule 61 (statement -> RETURN parameter_list ; .)
    FOR             reduce using rule 61 (statement -> RETURN parameter_list ; .)
    WHILE           reduce using rule 61 (statement -> RETURN parameter_list ; .)
    IF              reduce using rule 61 (statement -> RETURN parameter_list ; .)
    CONTINUE        reduce using rule 61 (statement -> RETURN parameter_list ; .)
    BREAK           reduce using rule 61 (statement -> RETURN parameter_list ; .)
    RETURN          reduce using rule 61 (statement -> RETURN parameter_list ; .)
    PRINT           reduce using rule 61 (statement -> RETURN parameter_list ; .)
    ZEROS           reduce using rule 61 (statement -> RETURN parameter_list ; .)
    ONES            reduce using rule 61 (statement -> RETURN parameter_list ; .)
    EYE             reduce using rule 61 (statement -> RETURN parameter_list ; .)
    STRING          reduce using rule 61 (statement -> RETURN parameter_list ; .)
    FLOAT_NUMBER    reduce using rule 61 (statement -> RETURN parameter_list ; .)
    INT_NUMBER      reduce using rule 61 (statement -> RETURN parameter_list ; .)
    ID              reduce using rule 61 (statement -> RETURN parameter_list ; .)
    (               reduce using rule 61 (statement -> RETURN parameter_list ; .)
    NOT             reduce using rule 61 (statement -> RETURN parameter_list ; .)
    MINUS           reduce using rule 61 (statement -> RETURN parameter_list ; .)
    [               reduce using rule 61 (statement -> RETURN parameter_list ; .)
    $end            reduce using rule 61 (statement -> RETURN parameter_list ; .)
    }               reduce using rule 61 (statement -> RETURN parameter_list ; .)
    ELSE            reduce using rule 61 (statement -> RETURN parameter_list ; .)


state 118

    (43) parameter_list -> parameter_list , . expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 139
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 119

    (62) statement -> PRINT parameter_list ; .
    FUNCTION        reduce using rule 62 (statement -> PRINT parameter_list ; .)
    {               reduce using rule 62 (statement -> PRINT parameter_list ; .)
    FOR             reduce using rule 62 (statement -> PRINT parameter_list ; .)
    WHILE           reduce using rule 62 (statement -> PRINT parameter_list ; .)
    IF              reduce using rule 62 (statement -> PRINT parameter_list ; .)
    CONTINUE        reduce using rule 62 (statement -> PRINT parameter_list ; .)
    BREAK           reduce using rule 62 (statement -> PRINT parameter_list ; .)
    RETURN          reduce using rule 62 (statement -> PRINT parameter_list ; .)
    PRINT           reduce using rule 62 (statement -> PRINT parameter_list ; .)
    ZEROS           reduce using rule 62 (statement -> PRINT parameter_list ; .)
    ONES            reduce using rule 62 (statement -> PRINT parameter_list ; .)
    EYE             reduce using rule 62 (statement -> PRINT parameter_list ; .)
    STRING          reduce using rule 62 (statement -> PRINT parameter_list ; .)
    FLOAT_NUMBER    reduce using rule 62 (statement -> PRINT parameter_list ; .)
    INT_NUMBER      reduce using rule 62 (statement -> PRINT parameter_list ; .)
    ID              reduce using rule 62 (statement -> PRINT parameter_list ; .)
    (               reduce using rule 62 (statement -> PRINT parameter_list ; .)
    NOT             reduce using rule 62 (statement -> PRINT parameter_list ; .)
    MINUS           reduce using rule 62 (statement -> PRINT parameter_list ; .)
    [               reduce using rule 62 (statement -> PRINT parameter_list ; .)
    $end            reduce using rule 62 (statement -> PRINT parameter_list ; .)
    }               reduce using rule 62 (statement -> PRINT parameter_list ; .)
    ELSE            reduce using rule 62 (statement -> PRINT parameter_list ; .)


state 120

    (47) matrix -> [ vector_list ] .
    REMAINDER_ASSIGN reduce using rule 47 (matrix -> [ vector_list ] .)
    DIVIDE_ASSIGN   reduce using rule 47 (matrix -> [ vector_list ] .)
    TIMES_ASSIGN    reduce using rule 47 (matrix -> [ vector_list ] .)
    MINUS_ASSIGN    reduce using rule 47 (matrix -> [ vector_list ] .)
    PLUS_ASSIGN     reduce using rule 47 (matrix -> [ vector_list ] .)
    ASSIGN          reduce using rule 47 (matrix -> [ vector_list ] .)
    ;               reduce using rule 47 (matrix -> [ vector_list ] .)
    [               reduce using rule 47 (matrix -> [ vector_list ] .)
    (               reduce using rule 47 (matrix -> [ vector_list ] .)
    '               reduce using rule 47 (matrix -> [ vector_list ] .)
    :               reduce using rule 47 (matrix -> [ vector_list ] .)
    XOR             reduce using rule 47 (matrix -> [ vector_list ] .)
    OR              reduce using rule 47 (matrix -> [ vector_list ] .)
    AND             reduce using rule 47 (matrix -> [ vector_list ] .)
    LOWER_EQUAL     reduce using rule 47 (matrix -> [ vector_list ] .)
    LOWER           reduce using rule 47 (matrix -> [ vector_list ] .)
    GREATER_EQUAL   reduce using rule 47 (matrix -> [ vector_list ] .)
    GREATER         reduce using rule 47 (matrix -> [ vector_list ] .)
    NOT_EQUAL       reduce using rule 47 (matrix -> [ vector_list ] .)
    EQUAL           reduce using rule 47 (matrix -> [ vector_list ] .)
    DOT_REMAINDER   reduce using rule 47 (matrix -> [ vector_list ] .)
    DOT_DIVIDE      reduce using rule 47 (matrix -> [ vector_list ] .)
    DOT_TIMES       reduce using rule 47 (matrix -> [ vector_list ] .)
    DOT_MINUS       reduce using rule 47 (matrix -> [ vector_list ] .)
    DOT_PLUS        reduce using rule 47 (matrix -> [ vector_list ] .)
    REMAINDER       reduce using rule 47 (matrix -> [ vector_list ] .)
    DIVIDE          reduce using rule 47 (matrix -> [ vector_list ] .)
    TIMES           reduce using rule 47 (matrix -> [ vector_list ] .)
    MINUS           reduce using rule 47 (matrix -> [ vector_list ] .)
    PLUS            reduce using rule 47 (matrix -> [ vector_list ] .)
    FUNCTION        reduce using rule 47 (matrix -> [ vector_list ] .)
    {               reduce using rule 47 (matrix -> [ vector_list ] .)
    FOR             reduce using rule 47 (matrix -> [ vector_list ] .)
    WHILE           reduce using rule 47 (matrix -> [ vector_list ] .)
    IF              reduce using rule 47 (matrix -> [ vector_list ] .)
    CONTINUE        reduce using rule 47 (matrix -> [ vector_list ] .)
    BREAK           reduce using rule 47 (matrix -> [ vector_list ] .)
    RETURN          reduce using rule 47 (matrix -> [ vector_list ] .)
    PRINT           reduce using rule 47 (matrix -> [ vector_list ] .)
    ZEROS           reduce using rule 47 (matrix -> [ vector_list ] .)
    ONES            reduce using rule 47 (matrix -> [ vector_list ] .)
    EYE             reduce using rule 47 (matrix -> [ vector_list ] .)
    STRING          reduce using rule 47 (matrix -> [ vector_list ] .)
    FLOAT_NUMBER    reduce using rule 47 (matrix -> [ vector_list ] .)
    INT_NUMBER      reduce using rule 47 (matrix -> [ vector_list ] .)
    ID              reduce using rule 47 (matrix -> [ vector_list ] .)
    NOT             reduce using rule 47 (matrix -> [ vector_list ] .)
    $end            reduce using rule 47 (matrix -> [ vector_list ] .)
    )               reduce using rule 47 (matrix -> [ vector_list ] .)
    ,               reduce using rule 47 (matrix -> [ vector_list ] .)
    ]               reduce using rule 47 (matrix -> [ vector_list ] .)


state 121

    (45) vector_list -> vector_list , . vector
    (44) vector -> . [ parameter_list ]
    [               shift and go to state 141

    vector                         shift and go to state 140

state 122

    (44) vector -> [ parameter_list ] .
    REMAINDER_ASSIGN reduce using rule 44 (vector -> [ parameter_list ] .)
    DIVIDE_ASSIGN   reduce using rule 44 (vector -> [ parameter_list ] .)
    TIMES_ASSIGN    reduce using rule 44 (vector -> [ parameter_list ] .)
    MINUS_ASSIGN    reduce using rule 44 (vector -> [ parameter_list ] .)
    PLUS_ASSIGN     reduce using rule 44 (vector -> [ parameter_list ] .)
    ASSIGN          reduce using rule 44 (vector -> [ parameter_list ] .)
    ;               reduce using rule 44 (vector -> [ parameter_list ] .)
    [               reduce using rule 44 (vector -> [ parameter_list ] .)
    (               reduce using rule 44 (vector -> [ parameter_list ] .)
    '               reduce using rule 44 (vector -> [ parameter_list ] .)
    :               reduce using rule 44 (vector -> [ parameter_list ] .)
    XOR             reduce using rule 44 (vector -> [ parameter_list ] .)
    OR              reduce using rule 44 (vector -> [ parameter_list ] .)
    AND             reduce using rule 44 (vector -> [ parameter_list ] .)
    LOWER_EQUAL     reduce using rule 44 (vector -> [ parameter_list ] .)
    LOWER           reduce using rule 44 (vector -> [ parameter_list ] .)
    GREATER_EQUAL   reduce using rule 44 (vector -> [ parameter_list ] .)
    GREATER         reduce using rule 44 (vector -> [ parameter_list ] .)
    NOT_EQUAL       reduce using rule 44 (vector -> [ parameter_list ] .)
    EQUAL           reduce using rule 44 (vector -> [ parameter_list ] .)
    DOT_REMAINDER   reduce using rule 44 (vector -> [ parameter_list ] .)
    DOT_DIVIDE      reduce using rule 44 (vector -> [ parameter_list ] .)
    DOT_TIMES       reduce using rule 44 (vector -> [ parameter_list ] .)
    DOT_MINUS       reduce using rule 44 (vector -> [ parameter_list ] .)
    DOT_PLUS        reduce using rule 44 (vector -> [ parameter_list ] .)
    REMAINDER       reduce using rule 44 (vector -> [ parameter_list ] .)
    DIVIDE          reduce using rule 44 (vector -> [ parameter_list ] .)
    TIMES           reduce using rule 44 (vector -> [ parameter_list ] .)
    MINUS           reduce using rule 44 (vector -> [ parameter_list ] .)
    PLUS            reduce using rule 44 (vector -> [ parameter_list ] .)
    FUNCTION        reduce using rule 44 (vector -> [ parameter_list ] .)
    {               reduce using rule 44 (vector -> [ parameter_list ] .)
    FOR             reduce using rule 44 (vector -> [ parameter_list ] .)
    WHILE           reduce using rule 44 (vector -> [ parameter_list ] .)
    IF              reduce using rule 44 (vector -> [ parameter_list ] .)
    CONTINUE        reduce using rule 44 (vector -> [ parameter_list ] .)
    BREAK           reduce using rule 44 (vector -> [ parameter_list ] .)
    RETURN          reduce using rule 44 (vector -> [ parameter_list ] .)
    PRINT           reduce using rule 44 (vector -> [ parameter_list ] .)
    ZEROS           reduce using rule 44 (vector -> [ parameter_list ] .)
    ONES            reduce using rule 44 (vector -> [ parameter_list ] .)
    EYE             reduce using rule 44 (vector -> [ parameter_list ] .)
    STRING          reduce using rule 44 (vector -> [ parameter_list ] .)
    FLOAT_NUMBER    reduce using rule 44 (vector -> [ parameter_list ] .)
    INT_NUMBER      reduce using rule 44 (vector -> [ parameter_list ] .)
    ID              reduce using rule 44 (vector -> [ parameter_list ] .)
    NOT             reduce using rule 44 (vector -> [ parameter_list ] .)
    $end            reduce using rule 44 (vector -> [ parameter_list ] .)
    )               reduce using rule 44 (vector -> [ parameter_list ] .)
    ,               reduce using rule 44 (vector -> [ parameter_list ] .)
    ]               reduce using rule 44 (vector -> [ parameter_list ] .)


state 123

    (9) expr -> ZEROS ( parameter_list . )
    (43) parameter_list -> parameter_list . , expr
    )               shift and go to state 142
    ,               shift and go to state 118


state 124

    (10) expr -> ONES ( parameter_list . )
    (43) parameter_list -> parameter_list . , expr
    )               shift and go to state 143
    ,               shift and go to state 118


state 125

    (11) expr -> EYE ( parameter_list . )
    (43) parameter_list -> parameter_list . , expr
    )               shift and go to state 144
    ,               shift and go to state 118


state 126

    (53) statement -> expr REMAINDER_ASSIGN expr ; .
    FUNCTION        reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    {               reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    FOR             reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    WHILE           reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    IF              reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    CONTINUE        reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    BREAK           reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    RETURN          reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    PRINT           reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    ZEROS           reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    ONES            reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    EYE             reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    STRING          reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    ID              reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    (               reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    NOT             reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    MINUS           reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    [               reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    $end            reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    }               reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)
    ELSE            reduce using rule 53 (statement -> expr REMAINDER_ASSIGN expr ; .)


state 127

    (54) statement -> expr DIVIDE_ASSIGN expr ; .
    FUNCTION        reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    {               reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    FOR             reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    WHILE           reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    IF              reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    CONTINUE        reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    BREAK           reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    RETURN          reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    PRINT           reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    ZEROS           reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    ONES            reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    EYE             reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    STRING          reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    ID              reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    (               reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    NOT             reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    MINUS           reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    [               reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    $end            reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    }               reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)
    ELSE            reduce using rule 54 (statement -> expr DIVIDE_ASSIGN expr ; .)


state 128

    (55) statement -> expr TIMES_ASSIGN expr ; .
    FUNCTION        reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    {               reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    FOR             reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    WHILE           reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    IF              reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    CONTINUE        reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    BREAK           reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    RETURN          reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    PRINT           reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    ZEROS           reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    ONES            reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    EYE             reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    STRING          reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    ID              reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    (               reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    NOT             reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    MINUS           reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    [               reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    $end            reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    }               reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)
    ELSE            reduce using rule 55 (statement -> expr TIMES_ASSIGN expr ; .)


state 129

    (56) statement -> expr MINUS_ASSIGN expr ; .
    FUNCTION        reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    {               reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    FOR             reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    WHILE           reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    IF              reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    CONTINUE        reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    BREAK           reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    RETURN          reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    PRINT           reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    ZEROS           reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    ONES            reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    EYE             reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    STRING          reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    ID              reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    (               reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    NOT             reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    MINUS           reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    [               reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    $end            reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    }               reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)
    ELSE            reduce using rule 56 (statement -> expr MINUS_ASSIGN expr ; .)


state 130

    (57) statement -> expr PLUS_ASSIGN expr ; .
    FUNCTION        reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    {               reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    FOR             reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    WHILE           reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    IF              reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    CONTINUE        reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    BREAK           reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    RETURN          reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    PRINT           reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    ZEROS           reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    ONES            reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    EYE             reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    STRING          reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    ID              reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    (               reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    NOT             reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    MINUS           reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    [               reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    $end            reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    }               reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)
    ELSE            reduce using rule 57 (statement -> expr PLUS_ASSIGN expr ; .)


state 131

    (58) statement -> expr ASSIGN expr ; .
    FUNCTION        reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    {               reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    FOR             reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    WHILE           reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    IF              reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    CONTINUE        reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    BREAK           reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    RETURN          reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    PRINT           reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    ZEROS           reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    ONES            reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    EYE             reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    STRING          reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    ID              reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    (               reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    NOT             reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    MINUS           reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    [               reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    $end            reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    }               reduce using rule 58 (statement -> expr ASSIGN expr ; .)
    ELSE            reduce using rule 58 (statement -> expr ASSIGN expr ; .)


state 132

    (6) expr -> expr [ parameter_list ] .
    REMAINDER_ASSIGN reduce using rule 6 (expr -> expr [ parameter_list ] .)
    DIVIDE_ASSIGN   reduce using rule 6 (expr -> expr [ parameter_list ] .)
    TIMES_ASSIGN    reduce using rule 6 (expr -> expr [ parameter_list ] .)
    MINUS_ASSIGN    reduce using rule 6 (expr -> expr [ parameter_list ] .)
    PLUS_ASSIGN     reduce using rule 6 (expr -> expr [ parameter_list ] .)
    ASSIGN          reduce using rule 6 (expr -> expr [ parameter_list ] .)
    ;               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    [               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    (               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    '               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    :               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    XOR             reduce using rule 6 (expr -> expr [ parameter_list ] .)
    OR              reduce using rule 6 (expr -> expr [ parameter_list ] .)
    AND             reduce using rule 6 (expr -> expr [ parameter_list ] .)
    LOWER_EQUAL     reduce using rule 6 (expr -> expr [ parameter_list ] .)
    LOWER           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    GREATER_EQUAL   reduce using rule 6 (expr -> expr [ parameter_list ] .)
    GREATER         reduce using rule 6 (expr -> expr [ parameter_list ] .)
    NOT_EQUAL       reduce using rule 6 (expr -> expr [ parameter_list ] .)
    EQUAL           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    DOT_REMAINDER   reduce using rule 6 (expr -> expr [ parameter_list ] .)
    DOT_DIVIDE      reduce using rule 6 (expr -> expr [ parameter_list ] .)
    DOT_TIMES       reduce using rule 6 (expr -> expr [ parameter_list ] .)
    DOT_MINUS       reduce using rule 6 (expr -> expr [ parameter_list ] .)
    DOT_PLUS        reduce using rule 6 (expr -> expr [ parameter_list ] .)
    REMAINDER       reduce using rule 6 (expr -> expr [ parameter_list ] .)
    DIVIDE          reduce using rule 6 (expr -> expr [ parameter_list ] .)
    TIMES           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    MINUS           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    PLUS            reduce using rule 6 (expr -> expr [ parameter_list ] .)
    FUNCTION        reduce using rule 6 (expr -> expr [ parameter_list ] .)
    {               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    FOR             reduce using rule 6 (expr -> expr [ parameter_list ] .)
    WHILE           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    IF              reduce using rule 6 (expr -> expr [ parameter_list ] .)
    CONTINUE        reduce using rule 6 (expr -> expr [ parameter_list ] .)
    BREAK           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    RETURN          reduce using rule 6 (expr -> expr [ parameter_list ] .)
    PRINT           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    ZEROS           reduce using rule 6 (expr -> expr [ parameter_list ] .)
    ONES            reduce using rule 6 (expr -> expr [ parameter_list ] .)
    EYE             reduce using rule 6 (expr -> expr [ parameter_list ] .)
    STRING          reduce using rule 6 (expr -> expr [ parameter_list ] .)
    FLOAT_NUMBER    reduce using rule 6 (expr -> expr [ parameter_list ] .)
    INT_NUMBER      reduce using rule 6 (expr -> expr [ parameter_list ] .)
    ID              reduce using rule 6 (expr -> expr [ parameter_list ] .)
    NOT             reduce using rule 6 (expr -> expr [ parameter_list ] .)
    $end            reduce using rule 6 (expr -> expr [ parameter_list ] .)
    )               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    ,               reduce using rule 6 (expr -> expr [ parameter_list ] .)
    ]               reduce using rule 6 (expr -> expr [ parameter_list ] .)


state 133

    (8) expr -> expr ( parameter_list ) .
    REMAINDER_ASSIGN reduce using rule 8 (expr -> expr ( parameter_list ) .)
    DIVIDE_ASSIGN   reduce using rule 8 (expr -> expr ( parameter_list ) .)
    TIMES_ASSIGN    reduce using rule 8 (expr -> expr ( parameter_list ) .)
    MINUS_ASSIGN    reduce using rule 8 (expr -> expr ( parameter_list ) .)
    PLUS_ASSIGN     reduce using rule 8 (expr -> expr ( parameter_list ) .)
    ASSIGN          reduce using rule 8 (expr -> expr ( parameter_list ) .)
    ;               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    [               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    (               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    '               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    :               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    XOR             reduce using rule 8 (expr -> expr ( parameter_list ) .)
    OR              reduce using rule 8 (expr -> expr ( parameter_list ) .)
    AND             reduce using rule 8 (expr -> expr ( parameter_list ) .)
    LOWER_EQUAL     reduce using rule 8 (expr -> expr ( parameter_list ) .)
    LOWER           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    GREATER_EQUAL   reduce using rule 8 (expr -> expr ( parameter_list ) .)
    GREATER         reduce using rule 8 (expr -> expr ( parameter_list ) .)
    NOT_EQUAL       reduce using rule 8 (expr -> expr ( parameter_list ) .)
    EQUAL           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    DOT_REMAINDER   reduce using rule 8 (expr -> expr ( parameter_list ) .)
    DOT_DIVIDE      reduce using rule 8 (expr -> expr ( parameter_list ) .)
    DOT_TIMES       reduce using rule 8 (expr -> expr ( parameter_list ) .)
    DOT_MINUS       reduce using rule 8 (expr -> expr ( parameter_list ) .)
    DOT_PLUS        reduce using rule 8 (expr -> expr ( parameter_list ) .)
    REMAINDER       reduce using rule 8 (expr -> expr ( parameter_list ) .)
    DIVIDE          reduce using rule 8 (expr -> expr ( parameter_list ) .)
    TIMES           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    MINUS           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    PLUS            reduce using rule 8 (expr -> expr ( parameter_list ) .)
    FUNCTION        reduce using rule 8 (expr -> expr ( parameter_list ) .)
    {               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    FOR             reduce using rule 8 (expr -> expr ( parameter_list ) .)
    WHILE           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    IF              reduce using rule 8 (expr -> expr ( parameter_list ) .)
    CONTINUE        reduce using rule 8 (expr -> expr ( parameter_list ) .)
    BREAK           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    RETURN          reduce using rule 8 (expr -> expr ( parameter_list ) .)
    PRINT           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    ZEROS           reduce using rule 8 (expr -> expr ( parameter_list ) .)
    ONES            reduce using rule 8 (expr -> expr ( parameter_list ) .)
    EYE             reduce using rule 8 (expr -> expr ( parameter_list ) .)
    STRING          reduce using rule 8 (expr -> expr ( parameter_list ) .)
    FLOAT_NUMBER    reduce using rule 8 (expr -> expr ( parameter_list ) .)
    INT_NUMBER      reduce using rule 8 (expr -> expr ( parameter_list ) .)
    ID              reduce using rule 8 (expr -> expr ( parameter_list ) .)
    NOT             reduce using rule 8 (expr -> expr ( parameter_list ) .)
    $end            reduce using rule 8 (expr -> expr ( parameter_list ) .)
    )               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    ,               reduce using rule 8 (expr -> expr ( parameter_list ) .)
    ]               reduce using rule 8 (expr -> expr ( parameter_list ) .)


state 134

    (66) function -> FUNCTION ID ( ) . statement
    (48) statement -> . { statement_series }
    (49) statement -> . FOR ( ID IN expr ) statement
    (50) statement -> . WHILE ( expr ) statement
    (51) statement -> . IF ( expr ) statement ELSE statement
    (52) statement -> . IF ( expr ) statement
    (53) statement -> . expr REMAINDER_ASSIGN expr ;
    (54) statement -> . expr DIVIDE_ASSIGN expr ;
    (55) statement -> . expr TIMES_ASSIGN expr ;
    (56) statement -> . expr MINUS_ASSIGN expr ;
    (57) statement -> . expr PLUS_ASSIGN expr ;
    (58) statement -> . expr ASSIGN expr ;
    (59) statement -> . CONTINUE ;
    (60) statement -> . BREAK ;
    (61) statement -> . RETURN parameter_list ;
    (62) statement -> . PRINT parameter_list ;
    (63) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    statement                      shift and go to state 145
    expr                           shift and go to state 63
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 135

    (67) function -> FUNCTION ID ( parameter_list . ) statement
    (43) parameter_list -> parameter_list . , expr
    )               shift and go to state 146
    ,               shift and go to state 118


state 136

    (49) statement -> FOR ( ID IN . expr ) statement
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 147
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 137

    (50) statement -> WHILE ( expr ) . statement
    (48) statement -> . { statement_series }
    (49) statement -> . FOR ( ID IN expr ) statement
    (50) statement -> . WHILE ( expr ) statement
    (51) statement -> . IF ( expr ) statement ELSE statement
    (52) statement -> . IF ( expr ) statement
    (53) statement -> . expr REMAINDER_ASSIGN expr ;
    (54) statement -> . expr DIVIDE_ASSIGN expr ;
    (55) statement -> . expr TIMES_ASSIGN expr ;
    (56) statement -> . expr MINUS_ASSIGN expr ;
    (57) statement -> . expr PLUS_ASSIGN expr ;
    (58) statement -> . expr ASSIGN expr ;
    (59) statement -> . CONTINUE ;
    (60) statement -> . BREAK ;
    (61) statement -> . RETURN parameter_list ;
    (62) statement -> . PRINT parameter_list ;
    (63) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 63
    statement                      shift and go to state 148
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 138

    (51) statement -> IF ( expr ) . statement ELSE statement
    (52) statement -> IF ( expr ) . statement
    (48) statement -> . { statement_series }
    (49) statement -> . FOR ( ID IN expr ) statement
    (50) statement -> . WHILE ( expr ) statement
    (51) statement -> . IF ( expr ) statement ELSE statement
    (52) statement -> . IF ( expr ) statement
    (53) statement -> . expr REMAINDER_ASSIGN expr ;
    (54) statement -> . expr DIVIDE_ASSIGN expr ;
    (55) statement -> . expr TIMES_ASSIGN expr ;
    (56) statement -> . expr MINUS_ASSIGN expr ;
    (57) statement -> . expr PLUS_ASSIGN expr ;
    (58) statement -> . expr ASSIGN expr ;
    (59) statement -> . CONTINUE ;
    (60) statement -> . BREAK ;
    (61) statement -> . RETURN parameter_list ;
    (62) statement -> . PRINT parameter_list ;
    (63) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 63
    statement                      shift and go to state 149
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 139

    (43) parameter_list -> parameter_list , expr .
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    ;               reduce using rule 43 (parameter_list -> parameter_list , expr .)
    ,               reduce using rule 43 (parameter_list -> parameter_list , expr .)
    ]               reduce using rule 43 (parameter_list -> parameter_list , expr .)
    )               reduce using rule 43 (parameter_list -> parameter_list , expr .)
    [               shift and go to state 36
    (               shift and go to state 37
    '               shift and go to state 38
    :               shift and go to state 39
    XOR             shift and go to state 40
    OR              shift and go to state 41
    AND             shift and go to state 42
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 140

    (45) vector_list -> vector_list , vector .
    ]               reduce using rule 45 (vector_list -> vector_list , vector .)
    ,               reduce using rule 45 (vector_list -> vector_list , vector .)


state 141

    (44) vector -> [ . parameter_list ]
    (42) parameter_list -> . expr
    (43) parameter_list -> . parameter_list , expr
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    parameter_list                 shift and go to state 74
    expr                           shift and go to state 70
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 142

    (9) expr -> ZEROS ( parameter_list ) .
    REMAINDER_ASSIGN reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    DIVIDE_ASSIGN   reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    TIMES_ASSIGN    reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    MINUS_ASSIGN    reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    PLUS_ASSIGN     reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    ASSIGN          reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    ;               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    [               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    (               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    '               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    :               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    XOR             reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    OR              reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    AND             reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    LOWER_EQUAL     reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    LOWER           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    GREATER_EQUAL   reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    GREATER         reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    NOT_EQUAL       reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    EQUAL           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    DOT_REMAINDER   reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    DOT_DIVIDE      reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    DOT_TIMES       reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    DOT_MINUS       reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    DOT_PLUS        reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    REMAINDER       reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    DIVIDE          reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    TIMES           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    MINUS           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    PLUS            reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    FUNCTION        reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    {               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    FOR             reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    WHILE           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    IF              reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    CONTINUE        reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    BREAK           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    RETURN          reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    PRINT           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    ZEROS           reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    ONES            reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    EYE             reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    STRING          reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    FLOAT_NUMBER    reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    INT_NUMBER      reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    ID              reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    NOT             reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    $end            reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    )               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    ,               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)
    ]               reduce using rule 9 (expr -> ZEROS ( parameter_list ) .)


state 143

    (10) expr -> ONES ( parameter_list ) .
    REMAINDER_ASSIGN reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    DIVIDE_ASSIGN   reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    TIMES_ASSIGN    reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    MINUS_ASSIGN    reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    PLUS_ASSIGN     reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    ASSIGN          reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    ;               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    [               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    (               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    '               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    :               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    XOR             reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    OR              reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    AND             reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    LOWER_EQUAL     reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    LOWER           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    GREATER_EQUAL   reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    GREATER         reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    NOT_EQUAL       reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    EQUAL           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    DOT_REMAINDER   reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    DOT_DIVIDE      reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    DOT_TIMES       reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    DOT_MINUS       reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    DOT_PLUS        reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    REMAINDER       reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    DIVIDE          reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    TIMES           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    MINUS           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    PLUS            reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    FUNCTION        reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    {               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    FOR             reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    WHILE           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    IF              reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    CONTINUE        reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    BREAK           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    RETURN          reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    PRINT           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    ZEROS           reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    ONES            reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    EYE             reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    STRING          reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    FLOAT_NUMBER    reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    INT_NUMBER      reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    ID              reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    NOT             reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    $end            reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    )               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    ,               reduce using rule 10 (expr -> ONES ( parameter_list ) .)
    ]               reduce using rule 10 (expr -> ONES ( parameter_list ) .)


state 144

    (11) expr -> EYE ( parameter_list ) .
    REMAINDER_ASSIGN reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    DIVIDE_ASSIGN   reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    TIMES_ASSIGN    reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    MINUS_ASSIGN    reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    PLUS_ASSIGN     reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    ASSIGN          reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    ;               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    [               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    (               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    '               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    :               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    XOR             reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    OR              reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    AND             reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    LOWER_EQUAL     reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    LOWER           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    GREATER_EQUAL   reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    GREATER         reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    NOT_EQUAL       reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    EQUAL           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    DOT_REMAINDER   reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    DOT_DIVIDE      reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    DOT_TIMES       reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    DOT_MINUS       reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    DOT_PLUS        reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    REMAINDER       reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    DIVIDE          reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    TIMES           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    MINUS           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    PLUS            reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    FUNCTION        reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    {               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    FOR             reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    WHILE           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    IF              reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    CONTINUE        reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    BREAK           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    RETURN          reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    PRINT           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    ZEROS           reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    ONES            reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    EYE             reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    STRING          reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    FLOAT_NUMBER    reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    INT_NUMBER      reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    ID              reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    NOT             reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    $end            reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    )               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    ,               reduce using rule 11 (expr -> EYE ( parameter_list ) .)
    ]               reduce using rule 11 (expr -> EYE ( parameter_list ) .)


state 145

    (66) function -> FUNCTION ID ( ) statement .
    FUNCTION        reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    {               reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    FOR             reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    WHILE           reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    IF              reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    CONTINUE        reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    BREAK           reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    RETURN          reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    PRINT           reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    ZEROS           reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    ONES            reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    EYE             reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    STRING          reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    FLOAT_NUMBER    reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    INT_NUMBER      reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    ID              reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    (               reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    NOT             reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    MINUS           reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    [               reduce using rule 66 (function -> FUNCTION ID ( ) statement .)
    $end            reduce using rule 66 (function -> FUNCTION ID ( ) statement .)


state 146

    (67) function -> FUNCTION ID ( parameter_list ) . statement
    (48) statement -> . { statement_series }
    (49) statement -> . FOR ( ID IN expr ) statement
    (50) statement -> . WHILE ( expr ) statement
    (51) statement -> . IF ( expr ) statement ELSE statement
    (52) statement -> . IF ( expr ) statement
    (53) statement -> . expr REMAINDER_ASSIGN expr ;
    (54) statement -> . expr DIVIDE_ASSIGN expr ;
    (55) statement -> . expr TIMES_ASSIGN expr ;
    (56) statement -> . expr MINUS_ASSIGN expr ;
    (57) statement -> . expr PLUS_ASSIGN expr ;
    (58) statement -> . expr ASSIGN expr ;
    (59) statement -> . CONTINUE ;
    (60) statement -> . BREAK ;
    (61) statement -> . RETURN parameter_list ;
    (62) statement -> . PRINT parameter_list ;
    (63) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    statement                      shift and go to state 150
    expr                           shift and go to state 63
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 147

    (49) statement -> FOR ( ID IN expr . ) statement
    (6) expr -> expr . [ parameter_list ]
    (7) expr -> expr . ( )
    (8) expr -> expr . ( parameter_list )
    (19) expr -> expr . '
    (22) expr -> expr . : expr
    (23) expr -> expr . XOR expr
    (24) expr -> expr . OR expr
    (25) expr -> expr . AND expr
    (26) expr -> expr . LOWER_EQUAL expr
    (27) expr -> expr . LOWER expr
    (28) expr -> expr . GREATER_EQUAL expr
    (29) expr -> expr . GREATER expr
    (30) expr -> expr . NOT_EQUAL expr
    (31) expr -> expr . EQUAL expr
    (32) expr -> expr . DOT_REMAINDER expr
    (33) expr -> expr . DOT_DIVIDE expr
    (34) expr -> expr . DOT_TIMES expr
    (35) expr -> expr . DOT_MINUS expr
    (36) expr -> expr . DOT_PLUS expr
    (37) expr -> expr . REMAINDER expr
    (38) expr -> expr . DIVIDE expr
    (39) expr -> expr . TIMES expr
    (40) expr -> expr . MINUS expr
    (41) expr -> expr . PLUS expr
    )               shift and go to state 151
    [               shift and go to state 36
    (               shift and go to state 37
    '               shift and go to state 38
    :               shift and go to state 39
    XOR             shift and go to state 40
    OR              shift and go to state 41
    AND             shift and go to state 42
    LOWER_EQUAL     shift and go to state 43
    LOWER           shift and go to state 44
    GREATER_EQUAL   shift and go to state 45
    GREATER         shift and go to state 46
    NOT_EQUAL       shift and go to state 47
    EQUAL           shift and go to state 48
    DOT_REMAINDER   shift and go to state 49
    DOT_DIVIDE      shift and go to state 50
    DOT_TIMES       shift and go to state 51
    DOT_MINUS       shift and go to state 52
    DOT_PLUS        shift and go to state 53
    REMAINDER       shift and go to state 54
    DIVIDE          shift and go to state 55
    TIMES           shift and go to state 56
    MINUS           shift and go to state 57
    PLUS            shift and go to state 58


state 148

    (50) statement -> WHILE ( expr ) statement .
    FUNCTION        reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    {               reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    FOR             reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    WHILE           reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    IF              reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    CONTINUE        reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    BREAK           reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    RETURN          reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    PRINT           reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    ZEROS           reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    ONES            reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    EYE             reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    STRING          reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    FLOAT_NUMBER    reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    INT_NUMBER      reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    ID              reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    (               reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    NOT             reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    MINUS           reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    [               reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    $end            reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    }               reduce using rule 50 (statement -> WHILE ( expr ) statement .)
    ELSE            reduce using rule 50 (statement -> WHILE ( expr ) statement .)


state 149

    (51) statement -> IF ( expr ) statement . ELSE statement
    (52) statement -> IF ( expr ) statement .
    ELSE            shift and go to state 152
    FUNCTION        reduce using rule 52 (statement -> IF ( expr ) statement .)
    {               reduce using rule 52 (statement -> IF ( expr ) statement .)
    FOR             reduce using rule 52 (statement -> IF ( expr ) statement .)
    WHILE           reduce using rule 52 (statement -> IF ( expr ) statement .)
    IF              reduce using rule 52 (statement -> IF ( expr ) statement .)
    CONTINUE        reduce using rule 52 (statement -> IF ( expr ) statement .)
    BREAK           reduce using rule 52 (statement -> IF ( expr ) statement .)
    RETURN          reduce using rule 52 (statement -> IF ( expr ) statement .)
    PRINT           reduce using rule 52 (statement -> IF ( expr ) statement .)
    ZEROS           reduce using rule 52 (statement -> IF ( expr ) statement .)
    ONES            reduce using rule 52 (statement -> IF ( expr ) statement .)
    EYE             reduce using rule 52 (statement -> IF ( expr ) statement .)
    STRING          reduce using rule 52 (statement -> IF ( expr ) statement .)
    FLOAT_NUMBER    reduce using rule 52 (statement -> IF ( expr ) statement .)
    INT_NUMBER      reduce using rule 52 (statement -> IF ( expr ) statement .)
    ID              reduce using rule 52 (statement -> IF ( expr ) statement .)
    (               reduce using rule 52 (statement -> IF ( expr ) statement .)
    NOT             reduce using rule 52 (statement -> IF ( expr ) statement .)
    MINUS           reduce using rule 52 (statement -> IF ( expr ) statement .)
    [               reduce using rule 52 (statement -> IF ( expr ) statement .)
    $end            reduce using rule 52 (statement -> IF ( expr ) statement .)
    }               reduce using rule 52 (statement -> IF ( expr ) statement .)


state 150

    (67) function -> FUNCTION ID ( parameter_list ) statement .
    FUNCTION        reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    {               reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    FOR             reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    WHILE           reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    IF              reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    CONTINUE        reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    BREAK           reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    RETURN          reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    PRINT           reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    ZEROS           reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    ONES            reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    EYE             reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    STRING          reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    FLOAT_NUMBER    reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    INT_NUMBER      reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    ID              reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    (               reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    NOT             reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    MINUS           reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    [               reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)
    $end            reduce using rule 67 (function -> FUNCTION ID ( parameter_list ) statement .)


state 151

    (49) statement -> FOR ( ID IN expr ) . statement
    (48) statement -> . { statement_series }
    (49) statement -> . FOR ( ID IN expr ) statement
    (50) statement -> . WHILE ( expr ) statement
    (51) statement -> . IF ( expr ) statement ELSE statement
    (52) statement -> . IF ( expr ) statement
    (53) statement -> . expr REMAINDER_ASSIGN expr ;
    (54) statement -> . expr DIVIDE_ASSIGN expr ;
    (55) statement -> . expr TIMES_ASSIGN expr ;
    (56) statement -> . expr MINUS_ASSIGN expr ;
    (57) statement -> . expr PLUS_ASSIGN expr ;
    (58) statement -> . expr ASSIGN expr ;
    (59) statement -> . CONTINUE ;
    (60) statement -> . BREAK ;
    (61) statement -> . RETURN parameter_list ;
    (62) statement -> . PRINT parameter_list ;
    (63) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 63
    statement                      shift and go to state 153
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 152

    (51) statement -> IF ( expr ) statement ELSE . statement
    (48) statement -> . { statement_series }
    (49) statement -> . FOR ( ID IN expr ) statement
    (50) statement -> . WHILE ( expr ) statement
    (51) statement -> . IF ( expr ) statement ELSE statement
    (52) statement -> . IF ( expr ) statement
    (53) statement -> . expr REMAINDER_ASSIGN expr ;
    (54) statement -> . expr DIVIDE_ASSIGN expr ;
    (55) statement -> . expr TIMES_ASSIGN expr ;
    (56) statement -> . expr MINUS_ASSIGN expr ;
    (57) statement -> . expr PLUS_ASSIGN expr ;
    (58) statement -> . expr ASSIGN expr ;
    (59) statement -> . CONTINUE ;
    (60) statement -> . BREAK ;
    (61) statement -> . RETURN parameter_list ;
    (62) statement -> . PRINT parameter_list ;
    (63) statement -> . expr ;
    (6) expr -> . expr [ parameter_list ]
    (7) expr -> . expr ( )
    (8) expr -> . expr ( parameter_list )
    (9) expr -> . ZEROS ( parameter_list )
    (10) expr -> . ONES ( parameter_list )
    (11) expr -> . EYE ( parameter_list )
    (12) expr -> . matrix
    (13) expr -> . vector
    (14) expr -> . STRING
    (15) expr -> . FLOAT_NUMBER
    (16) expr -> . INT_NUMBER
    (17) expr -> . ID
    (18) expr -> . ( expr )
    (19) expr -> . expr '
    (20) expr -> . NOT expr
    (21) expr -> . MINUS expr
    (22) expr -> . expr : expr
    (23) expr -> . expr XOR expr
    (24) expr -> . expr OR expr
    (25) expr -> . expr AND expr
    (26) expr -> . expr LOWER_EQUAL expr
    (27) expr -> . expr LOWER expr
    (28) expr -> . expr GREATER_EQUAL expr
    (29) expr -> . expr GREATER expr
    (30) expr -> . expr NOT_EQUAL expr
    (31) expr -> . expr EQUAL expr
    (32) expr -> . expr DOT_REMAINDER expr
    (33) expr -> . expr DOT_DIVIDE expr
    (34) expr -> . expr DOT_TIMES expr
    (35) expr -> . expr DOT_MINUS expr
    (36) expr -> . expr DOT_PLUS expr
    (37) expr -> . expr REMAINDER expr
    (38) expr -> . expr DIVIDE expr
    (39) expr -> . expr TIMES expr
    (40) expr -> . expr MINUS expr
    (41) expr -> . expr PLUS expr
    (47) matrix -> . [ vector_list ]
    (44) vector -> . [ parameter_list ]
    {               shift and go to state 9
    FOR             shift and go to state 10
    WHILE           shift and go to state 11
    IF              shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    RETURN          shift and go to state 15
    PRINT           shift and go to state 16
    ZEROS           shift and go to state 18
    ONES            shift and go to state 19
    EYE             shift and go to state 20
    STRING          shift and go to state 23
    FLOAT_NUMBER    shift and go to state 24
    INT_NUMBER      shift and go to state 25
    ID              shift and go to state 7
    (               shift and go to state 8
    NOT             shift and go to state 26
    MINUS           shift and go to state 27
    [               shift and go to state 17

    expr                           shift and go to state 63
    statement                      shift and go to state 154
    matrix                         shift and go to state 21
    vector                         shift and go to state 22

state 153

    (49) statement -> FOR ( ID IN expr ) statement .
    FUNCTION        reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    {               reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    FOR             reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    WHILE           reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    IF              reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    CONTINUE        reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    BREAK           reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    RETURN          reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    PRINT           reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    ZEROS           reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    ONES            reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    EYE             reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    STRING          reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    FLOAT_NUMBER    reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    INT_NUMBER      reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    ID              reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    (               reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    NOT             reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    MINUS           reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    [               reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    $end            reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    }               reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)
    ELSE            reduce using rule 49 (statement -> FOR ( ID IN expr ) statement .)


state 154

    (51) statement -> IF ( expr ) statement ELSE statement .
    FUNCTION        reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    {               reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    FOR             reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    WHILE           reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    IF              reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    CONTINUE        reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    BREAK           reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    RETURN          reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    PRINT           reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    ZEROS           reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    ONES            reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    EYE             reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    STRING          reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    FLOAT_NUMBER    reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    INT_NUMBER      reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    ID              reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    (               reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    NOT             reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    MINUS           reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    [               reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    $end            reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    }               reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)
    ELSE            reduce using rule 51 (statement -> IF ( expr ) statement ELSE statement .)


Conflicts:

shift/reduce conflict for [ in state 5 resolved as shift
shift/reduce conflict for ( in state 5 resolved as shift
shift/reduce conflict for MINUS in state 5 resolved as shift
reduce/reduce conflict in state 75 resolved using rule vector_list -> vector
rejected rule (expr -> vector) in state 75