Grammar:

Rule 0     S' -> program
Rule 1     action -> statement
Rule 2     program -> program action
Rule 3     program -> action
Rule 4     expr -> expr [ expr_list ]  [precedence=left, level=9]
Rule 5     expr -> expr ( expr_list )  [precedence=left, level=9]
Rule 6     expr -> ZEROS ( expr_list )
Rule 7     expr -> ONES ( expr_list )
Rule 8     expr -> EYE ( expr_list )
Rule 9     expr -> matrix
Rule 10    expr -> vector
Rule 11    expr -> STRING
Rule 12    expr -> FLOAT_NUMBER
Rule 13    expr -> INT_NUMBER
Rule 14    expr -> ID
Rule 15    expr -> ( expr )
Rule 16    expr -> expr '  [precedence=left, level=8]
Rule 17    expr -> NOT expr  [precedence=right, level=7]
Rule 18    expr -> MINUS expr  [precedence=right, level=7]
Rule 19    expr -> expr : expr  [precedence=nonassoc, level=2]
Rule 20    expr -> expr XOR expr  [precedence=left, level=3]
Rule 21    expr -> expr OR expr  [precedence=left, level=3]
Rule 22    expr -> expr AND expr  [precedence=left, level=3]
Rule 23    expr -> expr LOWER_EQUAL expr  [precedence=left, level=4]
Rule 24    expr -> expr LOWER expr  [precedence=left, level=4]
Rule 25    expr -> expr GREATER_EQUAL expr  [precedence=left, level=4]
Rule 26    expr -> expr GREATER expr  [precedence=left, level=4]
Rule 27    expr -> expr NOT_EQUAL expr  [precedence=left, level=4]
Rule 28    expr -> expr EQUAL expr  [precedence=left, level=4]
Rule 29    expr -> expr DOT_REMAINDER expr  [precedence=left, level=6]
Rule 30    expr -> expr DOT_DIVIDE expr  [precedence=left, level=6]
Rule 31    expr -> expr DOT_TIMES expr  [precedence=left, level=6]
Rule 32    expr -> expr DOT_MINUS expr  [precedence=left, level=5]
Rule 33    expr -> expr DOT_PLUS expr  [precedence=left, level=5]
Rule 34    expr -> expr REMAINDER expr  [precedence=left, level=6]
Rule 35    expr -> expr DIVIDE expr  [precedence=left, level=6]
Rule 36    expr -> expr TIMES expr  [precedence=left, level=6]
Rule 37    expr -> expr MINUS expr  [precedence=left, level=5]
Rule 38    expr -> expr PLUS expr  [precedence=left, level=5]
Rule 39    expr_list -> expr
Rule 40    expr_list -> expr_list , expr
Rule 41    expr_list -> <empty>
Rule 42    vector -> [ expr_list ]
Rule 43    vector_list -> vector_list , vector
Rule 44    vector_list -> vector
Rule 45    matrix -> [ vector_list ]
Rule 46    function -> FUNCTION ID ( expr_list ) statement
Rule 47    statement -> { statement_series }
Rule 48    statement -> FOR ( ID IN expr ) statement
Rule 49    statement -> WHILE ( expr ) statement
Rule 50    statement -> IF ( expr ) statement ELSE statement  [precedence=nonassoc, level=11]
Rule 51    statement -> IF ( expr ) statement  [precedence=nonassoc, level=10]
Rule 52    statement -> expr REMAINDER_ASSIGN expr ;
Rule 53    statement -> expr DIVIDE_ASSIGN expr ;
Rule 54    statement -> expr TIMES_ASSIGN expr ;
Rule 55    statement -> expr MINUS_ASSIGN expr ;
Rule 56    statement -> expr PLUS_ASSIGN expr ;
Rule 57    statement -> expr ASSIGN expr ;
Rule 58    statement -> CONTINUE ;
Rule 59    statement -> BREAK ;
Rule 60    statement -> RETURN expr_list ;
Rule 61    statement -> PRINT expr_list ;
Rule 62    statement -> function
Rule 63    statement -> expr ;
Rule 64    statement_series -> statement_series statement
Rule 65    statement_series -> statement

Terminals, with rules where they appear:

'                    : 16
(                    : 5 6 7 8 15 46 48 49 50 51
)                    : 5 6 7 8 15 46 48 49 50 51
,                    : 40 43
:                    : 19
;                    : 52 53 54 55 56 57 58 59 60 61 63
AND                  : 22
ASSIGN               : 57
BREAK                : 59
CONTINUE             : 58
DIVIDE               : 35
DIVIDE_ASSIGN        : 53
DOT_DIVIDE           : 30
DOT_MINUS            : 32
DOT_PLUS             : 33
DOT_REMAINDER        : 29
DOT_TIMES            : 31
ELSE                 : 50
EQUAL                : 28
EYE                  : 8
FLOAT_NUMBER         : 12
FOR                  : 48
FUNCTION             : 46
GREATER              : 26
GREATER_EQUAL        : 25
ID                   : 14 46 48
IF                   : 50 51
IN                   : 48
INT_NUMBER           : 13
LOWER                : 24
LOWER_EQUAL          : 23
MINUS                : 18 37
MINUS_ASSIGN         : 55
NOT                  : 17
NOT_EQUAL            : 27
ONES                 : 7
OR                   : 21
PLUS                 : 38
PLUS_ASSIGN          : 56
PRINT                : 61
REMAINDER            : 34
REMAINDER_ASSIGN     : 52
RETURN               : 60
STRING               : 11
TIMES                : 36
TIMES_ASSIGN         : 54
WHILE                : 49
XOR                  : 20
ZEROS                : 6
[                    : 4 42 45
]                    : 4 42 45
error                : 
{                    : 47
}                    : 47

Nonterminals, with rules where they appear:

action               : 2 3
expr                 : 4 5 15 16 17 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 40 48 49 50 51 52 52 53 53 54 54 55 55 56 56 57 57 63
expr_list            : 4 5 6 7 8 40 42 46 60 61
function             : 62
matrix               : 9
program              : 2 0
statement            : 1 46 48 49 50 50 51 64 65
statement_series     : 47 64
vector               : 10 43 44
vector_list          : 43 45


state 0

    (0) S' -> . program
    (2) program -> . program action
    (3) program -> . action
    (1) action -> . statement
    (47) statement -> . { statement_series }
    (48) statement -> . FOR ( ID IN expr ) statement
    (49) statement -> . WHILE ( expr ) statement
    (50) statement -> . IF ( expr ) statement ELSE statement
    (51) statement -> . IF ( expr ) statement
    (52) statement -> . expr REMAINDER_ASSIGN expr ;
    (53) statement -> . expr DIVIDE_ASSIGN expr ;
    (54) statement -> . expr TIMES_ASSIGN expr ;
    (55) statement -> . expr MINUS_ASSIGN expr ;
    (56) statement -> . expr PLUS_ASSIGN expr ;
    (57) statement -> . expr ASSIGN expr ;
    (58) statement -> . CONTINUE ;
    (59) statement -> . BREAK ;
    (60) statement -> . RETURN expr_list ;
    (61) statement -> . PRINT expr_list ;
    (62) statement -> . function
    (63) statement -> . expr ;
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (46) function -> . FUNCTION ID ( expr_list ) statement
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    FUNCTION        shift and go to state 27
    [               shift and go to state 16

    program                        shift and go to state 1
    action                         shift and go to state 2
    statement                      shift and go to state 3
    expr                           shift and go to state 8
    function                       shift and go to state 15
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 1

    (0) S' -> program .
    (2) program -> program . action
    (1) action -> . statement
    (47) statement -> . { statement_series }
    (48) statement -> . FOR ( ID IN expr ) statement
    (49) statement -> . WHILE ( expr ) statement
    (50) statement -> . IF ( expr ) statement ELSE statement
    (51) statement -> . IF ( expr ) statement
    (52) statement -> . expr REMAINDER_ASSIGN expr ;
    (53) statement -> . expr DIVIDE_ASSIGN expr ;
    (54) statement -> . expr TIMES_ASSIGN expr ;
    (55) statement -> . expr MINUS_ASSIGN expr ;
    (56) statement -> . expr PLUS_ASSIGN expr ;
    (57) statement -> . expr ASSIGN expr ;
    (58) statement -> . CONTINUE ;
    (59) statement -> . BREAK ;
    (60) statement -> . RETURN expr_list ;
    (61) statement -> . PRINT expr_list ;
    (62) statement -> . function
    (63) statement -> . expr ;
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (46) function -> . FUNCTION ID ( expr_list ) statement
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    FUNCTION        shift and go to state 27
    [               shift and go to state 16

    action                         shift and go to state 28
    statement                      shift and go to state 3
    expr                           shift and go to state 8
    function                       shift and go to state 15
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 2

    (3) program -> action .
    {               reduce using rule 3 (program -> action .)
    FOR             reduce using rule 3 (program -> action .)
    WHILE           reduce using rule 3 (program -> action .)
    IF              reduce using rule 3 (program -> action .)
    CONTINUE        reduce using rule 3 (program -> action .)
    BREAK           reduce using rule 3 (program -> action .)
    RETURN          reduce using rule 3 (program -> action .)
    PRINT           reduce using rule 3 (program -> action .)
    ZEROS           reduce using rule 3 (program -> action .)
    ONES            reduce using rule 3 (program -> action .)
    EYE             reduce using rule 3 (program -> action .)
    STRING          reduce using rule 3 (program -> action .)
    FLOAT_NUMBER    reduce using rule 3 (program -> action .)
    INT_NUMBER      reduce using rule 3 (program -> action .)
    ID              reduce using rule 3 (program -> action .)
    (               reduce using rule 3 (program -> action .)
    NOT             reduce using rule 3 (program -> action .)
    MINUS           reduce using rule 3 (program -> action .)
    FUNCTION        reduce using rule 3 (program -> action .)
    [               reduce using rule 3 (program -> action .)
    $end            reduce using rule 3 (program -> action .)


state 3

    (1) action -> statement .
    {               reduce using rule 1 (action -> statement .)
    FOR             reduce using rule 1 (action -> statement .)
    WHILE           reduce using rule 1 (action -> statement .)
    IF              reduce using rule 1 (action -> statement .)
    CONTINUE        reduce using rule 1 (action -> statement .)
    BREAK           reduce using rule 1 (action -> statement .)
    RETURN          reduce using rule 1 (action -> statement .)
    PRINT           reduce using rule 1 (action -> statement .)
    ZEROS           reduce using rule 1 (action -> statement .)
    ONES            reduce using rule 1 (action -> statement .)
    EYE             reduce using rule 1 (action -> statement .)
    STRING          reduce using rule 1 (action -> statement .)
    FLOAT_NUMBER    reduce using rule 1 (action -> statement .)
    INT_NUMBER      reduce using rule 1 (action -> statement .)
    ID              reduce using rule 1 (action -> statement .)
    (               reduce using rule 1 (action -> statement .)
    NOT             reduce using rule 1 (action -> statement .)
    MINUS           reduce using rule 1 (action -> statement .)
    FUNCTION        reduce using rule 1 (action -> statement .)
    [               reduce using rule 1 (action -> statement .)
    $end            reduce using rule 1 (action -> statement .)


state 4

    (47) statement -> { . statement_series }
    (64) statement_series -> . statement_series statement
    (65) statement_series -> . statement
    (47) statement -> . { statement_series }
    (48) statement -> . FOR ( ID IN expr ) statement
    (49) statement -> . WHILE ( expr ) statement
    (50) statement -> . IF ( expr ) statement ELSE statement
    (51) statement -> . IF ( expr ) statement
    (52) statement -> . expr REMAINDER_ASSIGN expr ;
    (53) statement -> . expr DIVIDE_ASSIGN expr ;
    (54) statement -> . expr TIMES_ASSIGN expr ;
    (55) statement -> . expr MINUS_ASSIGN expr ;
    (56) statement -> . expr PLUS_ASSIGN expr ;
    (57) statement -> . expr ASSIGN expr ;
    (58) statement -> . CONTINUE ;
    (59) statement -> . BREAK ;
    (60) statement -> . RETURN expr_list ;
    (61) statement -> . PRINT expr_list ;
    (62) statement -> . function
    (63) statement -> . expr ;
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (46) function -> . FUNCTION ID ( expr_list ) statement
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    FUNCTION        shift and go to state 27
    [               shift and go to state 16

    statement_series               shift and go to state 29
    statement                      shift and go to state 30
    expr                           shift and go to state 8
    function                       shift and go to state 15
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 5

    (48) statement -> FOR . ( ID IN expr ) statement
    (               shift and go to state 31


state 6

    (15) expr -> ( . expr )
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 32
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 7

    (14) expr -> ID .
    REMAINDER_ASSIGN reduce using rule 14 (expr -> ID .)
    DIVIDE_ASSIGN   reduce using rule 14 (expr -> ID .)
    TIMES_ASSIGN    reduce using rule 14 (expr -> ID .)
    MINUS_ASSIGN    reduce using rule 14 (expr -> ID .)
    PLUS_ASSIGN     reduce using rule 14 (expr -> ID .)
    ASSIGN          reduce using rule 14 (expr -> ID .)
    ;               reduce using rule 14 (expr -> ID .)
    [               reduce using rule 14 (expr -> ID .)
    (               reduce using rule 14 (expr -> ID .)
    '               reduce using rule 14 (expr -> ID .)
    :               reduce using rule 14 (expr -> ID .)
    XOR             reduce using rule 14 (expr -> ID .)
    OR              reduce using rule 14 (expr -> ID .)
    AND             reduce using rule 14 (expr -> ID .)
    LOWER_EQUAL     reduce using rule 14 (expr -> ID .)
    LOWER           reduce using rule 14 (expr -> ID .)
    GREATER_EQUAL   reduce using rule 14 (expr -> ID .)
    GREATER         reduce using rule 14 (expr -> ID .)
    NOT_EQUAL       reduce using rule 14 (expr -> ID .)
    EQUAL           reduce using rule 14 (expr -> ID .)
    DOT_REMAINDER   reduce using rule 14 (expr -> ID .)
    DOT_DIVIDE      reduce using rule 14 (expr -> ID .)
    DOT_TIMES       reduce using rule 14 (expr -> ID .)
    DOT_MINUS       reduce using rule 14 (expr -> ID .)
    DOT_PLUS        reduce using rule 14 (expr -> ID .)
    REMAINDER       reduce using rule 14 (expr -> ID .)
    DIVIDE          reduce using rule 14 (expr -> ID .)
    TIMES           reduce using rule 14 (expr -> ID .)
    MINUS           reduce using rule 14 (expr -> ID .)
    PLUS            reduce using rule 14 (expr -> ID .)
    )               reduce using rule 14 (expr -> ID .)
    ,               reduce using rule 14 (expr -> ID .)
    ]               reduce using rule 14 (expr -> ID .)


state 8

    (52) statement -> expr . REMAINDER_ASSIGN expr ;
    (53) statement -> expr . DIVIDE_ASSIGN expr ;
    (54) statement -> expr . TIMES_ASSIGN expr ;
    (55) statement -> expr . MINUS_ASSIGN expr ;
    (56) statement -> expr . PLUS_ASSIGN expr ;
    (57) statement -> expr . ASSIGN expr ;
    (63) statement -> expr . ;
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN shift and go to state 33
    DIVIDE_ASSIGN   shift and go to state 35
    TIMES_ASSIGN    shift and go to state 36
    MINUS_ASSIGN    shift and go to state 37
    PLUS_ASSIGN     shift and go to state 38
    ASSIGN          shift and go to state 39
    ;               shift and go to state 34
    [               shift and go to state 40
    (               shift and go to state 41
    '               shift and go to state 42
    :               shift and go to state 43
    XOR             shift and go to state 44
    OR              shift and go to state 45
    AND             shift and go to state 46
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 9

    (49) statement -> WHILE . ( expr ) statement
    (               shift and go to state 63


state 10

    (50) statement -> IF . ( expr ) statement ELSE statement
    (51) statement -> IF . ( expr ) statement
    (               shift and go to state 64


state 11

    (58) statement -> CONTINUE . ;
    ;               shift and go to state 65


state 12

    (59) statement -> BREAK . ;
    ;               shift and go to state 66


state 13

    (60) statement -> RETURN . expr_list ;
    (39) expr_list -> . expr
    (40) expr_list -> . expr_list , expr
    (41) expr_list -> .
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ;               reduce using rule 41 (expr_list -> .)
    ,               reduce using rule 41 (expr_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr_list                      shift and go to state 67
    expr                           shift and go to state 68
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 14

    (61) statement -> PRINT . expr_list ;
    (39) expr_list -> . expr
    (40) expr_list -> . expr_list , expr
    (41) expr_list -> .
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ;               reduce using rule 41 (expr_list -> .)
    ,               reduce using rule 41 (expr_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr_list                      shift and go to state 69
    expr                           shift and go to state 68
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 15

    (62) statement -> function .
    {               reduce using rule 62 (statement -> function .)
    FOR             reduce using rule 62 (statement -> function .)
    WHILE           reduce using rule 62 (statement -> function .)
    IF              reduce using rule 62 (statement -> function .)
    CONTINUE        reduce using rule 62 (statement -> function .)
    BREAK           reduce using rule 62 (statement -> function .)
    RETURN          reduce using rule 62 (statement -> function .)
    PRINT           reduce using rule 62 (statement -> function .)
    ZEROS           reduce using rule 62 (statement -> function .)
    ONES            reduce using rule 62 (statement -> function .)
    EYE             reduce using rule 62 (statement -> function .)
    STRING          reduce using rule 62 (statement -> function .)
    FLOAT_NUMBER    reduce using rule 62 (statement -> function .)
    INT_NUMBER      reduce using rule 62 (statement -> function .)
    ID              reduce using rule 62 (statement -> function .)
    (               reduce using rule 62 (statement -> function .)
    NOT             reduce using rule 62 (statement -> function .)
    MINUS           reduce using rule 62 (statement -> function .)
    FUNCTION        reduce using rule 62 (statement -> function .)
    [               reduce using rule 62 (statement -> function .)
    $end            reduce using rule 62 (statement -> function .)
    }               reduce using rule 62 (statement -> function .)
    ELSE            reduce using rule 62 (statement -> function .)


state 16

    (45) matrix -> [ . vector_list ]
    (42) vector -> [ . expr_list ]
    (43) vector_list -> . vector_list , vector
    (44) vector_list -> . vector
    (39) expr_list -> . expr
    (40) expr_list -> . expr_list , expr
    (41) expr_list -> .
    (42) vector -> . [ expr_list ]
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    ]               reduce using rule 41 (expr_list -> .)
    ,               reduce using rule 41 (expr_list -> .)
    [               shift and go to state 70
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26

    vector_list                    shift and go to state 71
    expr_list                      shift and go to state 72
    vector                         shift and go to state 73
    expr                           shift and go to state 68
    matrix                         shift and go to state 20

state 17

    (6) expr -> ZEROS . ( expr_list )
    (               shift and go to state 74


state 18

    (7) expr -> ONES . ( expr_list )
    (               shift and go to state 75


state 19

    (8) expr -> EYE . ( expr_list )
    (               shift and go to state 76


state 20

    (9) expr -> matrix .
    REMAINDER_ASSIGN reduce using rule 9 (expr -> matrix .)
    DIVIDE_ASSIGN   reduce using rule 9 (expr -> matrix .)
    TIMES_ASSIGN    reduce using rule 9 (expr -> matrix .)
    MINUS_ASSIGN    reduce using rule 9 (expr -> matrix .)
    PLUS_ASSIGN     reduce using rule 9 (expr -> matrix .)
    ASSIGN          reduce using rule 9 (expr -> matrix .)
    ;               reduce using rule 9 (expr -> matrix .)
    [               reduce using rule 9 (expr -> matrix .)
    (               reduce using rule 9 (expr -> matrix .)
    '               reduce using rule 9 (expr -> matrix .)
    :               reduce using rule 9 (expr -> matrix .)
    XOR             reduce using rule 9 (expr -> matrix .)
    OR              reduce using rule 9 (expr -> matrix .)
    AND             reduce using rule 9 (expr -> matrix .)
    LOWER_EQUAL     reduce using rule 9 (expr -> matrix .)
    LOWER           reduce using rule 9 (expr -> matrix .)
    GREATER_EQUAL   reduce using rule 9 (expr -> matrix .)
    GREATER         reduce using rule 9 (expr -> matrix .)
    NOT_EQUAL       reduce using rule 9 (expr -> matrix .)
    EQUAL           reduce using rule 9 (expr -> matrix .)
    DOT_REMAINDER   reduce using rule 9 (expr -> matrix .)
    DOT_DIVIDE      reduce using rule 9 (expr -> matrix .)
    DOT_TIMES       reduce using rule 9 (expr -> matrix .)
    DOT_MINUS       reduce using rule 9 (expr -> matrix .)
    DOT_PLUS        reduce using rule 9 (expr -> matrix .)
    REMAINDER       reduce using rule 9 (expr -> matrix .)
    DIVIDE          reduce using rule 9 (expr -> matrix .)
    TIMES           reduce using rule 9 (expr -> matrix .)
    MINUS           reduce using rule 9 (expr -> matrix .)
    PLUS            reduce using rule 9 (expr -> matrix .)
    )               reduce using rule 9 (expr -> matrix .)
    ,               reduce using rule 9 (expr -> matrix .)
    ]               reduce using rule 9 (expr -> matrix .)


state 21

    (10) expr -> vector .
    REMAINDER_ASSIGN reduce using rule 10 (expr -> vector .)
    DIVIDE_ASSIGN   reduce using rule 10 (expr -> vector .)
    TIMES_ASSIGN    reduce using rule 10 (expr -> vector .)
    MINUS_ASSIGN    reduce using rule 10 (expr -> vector .)
    PLUS_ASSIGN     reduce using rule 10 (expr -> vector .)
    ASSIGN          reduce using rule 10 (expr -> vector .)
    ;               reduce using rule 10 (expr -> vector .)
    [               reduce using rule 10 (expr -> vector .)
    (               reduce using rule 10 (expr -> vector .)
    '               reduce using rule 10 (expr -> vector .)
    :               reduce using rule 10 (expr -> vector .)
    XOR             reduce using rule 10 (expr -> vector .)
    OR              reduce using rule 10 (expr -> vector .)
    AND             reduce using rule 10 (expr -> vector .)
    LOWER_EQUAL     reduce using rule 10 (expr -> vector .)
    LOWER           reduce using rule 10 (expr -> vector .)
    GREATER_EQUAL   reduce using rule 10 (expr -> vector .)
    GREATER         reduce using rule 10 (expr -> vector .)
    NOT_EQUAL       reduce using rule 10 (expr -> vector .)
    EQUAL           reduce using rule 10 (expr -> vector .)
    DOT_REMAINDER   reduce using rule 10 (expr -> vector .)
    DOT_DIVIDE      reduce using rule 10 (expr -> vector .)
    DOT_TIMES       reduce using rule 10 (expr -> vector .)
    DOT_MINUS       reduce using rule 10 (expr -> vector .)
    DOT_PLUS        reduce using rule 10 (expr -> vector .)
    REMAINDER       reduce using rule 10 (expr -> vector .)
    DIVIDE          reduce using rule 10 (expr -> vector .)
    TIMES           reduce using rule 10 (expr -> vector .)
    MINUS           reduce using rule 10 (expr -> vector .)
    PLUS            reduce using rule 10 (expr -> vector .)
    )               reduce using rule 10 (expr -> vector .)
    ,               reduce using rule 10 (expr -> vector .)
    ]               reduce using rule 10 (expr -> vector .)


state 22

    (11) expr -> STRING .
    REMAINDER_ASSIGN reduce using rule 11 (expr -> STRING .)
    DIVIDE_ASSIGN   reduce using rule 11 (expr -> STRING .)
    TIMES_ASSIGN    reduce using rule 11 (expr -> STRING .)
    MINUS_ASSIGN    reduce using rule 11 (expr -> STRING .)
    PLUS_ASSIGN     reduce using rule 11 (expr -> STRING .)
    ASSIGN          reduce using rule 11 (expr -> STRING .)
    ;               reduce using rule 11 (expr -> STRING .)
    [               reduce using rule 11 (expr -> STRING .)
    (               reduce using rule 11 (expr -> STRING .)
    '               reduce using rule 11 (expr -> STRING .)
    :               reduce using rule 11 (expr -> STRING .)
    XOR             reduce using rule 11 (expr -> STRING .)
    OR              reduce using rule 11 (expr -> STRING .)
    AND             reduce using rule 11 (expr -> STRING .)
    LOWER_EQUAL     reduce using rule 11 (expr -> STRING .)
    LOWER           reduce using rule 11 (expr -> STRING .)
    GREATER_EQUAL   reduce using rule 11 (expr -> STRING .)
    GREATER         reduce using rule 11 (expr -> STRING .)
    NOT_EQUAL       reduce using rule 11 (expr -> STRING .)
    EQUAL           reduce using rule 11 (expr -> STRING .)
    DOT_REMAINDER   reduce using rule 11 (expr -> STRING .)
    DOT_DIVIDE      reduce using rule 11 (expr -> STRING .)
    DOT_TIMES       reduce using rule 11 (expr -> STRING .)
    DOT_MINUS       reduce using rule 11 (expr -> STRING .)
    DOT_PLUS        reduce using rule 11 (expr -> STRING .)
    REMAINDER       reduce using rule 11 (expr -> STRING .)
    DIVIDE          reduce using rule 11 (expr -> STRING .)
    TIMES           reduce using rule 11 (expr -> STRING .)
    MINUS           reduce using rule 11 (expr -> STRING .)
    PLUS            reduce using rule 11 (expr -> STRING .)
    )               reduce using rule 11 (expr -> STRING .)
    ,               reduce using rule 11 (expr -> STRING .)
    ]               reduce using rule 11 (expr -> STRING .)


state 23

    (12) expr -> FLOAT_NUMBER .
    REMAINDER_ASSIGN reduce using rule 12 (expr -> FLOAT_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 12 (expr -> FLOAT_NUMBER .)
    TIMES_ASSIGN    reduce using rule 12 (expr -> FLOAT_NUMBER .)
    MINUS_ASSIGN    reduce using rule 12 (expr -> FLOAT_NUMBER .)
    PLUS_ASSIGN     reduce using rule 12 (expr -> FLOAT_NUMBER .)
    ASSIGN          reduce using rule 12 (expr -> FLOAT_NUMBER .)
    ;               reduce using rule 12 (expr -> FLOAT_NUMBER .)
    [               reduce using rule 12 (expr -> FLOAT_NUMBER .)
    (               reduce using rule 12 (expr -> FLOAT_NUMBER .)
    '               reduce using rule 12 (expr -> FLOAT_NUMBER .)
    :               reduce using rule 12 (expr -> FLOAT_NUMBER .)
    XOR             reduce using rule 12 (expr -> FLOAT_NUMBER .)
    OR              reduce using rule 12 (expr -> FLOAT_NUMBER .)
    AND             reduce using rule 12 (expr -> FLOAT_NUMBER .)
    LOWER_EQUAL     reduce using rule 12 (expr -> FLOAT_NUMBER .)
    LOWER           reduce using rule 12 (expr -> FLOAT_NUMBER .)
    GREATER_EQUAL   reduce using rule 12 (expr -> FLOAT_NUMBER .)
    GREATER         reduce using rule 12 (expr -> FLOAT_NUMBER .)
    NOT_EQUAL       reduce using rule 12 (expr -> FLOAT_NUMBER .)
    EQUAL           reduce using rule 12 (expr -> FLOAT_NUMBER .)
    DOT_REMAINDER   reduce using rule 12 (expr -> FLOAT_NUMBER .)
    DOT_DIVIDE      reduce using rule 12 (expr -> FLOAT_NUMBER .)
    DOT_TIMES       reduce using rule 12 (expr -> FLOAT_NUMBER .)
    DOT_MINUS       reduce using rule 12 (expr -> FLOAT_NUMBER .)
    DOT_PLUS        reduce using rule 12 (expr -> FLOAT_NUMBER .)
    REMAINDER       reduce using rule 12 (expr -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 12 (expr -> FLOAT_NUMBER .)
    TIMES           reduce using rule 12 (expr -> FLOAT_NUMBER .)
    MINUS           reduce using rule 12 (expr -> FLOAT_NUMBER .)
    PLUS            reduce using rule 12 (expr -> FLOAT_NUMBER .)
    )               reduce using rule 12 (expr -> FLOAT_NUMBER .)
    ,               reduce using rule 12 (expr -> FLOAT_NUMBER .)
    ]               reduce using rule 12 (expr -> FLOAT_NUMBER .)


state 24

    (13) expr -> INT_NUMBER .
    REMAINDER_ASSIGN reduce using rule 13 (expr -> INT_NUMBER .)
    DIVIDE_ASSIGN   reduce using rule 13 (expr -> INT_NUMBER .)
    TIMES_ASSIGN    reduce using rule 13 (expr -> INT_NUMBER .)
    MINUS_ASSIGN    reduce using rule 13 (expr -> INT_NUMBER .)
    PLUS_ASSIGN     reduce using rule 13 (expr -> INT_NUMBER .)
    ASSIGN          reduce using rule 13 (expr -> INT_NUMBER .)
    ;               reduce using rule 13 (expr -> INT_NUMBER .)
    [               reduce using rule 13 (expr -> INT_NUMBER .)
    (               reduce using rule 13 (expr -> INT_NUMBER .)
    '               reduce using rule 13 (expr -> INT_NUMBER .)
    :               reduce using rule 13 (expr -> INT_NUMBER .)
    XOR             reduce using rule 13 (expr -> INT_NUMBER .)
    OR              reduce using rule 13 (expr -> INT_NUMBER .)
    AND             reduce using rule 13 (expr -> INT_NUMBER .)
    LOWER_EQUAL     reduce using rule 13 (expr -> INT_NUMBER .)
    LOWER           reduce using rule 13 (expr -> INT_NUMBER .)
    GREATER_EQUAL   reduce using rule 13 (expr -> INT_NUMBER .)
    GREATER         reduce using rule 13 (expr -> INT_NUMBER .)
    NOT_EQUAL       reduce using rule 13 (expr -> INT_NUMBER .)
    EQUAL           reduce using rule 13 (expr -> INT_NUMBER .)
    DOT_REMAINDER   reduce using rule 13 (expr -> INT_NUMBER .)
    DOT_DIVIDE      reduce using rule 13 (expr -> INT_NUMBER .)
    DOT_TIMES       reduce using rule 13 (expr -> INT_NUMBER .)
    DOT_MINUS       reduce using rule 13 (expr -> INT_NUMBER .)
    DOT_PLUS        reduce using rule 13 (expr -> INT_NUMBER .)
    REMAINDER       reduce using rule 13 (expr -> INT_NUMBER .)
    DIVIDE          reduce using rule 13 (expr -> INT_NUMBER .)
    TIMES           reduce using rule 13 (expr -> INT_NUMBER .)
    MINUS           reduce using rule 13 (expr -> INT_NUMBER .)
    PLUS            reduce using rule 13 (expr -> INT_NUMBER .)
    )               reduce using rule 13 (expr -> INT_NUMBER .)
    ,               reduce using rule 13 (expr -> INT_NUMBER .)
    ]               reduce using rule 13 (expr -> INT_NUMBER .)


state 25

    (17) expr -> NOT . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 77
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 26

    (18) expr -> MINUS . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 78
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 27

    (46) function -> FUNCTION . ID ( expr_list ) statement
    ID              shift and go to state 79


state 28

    (2) program -> program action .
    {               reduce using rule 2 (program -> program action .)
    FOR             reduce using rule 2 (program -> program action .)
    WHILE           reduce using rule 2 (program -> program action .)
    IF              reduce using rule 2 (program -> program action .)
    CONTINUE        reduce using rule 2 (program -> program action .)
    BREAK           reduce using rule 2 (program -> program action .)
    RETURN          reduce using rule 2 (program -> program action .)
    PRINT           reduce using rule 2 (program -> program action .)
    ZEROS           reduce using rule 2 (program -> program action .)
    ONES            reduce using rule 2 (program -> program action .)
    EYE             reduce using rule 2 (program -> program action .)
    STRING          reduce using rule 2 (program -> program action .)
    FLOAT_NUMBER    reduce using rule 2 (program -> program action .)
    INT_NUMBER      reduce using rule 2 (program -> program action .)
    ID              reduce using rule 2 (program -> program action .)
    (               reduce using rule 2 (program -> program action .)
    NOT             reduce using rule 2 (program -> program action .)
    MINUS           reduce using rule 2 (program -> program action .)
    FUNCTION        reduce using rule 2 (program -> program action .)
    [               reduce using rule 2 (program -> program action .)
    $end            reduce using rule 2 (program -> program action .)


state 29

    (47) statement -> { statement_series . }
    (64) statement_series -> statement_series . statement
    (47) statement -> . { statement_series }
    (48) statement -> . FOR ( ID IN expr ) statement
    (49) statement -> . WHILE ( expr ) statement
    (50) statement -> . IF ( expr ) statement ELSE statement
    (51) statement -> . IF ( expr ) statement
    (52) statement -> . expr REMAINDER_ASSIGN expr ;
    (53) statement -> . expr DIVIDE_ASSIGN expr ;
    (54) statement -> . expr TIMES_ASSIGN expr ;
    (55) statement -> . expr MINUS_ASSIGN expr ;
    (56) statement -> . expr PLUS_ASSIGN expr ;
    (57) statement -> . expr ASSIGN expr ;
    (58) statement -> . CONTINUE ;
    (59) statement -> . BREAK ;
    (60) statement -> . RETURN expr_list ;
    (61) statement -> . PRINT expr_list ;
    (62) statement -> . function
    (63) statement -> . expr ;
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (46) function -> . FUNCTION ID ( expr_list ) statement
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    }               shift and go to state 80
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    FUNCTION        shift and go to state 27
    [               shift and go to state 16

    statement                      shift and go to state 81
    expr                           shift and go to state 8
    function                       shift and go to state 15
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 30

    (65) statement_series -> statement .
    }               reduce using rule 65 (statement_series -> statement .)
    {               reduce using rule 65 (statement_series -> statement .)
    FOR             reduce using rule 65 (statement_series -> statement .)
    WHILE           reduce using rule 65 (statement_series -> statement .)
    IF              reduce using rule 65 (statement_series -> statement .)
    CONTINUE        reduce using rule 65 (statement_series -> statement .)
    BREAK           reduce using rule 65 (statement_series -> statement .)
    RETURN          reduce using rule 65 (statement_series -> statement .)
    PRINT           reduce using rule 65 (statement_series -> statement .)
    ZEROS           reduce using rule 65 (statement_series -> statement .)
    ONES            reduce using rule 65 (statement_series -> statement .)
    EYE             reduce using rule 65 (statement_series -> statement .)
    STRING          reduce using rule 65 (statement_series -> statement .)
    FLOAT_NUMBER    reduce using rule 65 (statement_series -> statement .)
    INT_NUMBER      reduce using rule 65 (statement_series -> statement .)
    ID              reduce using rule 65 (statement_series -> statement .)
    (               reduce using rule 65 (statement_series -> statement .)
    NOT             reduce using rule 65 (statement_series -> statement .)
    MINUS           reduce using rule 65 (statement_series -> statement .)
    FUNCTION        reduce using rule 65 (statement_series -> statement .)
    [               reduce using rule 65 (statement_series -> statement .)


state 31

    (48) statement -> FOR ( . ID IN expr ) statement
    ID              shift and go to state 82


state 32

    (15) expr -> ( expr . )
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    )               shift and go to state 83
    [               shift and go to state 40
    (               shift and go to state 41
    '               shift and go to state 42
    :               shift and go to state 43
    XOR             shift and go to state 44
    OR              shift and go to state 45
    AND             shift and go to state 46
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 33

    (52) statement -> expr REMAINDER_ASSIGN . expr ;
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 84
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 34

    (63) statement -> expr ; .
    {               reduce using rule 63 (statement -> expr ; .)
    FOR             reduce using rule 63 (statement -> expr ; .)
    WHILE           reduce using rule 63 (statement -> expr ; .)
    IF              reduce using rule 63 (statement -> expr ; .)
    CONTINUE        reduce using rule 63 (statement -> expr ; .)
    BREAK           reduce using rule 63 (statement -> expr ; .)
    RETURN          reduce using rule 63 (statement -> expr ; .)
    PRINT           reduce using rule 63 (statement -> expr ; .)
    ZEROS           reduce using rule 63 (statement -> expr ; .)
    ONES            reduce using rule 63 (statement -> expr ; .)
    EYE             reduce using rule 63 (statement -> expr ; .)
    STRING          reduce using rule 63 (statement -> expr ; .)
    FLOAT_NUMBER    reduce using rule 63 (statement -> expr ; .)
    INT_NUMBER      reduce using rule 63 (statement -> expr ; .)
    ID              reduce using rule 63 (statement -> expr ; .)
    (               reduce using rule 63 (statement -> expr ; .)
    NOT             reduce using rule 63 (statement -> expr ; .)
    MINUS           reduce using rule 63 (statement -> expr ; .)
    FUNCTION        reduce using rule 63 (statement -> expr ; .)
    [               reduce using rule 63 (statement -> expr ; .)
    $end            reduce using rule 63 (statement -> expr ; .)
    }               reduce using rule 63 (statement -> expr ; .)
    ELSE            reduce using rule 63 (statement -> expr ; .)


state 35

    (53) statement -> expr DIVIDE_ASSIGN . expr ;
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 85
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 36

    (54) statement -> expr TIMES_ASSIGN . expr ;
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 86
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 37

    (55) statement -> expr MINUS_ASSIGN . expr ;
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 87
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 38

    (56) statement -> expr PLUS_ASSIGN . expr ;
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 88
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 39

    (57) statement -> expr ASSIGN . expr ;
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 89
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 40

    (4) expr -> expr [ . expr_list ]
    (39) expr_list -> . expr
    (40) expr_list -> . expr_list , expr
    (41) expr_list -> .
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ]               reduce using rule 41 (expr_list -> .)
    ,               reduce using rule 41 (expr_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 68
    expr_list                      shift and go to state 90
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 41

    (5) expr -> expr ( . expr_list )
    (39) expr_list -> . expr
    (40) expr_list -> . expr_list , expr
    (41) expr_list -> .
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    )               reduce using rule 41 (expr_list -> .)
    ,               reduce using rule 41 (expr_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 68
    expr_list                      shift and go to state 91
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 42

    (16) expr -> expr ' .
    REMAINDER_ASSIGN reduce using rule 16 (expr -> expr ' .)
    DIVIDE_ASSIGN   reduce using rule 16 (expr -> expr ' .)
    TIMES_ASSIGN    reduce using rule 16 (expr -> expr ' .)
    MINUS_ASSIGN    reduce using rule 16 (expr -> expr ' .)
    PLUS_ASSIGN     reduce using rule 16 (expr -> expr ' .)
    ASSIGN          reduce using rule 16 (expr -> expr ' .)
    ;               reduce using rule 16 (expr -> expr ' .)
    [               reduce using rule 16 (expr -> expr ' .)
    (               reduce using rule 16 (expr -> expr ' .)
    '               reduce using rule 16 (expr -> expr ' .)
    :               reduce using rule 16 (expr -> expr ' .)
    XOR             reduce using rule 16 (expr -> expr ' .)
    OR              reduce using rule 16 (expr -> expr ' .)
    AND             reduce using rule 16 (expr -> expr ' .)
    LOWER_EQUAL     reduce using rule 16 (expr -> expr ' .)
    LOWER           reduce using rule 16 (expr -> expr ' .)
    GREATER_EQUAL   reduce using rule 16 (expr -> expr ' .)
    GREATER         reduce using rule 16 (expr -> expr ' .)
    NOT_EQUAL       reduce using rule 16 (expr -> expr ' .)
    EQUAL           reduce using rule 16 (expr -> expr ' .)
    DOT_REMAINDER   reduce using rule 16 (expr -> expr ' .)
    DOT_DIVIDE      reduce using rule 16 (expr -> expr ' .)
    DOT_TIMES       reduce using rule 16 (expr -> expr ' .)
    DOT_MINUS       reduce using rule 16 (expr -> expr ' .)
    DOT_PLUS        reduce using rule 16 (expr -> expr ' .)
    REMAINDER       reduce using rule 16 (expr -> expr ' .)
    DIVIDE          reduce using rule 16 (expr -> expr ' .)
    TIMES           reduce using rule 16 (expr -> expr ' .)
    MINUS           reduce using rule 16 (expr -> expr ' .)
    PLUS            reduce using rule 16 (expr -> expr ' .)
    )               reduce using rule 16 (expr -> expr ' .)
    ,               reduce using rule 16 (expr -> expr ' .)
    ]               reduce using rule 16 (expr -> expr ' .)


state 43

    (19) expr -> expr : . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 92
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 44

    (20) expr -> expr XOR . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 93
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 45

    (21) expr -> expr OR . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 94
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 46

    (22) expr -> expr AND . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 95
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 47

    (23) expr -> expr LOWER_EQUAL . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 96
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 48

    (24) expr -> expr LOWER . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 97
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 49

    (25) expr -> expr GREATER_EQUAL . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 98
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 50

    (26) expr -> expr GREATER . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 99
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 51

    (27) expr -> expr NOT_EQUAL . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 100
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 52

    (28) expr -> expr EQUAL . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 101
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 53

    (29) expr -> expr DOT_REMAINDER . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 102
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 54

    (30) expr -> expr DOT_DIVIDE . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 103
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 55

    (31) expr -> expr DOT_TIMES . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 104
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 56

    (32) expr -> expr DOT_MINUS . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 105
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 57

    (33) expr -> expr DOT_PLUS . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 106
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 58

    (34) expr -> expr REMAINDER . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 107
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 59

    (35) expr -> expr DIVIDE . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 108
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 60

    (36) expr -> expr TIMES . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 109
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 61

    (37) expr -> expr MINUS . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 110
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 62

    (38) expr -> expr PLUS . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 111
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 63

    (49) statement -> WHILE ( . expr ) statement
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 112
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 64

    (50) statement -> IF ( . expr ) statement ELSE statement
    (51) statement -> IF ( . expr ) statement
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 113
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 65

    (58) statement -> CONTINUE ; .
    {               reduce using rule 58 (statement -> CONTINUE ; .)
    FOR             reduce using rule 58 (statement -> CONTINUE ; .)
    WHILE           reduce using rule 58 (statement -> CONTINUE ; .)
    IF              reduce using rule 58 (statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 58 (statement -> CONTINUE ; .)
    BREAK           reduce using rule 58 (statement -> CONTINUE ; .)
    RETURN          reduce using rule 58 (statement -> CONTINUE ; .)
    PRINT           reduce using rule 58 (statement -> CONTINUE ; .)
    ZEROS           reduce using rule 58 (statement -> CONTINUE ; .)
    ONES            reduce using rule 58 (statement -> CONTINUE ; .)
    EYE             reduce using rule 58 (statement -> CONTINUE ; .)
    STRING          reduce using rule 58 (statement -> CONTINUE ; .)
    FLOAT_NUMBER    reduce using rule 58 (statement -> CONTINUE ; .)
    INT_NUMBER      reduce using rule 58 (statement -> CONTINUE ; .)
    ID              reduce using rule 58 (statement -> CONTINUE ; .)
    (               reduce using rule 58 (statement -> CONTINUE ; .)
    NOT             reduce using rule 58 (statement -> CONTINUE ; .)
    MINUS           reduce using rule 58 (statement -> CONTINUE ; .)
    FUNCTION        reduce using rule 58 (statement -> CONTINUE ; .)
    [               reduce using rule 58 (statement -> CONTINUE ; .)
    $end            reduce using rule 58 (statement -> CONTINUE ; .)
    }               reduce using rule 58 (statement -> CONTINUE ; .)
    ELSE            reduce using rule 58 (statement -> CONTINUE ; .)


state 66

    (59) statement -> BREAK ; .
    {               reduce using rule 59 (statement -> BREAK ; .)
    FOR             reduce using rule 59 (statement -> BREAK ; .)
    WHILE           reduce using rule 59 (statement -> BREAK ; .)
    IF              reduce using rule 59 (statement -> BREAK ; .)
    CONTINUE        reduce using rule 59 (statement -> BREAK ; .)
    BREAK           reduce using rule 59 (statement -> BREAK ; .)
    RETURN          reduce using rule 59 (statement -> BREAK ; .)
    PRINT           reduce using rule 59 (statement -> BREAK ; .)
    ZEROS           reduce using rule 59 (statement -> BREAK ; .)
    ONES            reduce using rule 59 (statement -> BREAK ; .)
    EYE             reduce using rule 59 (statement -> BREAK ; .)
    STRING          reduce using rule 59 (statement -> BREAK ; .)
    FLOAT_NUMBER    reduce using rule 59 (statement -> BREAK ; .)
    INT_NUMBER      reduce using rule 59 (statement -> BREAK ; .)
    ID              reduce using rule 59 (statement -> BREAK ; .)
    (               reduce using rule 59 (statement -> BREAK ; .)
    NOT             reduce using rule 59 (statement -> BREAK ; .)
    MINUS           reduce using rule 59 (statement -> BREAK ; .)
    FUNCTION        reduce using rule 59 (statement -> BREAK ; .)
    [               reduce using rule 59 (statement -> BREAK ; .)
    $end            reduce using rule 59 (statement -> BREAK ; .)
    }               reduce using rule 59 (statement -> BREAK ; .)
    ELSE            reduce using rule 59 (statement -> BREAK ; .)


state 67

    (60) statement -> RETURN expr_list . ;
    (40) expr_list -> expr_list . , expr
    ;               shift and go to state 114
    ,               shift and go to state 115


state 68

    (39) expr_list -> expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    ;               reduce using rule 39 (expr_list -> expr .)
    ,               reduce using rule 39 (expr_list -> expr .)
    ]               reduce using rule 39 (expr_list -> expr .)
    )               reduce using rule 39 (expr_list -> expr .)
    [               shift and go to state 40
    (               shift and go to state 41
    '               shift and go to state 42
    :               shift and go to state 43
    XOR             shift and go to state 44
    OR              shift and go to state 45
    AND             shift and go to state 46
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 69

    (61) statement -> PRINT expr_list . ;
    (40) expr_list -> expr_list . , expr
    ;               shift and go to state 116
    ,               shift and go to state 115


state 70

    (42) vector -> [ . expr_list ]
    (45) matrix -> [ . vector_list ]
    (39) expr_list -> . expr
    (40) expr_list -> . expr_list , expr
    (41) expr_list -> .
    (43) vector_list -> . vector_list , vector
    (44) vector_list -> . vector
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (42) vector -> . [ expr_list ]
    (45) matrix -> . [ vector_list ]
    ]               reduce using rule 41 (expr_list -> .)
    ,               reduce using rule 41 (expr_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 70

    expr_list                      shift and go to state 72
    vector_list                    shift and go to state 71
    expr                           shift and go to state 68
    vector                         shift and go to state 73
    matrix                         shift and go to state 20

state 71

    (45) matrix -> [ vector_list . ]
    (43) vector_list -> vector_list . , vector
    ]               shift and go to state 117
    ,               shift and go to state 118


state 72

    (42) vector -> [ expr_list . ]
    (40) expr_list -> expr_list . , expr
    ]               shift and go to state 119
    ,               shift and go to state 115


state 73

    (44) vector_list -> vector .
    (10) expr -> vector .
  ! reduce/reduce conflict for ] resolved using rule 44 (vector_list -> vector .)
  ! reduce/reduce conflict for , resolved using rule 44 (vector_list -> vector .)
    ]               reduce using rule 44 (vector_list -> vector .)
    ,               reduce using rule 44 (vector_list -> vector .)
    [               reduce using rule 10 (expr -> vector .)
    (               reduce using rule 10 (expr -> vector .)
    '               reduce using rule 10 (expr -> vector .)
    :               reduce using rule 10 (expr -> vector .)
    XOR             reduce using rule 10 (expr -> vector .)
    OR              reduce using rule 10 (expr -> vector .)
    AND             reduce using rule 10 (expr -> vector .)
    LOWER_EQUAL     reduce using rule 10 (expr -> vector .)
    LOWER           reduce using rule 10 (expr -> vector .)
    GREATER_EQUAL   reduce using rule 10 (expr -> vector .)
    GREATER         reduce using rule 10 (expr -> vector .)
    NOT_EQUAL       reduce using rule 10 (expr -> vector .)
    EQUAL           reduce using rule 10 (expr -> vector .)
    DOT_REMAINDER   reduce using rule 10 (expr -> vector .)
    DOT_DIVIDE      reduce using rule 10 (expr -> vector .)
    DOT_TIMES       reduce using rule 10 (expr -> vector .)
    DOT_MINUS       reduce using rule 10 (expr -> vector .)
    DOT_PLUS        reduce using rule 10 (expr -> vector .)
    REMAINDER       reduce using rule 10 (expr -> vector .)
    DIVIDE          reduce using rule 10 (expr -> vector .)
    TIMES           reduce using rule 10 (expr -> vector .)
    MINUS           reduce using rule 10 (expr -> vector .)
    PLUS            reduce using rule 10 (expr -> vector .)


state 74

    (6) expr -> ZEROS ( . expr_list )
    (39) expr_list -> . expr
    (40) expr_list -> . expr_list , expr
    (41) expr_list -> .
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    )               reduce using rule 41 (expr_list -> .)
    ,               reduce using rule 41 (expr_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr_list                      shift and go to state 120
    expr                           shift and go to state 68
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 75

    (7) expr -> ONES ( . expr_list )
    (39) expr_list -> . expr
    (40) expr_list -> . expr_list , expr
    (41) expr_list -> .
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    )               reduce using rule 41 (expr_list -> .)
    ,               reduce using rule 41 (expr_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr_list                      shift and go to state 121
    expr                           shift and go to state 68
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 76

    (8) expr -> EYE ( . expr_list )
    (39) expr_list -> . expr
    (40) expr_list -> . expr_list , expr
    (41) expr_list -> .
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    )               reduce using rule 41 (expr_list -> .)
    ,               reduce using rule 41 (expr_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr_list                      shift and go to state 122
    expr                           shift and go to state 68
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 77

    (17) expr -> NOT expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 17 (expr -> NOT expr .)
    DIVIDE_ASSIGN   reduce using rule 17 (expr -> NOT expr .)
    TIMES_ASSIGN    reduce using rule 17 (expr -> NOT expr .)
    MINUS_ASSIGN    reduce using rule 17 (expr -> NOT expr .)
    PLUS_ASSIGN     reduce using rule 17 (expr -> NOT expr .)
    ASSIGN          reduce using rule 17 (expr -> NOT expr .)
    ;               reduce using rule 17 (expr -> NOT expr .)
    [               reduce using rule 17 (expr -> NOT expr .)
    (               reduce using rule 17 (expr -> NOT expr .)
    '               reduce using rule 17 (expr -> NOT expr .)
    :               reduce using rule 17 (expr -> NOT expr .)
    XOR             reduce using rule 17 (expr -> NOT expr .)
    OR              reduce using rule 17 (expr -> NOT expr .)
    AND             reduce using rule 17 (expr -> NOT expr .)
    LOWER_EQUAL     reduce using rule 17 (expr -> NOT expr .)
    LOWER           reduce using rule 17 (expr -> NOT expr .)
    GREATER_EQUAL   reduce using rule 17 (expr -> NOT expr .)
    GREATER         reduce using rule 17 (expr -> NOT expr .)
    NOT_EQUAL       reduce using rule 17 (expr -> NOT expr .)
    EQUAL           reduce using rule 17 (expr -> NOT expr .)
    DOT_REMAINDER   reduce using rule 17 (expr -> NOT expr .)
    DOT_DIVIDE      reduce using rule 17 (expr -> NOT expr .)
    DOT_TIMES       reduce using rule 17 (expr -> NOT expr .)
    DOT_MINUS       reduce using rule 17 (expr -> NOT expr .)
    DOT_PLUS        reduce using rule 17 (expr -> NOT expr .)
    REMAINDER       reduce using rule 17 (expr -> NOT expr .)
    DIVIDE          reduce using rule 17 (expr -> NOT expr .)
    TIMES           reduce using rule 17 (expr -> NOT expr .)
    MINUS           reduce using rule 17 (expr -> NOT expr .)
    PLUS            reduce using rule 17 (expr -> NOT expr .)
    )               reduce using rule 17 (expr -> NOT expr .)
    ,               reduce using rule 17 (expr -> NOT expr .)
    ]               reduce using rule 17 (expr -> NOT expr .)


state 78

    (18) expr -> MINUS expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 18 (expr -> MINUS expr .)
    DIVIDE_ASSIGN   reduce using rule 18 (expr -> MINUS expr .)
    TIMES_ASSIGN    reduce using rule 18 (expr -> MINUS expr .)
    MINUS_ASSIGN    reduce using rule 18 (expr -> MINUS expr .)
    PLUS_ASSIGN     reduce using rule 18 (expr -> MINUS expr .)
    ASSIGN          reduce using rule 18 (expr -> MINUS expr .)
    ;               reduce using rule 18 (expr -> MINUS expr .)
    [               reduce using rule 18 (expr -> MINUS expr .)
    (               reduce using rule 18 (expr -> MINUS expr .)
    '               reduce using rule 18 (expr -> MINUS expr .)
    :               reduce using rule 18 (expr -> MINUS expr .)
    XOR             reduce using rule 18 (expr -> MINUS expr .)
    OR              reduce using rule 18 (expr -> MINUS expr .)
    AND             reduce using rule 18 (expr -> MINUS expr .)
    LOWER_EQUAL     reduce using rule 18 (expr -> MINUS expr .)
    LOWER           reduce using rule 18 (expr -> MINUS expr .)
    GREATER_EQUAL   reduce using rule 18 (expr -> MINUS expr .)
    GREATER         reduce using rule 18 (expr -> MINUS expr .)
    NOT_EQUAL       reduce using rule 18 (expr -> MINUS expr .)
    EQUAL           reduce using rule 18 (expr -> MINUS expr .)
    DOT_REMAINDER   reduce using rule 18 (expr -> MINUS expr .)
    DOT_DIVIDE      reduce using rule 18 (expr -> MINUS expr .)
    DOT_TIMES       reduce using rule 18 (expr -> MINUS expr .)
    DOT_MINUS       reduce using rule 18 (expr -> MINUS expr .)
    DOT_PLUS        reduce using rule 18 (expr -> MINUS expr .)
    REMAINDER       reduce using rule 18 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 18 (expr -> MINUS expr .)
    TIMES           reduce using rule 18 (expr -> MINUS expr .)
    MINUS           reduce using rule 18 (expr -> MINUS expr .)
    PLUS            reduce using rule 18 (expr -> MINUS expr .)
    )               reduce using rule 18 (expr -> MINUS expr .)
    ,               reduce using rule 18 (expr -> MINUS expr .)
    ]               reduce using rule 18 (expr -> MINUS expr .)


state 79

    (46) function -> FUNCTION ID . ( expr_list ) statement
    (               shift and go to state 123


state 80

    (47) statement -> { statement_series } .
    {               reduce using rule 47 (statement -> { statement_series } .)
    FOR             reduce using rule 47 (statement -> { statement_series } .)
    WHILE           reduce using rule 47 (statement -> { statement_series } .)
    IF              reduce using rule 47 (statement -> { statement_series } .)
    CONTINUE        reduce using rule 47 (statement -> { statement_series } .)
    BREAK           reduce using rule 47 (statement -> { statement_series } .)
    RETURN          reduce using rule 47 (statement -> { statement_series } .)
    PRINT           reduce using rule 47 (statement -> { statement_series } .)
    ZEROS           reduce using rule 47 (statement -> { statement_series } .)
    ONES            reduce using rule 47 (statement -> { statement_series } .)
    EYE             reduce using rule 47 (statement -> { statement_series } .)
    STRING          reduce using rule 47 (statement -> { statement_series } .)
    FLOAT_NUMBER    reduce using rule 47 (statement -> { statement_series } .)
    INT_NUMBER      reduce using rule 47 (statement -> { statement_series } .)
    ID              reduce using rule 47 (statement -> { statement_series } .)
    (               reduce using rule 47 (statement -> { statement_series } .)
    NOT             reduce using rule 47 (statement -> { statement_series } .)
    MINUS           reduce using rule 47 (statement -> { statement_series } .)
    FUNCTION        reduce using rule 47 (statement -> { statement_series } .)
    [               reduce using rule 47 (statement -> { statement_series } .)
    $end            reduce using rule 47 (statement -> { statement_series } .)
    }               reduce using rule 47 (statement -> { statement_series } .)
    ELSE            reduce using rule 47 (statement -> { statement_series } .)


state 81

    (64) statement_series -> statement_series statement .
    }               reduce using rule 64 (statement_series -> statement_series statement .)
    {               reduce using rule 64 (statement_series -> statement_series statement .)
    FOR             reduce using rule 64 (statement_series -> statement_series statement .)
    WHILE           reduce using rule 64 (statement_series -> statement_series statement .)
    IF              reduce using rule 64 (statement_series -> statement_series statement .)
    CONTINUE        reduce using rule 64 (statement_series -> statement_series statement .)
    BREAK           reduce using rule 64 (statement_series -> statement_series statement .)
    RETURN          reduce using rule 64 (statement_series -> statement_series statement .)
    PRINT           reduce using rule 64 (statement_series -> statement_series statement .)
    ZEROS           reduce using rule 64 (statement_series -> statement_series statement .)
    ONES            reduce using rule 64 (statement_series -> statement_series statement .)
    EYE             reduce using rule 64 (statement_series -> statement_series statement .)
    STRING          reduce using rule 64 (statement_series -> statement_series statement .)
    FLOAT_NUMBER    reduce using rule 64 (statement_series -> statement_series statement .)
    INT_NUMBER      reduce using rule 64 (statement_series -> statement_series statement .)
    ID              reduce using rule 64 (statement_series -> statement_series statement .)
    (               reduce using rule 64 (statement_series -> statement_series statement .)
    NOT             reduce using rule 64 (statement_series -> statement_series statement .)
    MINUS           reduce using rule 64 (statement_series -> statement_series statement .)
    FUNCTION        reduce using rule 64 (statement_series -> statement_series statement .)
    [               reduce using rule 64 (statement_series -> statement_series statement .)


state 82

    (48) statement -> FOR ( ID . IN expr ) statement
    IN              shift and go to state 124


state 83

    (15) expr -> ( expr ) .
    REMAINDER_ASSIGN reduce using rule 15 (expr -> ( expr ) .)
    DIVIDE_ASSIGN   reduce using rule 15 (expr -> ( expr ) .)
    TIMES_ASSIGN    reduce using rule 15 (expr -> ( expr ) .)
    MINUS_ASSIGN    reduce using rule 15 (expr -> ( expr ) .)
    PLUS_ASSIGN     reduce using rule 15 (expr -> ( expr ) .)
    ASSIGN          reduce using rule 15 (expr -> ( expr ) .)
    ;               reduce using rule 15 (expr -> ( expr ) .)
    [               reduce using rule 15 (expr -> ( expr ) .)
    (               reduce using rule 15 (expr -> ( expr ) .)
    '               reduce using rule 15 (expr -> ( expr ) .)
    :               reduce using rule 15 (expr -> ( expr ) .)
    XOR             reduce using rule 15 (expr -> ( expr ) .)
    OR              reduce using rule 15 (expr -> ( expr ) .)
    AND             reduce using rule 15 (expr -> ( expr ) .)
    LOWER_EQUAL     reduce using rule 15 (expr -> ( expr ) .)
    LOWER           reduce using rule 15 (expr -> ( expr ) .)
    GREATER_EQUAL   reduce using rule 15 (expr -> ( expr ) .)
    GREATER         reduce using rule 15 (expr -> ( expr ) .)
    NOT_EQUAL       reduce using rule 15 (expr -> ( expr ) .)
    EQUAL           reduce using rule 15 (expr -> ( expr ) .)
    DOT_REMAINDER   reduce using rule 15 (expr -> ( expr ) .)
    DOT_DIVIDE      reduce using rule 15 (expr -> ( expr ) .)
    DOT_TIMES       reduce using rule 15 (expr -> ( expr ) .)
    DOT_MINUS       reduce using rule 15 (expr -> ( expr ) .)
    DOT_PLUS        reduce using rule 15 (expr -> ( expr ) .)
    REMAINDER       reduce using rule 15 (expr -> ( expr ) .)
    DIVIDE          reduce using rule 15 (expr -> ( expr ) .)
    TIMES           reduce using rule 15 (expr -> ( expr ) .)
    MINUS           reduce using rule 15 (expr -> ( expr ) .)
    PLUS            reduce using rule 15 (expr -> ( expr ) .)
    )               reduce using rule 15 (expr -> ( expr ) .)
    ,               reduce using rule 15 (expr -> ( expr ) .)
    ]               reduce using rule 15 (expr -> ( expr ) .)


state 84

    (52) statement -> expr REMAINDER_ASSIGN expr . ;
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    ;               shift and go to state 125
    [               shift and go to state 40
    (               shift and go to state 41
    '               shift and go to state 42
    :               shift and go to state 43
    XOR             shift and go to state 44
    OR              shift and go to state 45
    AND             shift and go to state 46
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 85

    (53) statement -> expr DIVIDE_ASSIGN expr . ;
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    ;               shift and go to state 126
    [               shift and go to state 40
    (               shift and go to state 41
    '               shift and go to state 42
    :               shift and go to state 43
    XOR             shift and go to state 44
    OR              shift and go to state 45
    AND             shift and go to state 46
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 86

    (54) statement -> expr TIMES_ASSIGN expr . ;
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    ;               shift and go to state 127
    [               shift and go to state 40
    (               shift and go to state 41
    '               shift and go to state 42
    :               shift and go to state 43
    XOR             shift and go to state 44
    OR              shift and go to state 45
    AND             shift and go to state 46
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 87

    (55) statement -> expr MINUS_ASSIGN expr . ;
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    ;               shift and go to state 128
    [               shift and go to state 40
    (               shift and go to state 41
    '               shift and go to state 42
    :               shift and go to state 43
    XOR             shift and go to state 44
    OR              shift and go to state 45
    AND             shift and go to state 46
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 88

    (56) statement -> expr PLUS_ASSIGN expr . ;
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    ;               shift and go to state 129
    [               shift and go to state 40
    (               shift and go to state 41
    '               shift and go to state 42
    :               shift and go to state 43
    XOR             shift and go to state 44
    OR              shift and go to state 45
    AND             shift and go to state 46
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 89

    (57) statement -> expr ASSIGN expr . ;
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    ;               shift and go to state 130
    [               shift and go to state 40
    (               shift and go to state 41
    '               shift and go to state 42
    :               shift and go to state 43
    XOR             shift and go to state 44
    OR              shift and go to state 45
    AND             shift and go to state 46
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 90

    (4) expr -> expr [ expr_list . ]
    (40) expr_list -> expr_list . , expr
    ]               shift and go to state 131
    ,               shift and go to state 115


state 91

    (5) expr -> expr ( expr_list . )
    (40) expr_list -> expr_list . , expr
    )               shift and go to state 132
    ,               shift and go to state 115


state 92

    (19) expr -> expr : expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 19 (expr -> expr : expr .)
    DIVIDE_ASSIGN   reduce using rule 19 (expr -> expr : expr .)
    TIMES_ASSIGN    reduce using rule 19 (expr -> expr : expr .)
    MINUS_ASSIGN    reduce using rule 19 (expr -> expr : expr .)
    PLUS_ASSIGN     reduce using rule 19 (expr -> expr : expr .)
    ASSIGN          reduce using rule 19 (expr -> expr : expr .)
    ;               reduce using rule 19 (expr -> expr : expr .)
    [               reduce using rule 19 (expr -> expr : expr .)
    (               reduce using rule 19 (expr -> expr : expr .)
    '               reduce using rule 19 (expr -> expr : expr .)
    :               reduce using rule 19 (expr -> expr : expr .)
    )               reduce using rule 19 (expr -> expr : expr .)
    ,               reduce using rule 19 (expr -> expr : expr .)
    ]               reduce using rule 19 (expr -> expr : expr .)
    XOR             shift and go to state 44
    OR              shift and go to state 45
    AND             shift and go to state 46
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 93

    (20) expr -> expr XOR expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 20 (expr -> expr XOR expr .)
    DIVIDE_ASSIGN   reduce using rule 20 (expr -> expr XOR expr .)
    TIMES_ASSIGN    reduce using rule 20 (expr -> expr XOR expr .)
    MINUS_ASSIGN    reduce using rule 20 (expr -> expr XOR expr .)
    PLUS_ASSIGN     reduce using rule 20 (expr -> expr XOR expr .)
    ASSIGN          reduce using rule 20 (expr -> expr XOR expr .)
    ;               reduce using rule 20 (expr -> expr XOR expr .)
    [               reduce using rule 20 (expr -> expr XOR expr .)
    (               reduce using rule 20 (expr -> expr XOR expr .)
    '               reduce using rule 20 (expr -> expr XOR expr .)
    :               reduce using rule 20 (expr -> expr XOR expr .)
    XOR             reduce using rule 20 (expr -> expr XOR expr .)
    OR              reduce using rule 20 (expr -> expr XOR expr .)
    AND             reduce using rule 20 (expr -> expr XOR expr .)
    )               reduce using rule 20 (expr -> expr XOR expr .)
    ,               reduce using rule 20 (expr -> expr XOR expr .)
    ]               reduce using rule 20 (expr -> expr XOR expr .)
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 94

    (21) expr -> expr OR expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 21 (expr -> expr OR expr .)
    DIVIDE_ASSIGN   reduce using rule 21 (expr -> expr OR expr .)
    TIMES_ASSIGN    reduce using rule 21 (expr -> expr OR expr .)
    MINUS_ASSIGN    reduce using rule 21 (expr -> expr OR expr .)
    PLUS_ASSIGN     reduce using rule 21 (expr -> expr OR expr .)
    ASSIGN          reduce using rule 21 (expr -> expr OR expr .)
    ;               reduce using rule 21 (expr -> expr OR expr .)
    [               reduce using rule 21 (expr -> expr OR expr .)
    (               reduce using rule 21 (expr -> expr OR expr .)
    '               reduce using rule 21 (expr -> expr OR expr .)
    :               reduce using rule 21 (expr -> expr OR expr .)
    XOR             reduce using rule 21 (expr -> expr OR expr .)
    OR              reduce using rule 21 (expr -> expr OR expr .)
    AND             reduce using rule 21 (expr -> expr OR expr .)
    )               reduce using rule 21 (expr -> expr OR expr .)
    ,               reduce using rule 21 (expr -> expr OR expr .)
    ]               reduce using rule 21 (expr -> expr OR expr .)
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 95

    (22) expr -> expr AND expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 22 (expr -> expr AND expr .)
    DIVIDE_ASSIGN   reduce using rule 22 (expr -> expr AND expr .)
    TIMES_ASSIGN    reduce using rule 22 (expr -> expr AND expr .)
    MINUS_ASSIGN    reduce using rule 22 (expr -> expr AND expr .)
    PLUS_ASSIGN     reduce using rule 22 (expr -> expr AND expr .)
    ASSIGN          reduce using rule 22 (expr -> expr AND expr .)
    ;               reduce using rule 22 (expr -> expr AND expr .)
    [               reduce using rule 22 (expr -> expr AND expr .)
    (               reduce using rule 22 (expr -> expr AND expr .)
    '               reduce using rule 22 (expr -> expr AND expr .)
    :               reduce using rule 22 (expr -> expr AND expr .)
    XOR             reduce using rule 22 (expr -> expr AND expr .)
    OR              reduce using rule 22 (expr -> expr AND expr .)
    AND             reduce using rule 22 (expr -> expr AND expr .)
    )               reduce using rule 22 (expr -> expr AND expr .)
    ,               reduce using rule 22 (expr -> expr AND expr .)
    ]               reduce using rule 22 (expr -> expr AND expr .)
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 96

    (23) expr -> expr LOWER_EQUAL expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    DIVIDE_ASSIGN   reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    TIMES_ASSIGN    reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    MINUS_ASSIGN    reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    PLUS_ASSIGN     reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    ASSIGN          reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    ;               reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    [               reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    (               reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    '               reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    :               reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    XOR             reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    OR              reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    AND             reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    LOWER_EQUAL     reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    LOWER           reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    GREATER         reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    NOT_EQUAL       reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    EQUAL           reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    )               reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    ,               reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    ]               reduce using rule 23 (expr -> expr LOWER_EQUAL expr .)
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 97

    (24) expr -> expr LOWER expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 24 (expr -> expr LOWER expr .)
    DIVIDE_ASSIGN   reduce using rule 24 (expr -> expr LOWER expr .)
    TIMES_ASSIGN    reduce using rule 24 (expr -> expr LOWER expr .)
    MINUS_ASSIGN    reduce using rule 24 (expr -> expr LOWER expr .)
    PLUS_ASSIGN     reduce using rule 24 (expr -> expr LOWER expr .)
    ASSIGN          reduce using rule 24 (expr -> expr LOWER expr .)
    ;               reduce using rule 24 (expr -> expr LOWER expr .)
    [               reduce using rule 24 (expr -> expr LOWER expr .)
    (               reduce using rule 24 (expr -> expr LOWER expr .)
    '               reduce using rule 24 (expr -> expr LOWER expr .)
    :               reduce using rule 24 (expr -> expr LOWER expr .)
    XOR             reduce using rule 24 (expr -> expr LOWER expr .)
    OR              reduce using rule 24 (expr -> expr LOWER expr .)
    AND             reduce using rule 24 (expr -> expr LOWER expr .)
    LOWER_EQUAL     reduce using rule 24 (expr -> expr LOWER expr .)
    LOWER           reduce using rule 24 (expr -> expr LOWER expr .)
    GREATER_EQUAL   reduce using rule 24 (expr -> expr LOWER expr .)
    GREATER         reduce using rule 24 (expr -> expr LOWER expr .)
    NOT_EQUAL       reduce using rule 24 (expr -> expr LOWER expr .)
    EQUAL           reduce using rule 24 (expr -> expr LOWER expr .)
    )               reduce using rule 24 (expr -> expr LOWER expr .)
    ,               reduce using rule 24 (expr -> expr LOWER expr .)
    ]               reduce using rule 24 (expr -> expr LOWER expr .)
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 98

    (25) expr -> expr GREATER_EQUAL expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    DIVIDE_ASSIGN   reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    TIMES_ASSIGN    reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    MINUS_ASSIGN    reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    PLUS_ASSIGN     reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    ASSIGN          reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    ;               reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    [               reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    (               reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    '               reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    :               reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    XOR             reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    OR              reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    AND             reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    LOWER_EQUAL     reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    LOWER           reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    GREATER         reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    NOT_EQUAL       reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    EQUAL           reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    )               reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    ,               reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    ]               reduce using rule 25 (expr -> expr GREATER_EQUAL expr .)
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 99

    (26) expr -> expr GREATER expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 26 (expr -> expr GREATER expr .)
    DIVIDE_ASSIGN   reduce using rule 26 (expr -> expr GREATER expr .)
    TIMES_ASSIGN    reduce using rule 26 (expr -> expr GREATER expr .)
    MINUS_ASSIGN    reduce using rule 26 (expr -> expr GREATER expr .)
    PLUS_ASSIGN     reduce using rule 26 (expr -> expr GREATER expr .)
    ASSIGN          reduce using rule 26 (expr -> expr GREATER expr .)
    ;               reduce using rule 26 (expr -> expr GREATER expr .)
    [               reduce using rule 26 (expr -> expr GREATER expr .)
    (               reduce using rule 26 (expr -> expr GREATER expr .)
    '               reduce using rule 26 (expr -> expr GREATER expr .)
    :               reduce using rule 26 (expr -> expr GREATER expr .)
    XOR             reduce using rule 26 (expr -> expr GREATER expr .)
    OR              reduce using rule 26 (expr -> expr GREATER expr .)
    AND             reduce using rule 26 (expr -> expr GREATER expr .)
    LOWER_EQUAL     reduce using rule 26 (expr -> expr GREATER expr .)
    LOWER           reduce using rule 26 (expr -> expr GREATER expr .)
    GREATER_EQUAL   reduce using rule 26 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 26 (expr -> expr GREATER expr .)
    NOT_EQUAL       reduce using rule 26 (expr -> expr GREATER expr .)
    EQUAL           reduce using rule 26 (expr -> expr GREATER expr .)
    )               reduce using rule 26 (expr -> expr GREATER expr .)
    ,               reduce using rule 26 (expr -> expr GREATER expr .)
    ]               reduce using rule 26 (expr -> expr GREATER expr .)
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 100

    (27) expr -> expr NOT_EQUAL expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    DIVIDE_ASSIGN   reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    TIMES_ASSIGN    reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    MINUS_ASSIGN    reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    PLUS_ASSIGN     reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    ASSIGN          reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    ;               reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    [               reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    (               reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    '               reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    :               reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    XOR             reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    OR              reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    AND             reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    LOWER_EQUAL     reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    LOWER           reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    GREATER         reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    NOT_EQUAL       reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    EQUAL           reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    )               reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    ,               reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    ]               reduce using rule 27 (expr -> expr NOT_EQUAL expr .)
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 101

    (28) expr -> expr EQUAL expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 28 (expr -> expr EQUAL expr .)
    DIVIDE_ASSIGN   reduce using rule 28 (expr -> expr EQUAL expr .)
    TIMES_ASSIGN    reduce using rule 28 (expr -> expr EQUAL expr .)
    MINUS_ASSIGN    reduce using rule 28 (expr -> expr EQUAL expr .)
    PLUS_ASSIGN     reduce using rule 28 (expr -> expr EQUAL expr .)
    ASSIGN          reduce using rule 28 (expr -> expr EQUAL expr .)
    ;               reduce using rule 28 (expr -> expr EQUAL expr .)
    [               reduce using rule 28 (expr -> expr EQUAL expr .)
    (               reduce using rule 28 (expr -> expr EQUAL expr .)
    '               reduce using rule 28 (expr -> expr EQUAL expr .)
    :               reduce using rule 28 (expr -> expr EQUAL expr .)
    XOR             reduce using rule 28 (expr -> expr EQUAL expr .)
    OR              reduce using rule 28 (expr -> expr EQUAL expr .)
    AND             reduce using rule 28 (expr -> expr EQUAL expr .)
    LOWER_EQUAL     reduce using rule 28 (expr -> expr EQUAL expr .)
    LOWER           reduce using rule 28 (expr -> expr EQUAL expr .)
    GREATER_EQUAL   reduce using rule 28 (expr -> expr EQUAL expr .)
    GREATER         reduce using rule 28 (expr -> expr EQUAL expr .)
    NOT_EQUAL       reduce using rule 28 (expr -> expr EQUAL expr .)
    EQUAL           reduce using rule 28 (expr -> expr EQUAL expr .)
    )               reduce using rule 28 (expr -> expr EQUAL expr .)
    ,               reduce using rule 28 (expr -> expr EQUAL expr .)
    ]               reduce using rule 28 (expr -> expr EQUAL expr .)
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 102

    (29) expr -> expr DOT_REMAINDER expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    DIVIDE_ASSIGN   reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    TIMES_ASSIGN    reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    MINUS_ASSIGN    reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    PLUS_ASSIGN     reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    ASSIGN          reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    ;               reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    [               reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    (               reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    '               reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    :               reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    XOR             reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    OR              reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    AND             reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    LOWER_EQUAL     reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    LOWER           reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    GREATER_EQUAL   reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    GREATER         reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    NOT_EQUAL       reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    EQUAL           reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    DOT_REMAINDER   reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    DOT_DIVIDE      reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    DOT_TIMES       reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    DOT_MINUS       reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    DOT_PLUS        reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    REMAINDER       reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    DIVIDE          reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    TIMES           reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    MINUS           reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    PLUS            reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    )               reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    ,               reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)
    ]               reduce using rule 29 (expr -> expr DOT_REMAINDER expr .)


state 103

    (30) expr -> expr DOT_DIVIDE expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    DIVIDE_ASSIGN   reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    TIMES_ASSIGN    reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    MINUS_ASSIGN    reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    PLUS_ASSIGN     reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    ASSIGN          reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    ;               reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    [               reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    (               reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    '               reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    :               reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    XOR             reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    OR              reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    AND             reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    LOWER_EQUAL     reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    LOWER           reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    GREATER_EQUAL   reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    GREATER         reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    NOT_EQUAL       reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    EQUAL           reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    DOT_REMAINDER   reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    DOT_DIVIDE      reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    DOT_TIMES       reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    DOT_MINUS       reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    DOT_PLUS        reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    REMAINDER       reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    DIVIDE          reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    TIMES           reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    MINUS           reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    PLUS            reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    )               reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    ,               reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)
    ]               reduce using rule 30 (expr -> expr DOT_DIVIDE expr .)


state 104

    (31) expr -> expr DOT_TIMES expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    DIVIDE_ASSIGN   reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    TIMES_ASSIGN    reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    MINUS_ASSIGN    reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    PLUS_ASSIGN     reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    ASSIGN          reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    ;               reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    [               reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    (               reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    '               reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    :               reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    XOR             reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    OR              reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    AND             reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    LOWER_EQUAL     reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    LOWER           reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    GREATER_EQUAL   reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    GREATER         reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    NOT_EQUAL       reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    EQUAL           reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    DOT_REMAINDER   reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    DOT_DIVIDE      reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    DOT_TIMES       reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    DOT_MINUS       reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    DOT_PLUS        reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    REMAINDER       reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    DIVIDE          reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    TIMES           reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    MINUS           reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    PLUS            reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    )               reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    ,               reduce using rule 31 (expr -> expr DOT_TIMES expr .)
    ]               reduce using rule 31 (expr -> expr DOT_TIMES expr .)


state 105

    (32) expr -> expr DOT_MINUS expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    DIVIDE_ASSIGN   reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    TIMES_ASSIGN    reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    MINUS_ASSIGN    reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    PLUS_ASSIGN     reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    ASSIGN          reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    ;               reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    [               reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    (               reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    '               reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    :               reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    XOR             reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    OR              reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    AND             reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    LOWER_EQUAL     reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    LOWER           reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    GREATER_EQUAL   reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    GREATER         reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    NOT_EQUAL       reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    EQUAL           reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    DOT_MINUS       reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    DOT_PLUS        reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    MINUS           reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    PLUS            reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    )               reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    ,               reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    ]               reduce using rule 32 (expr -> expr DOT_MINUS expr .)
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60


state 106

    (33) expr -> expr DOT_PLUS expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    DIVIDE_ASSIGN   reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    TIMES_ASSIGN    reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    MINUS_ASSIGN    reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    PLUS_ASSIGN     reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    ASSIGN          reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    ;               reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    [               reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    (               reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    '               reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    :               reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    XOR             reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    OR              reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    AND             reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    LOWER_EQUAL     reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    LOWER           reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    GREATER_EQUAL   reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    GREATER         reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    NOT_EQUAL       reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    EQUAL           reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    DOT_MINUS       reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    DOT_PLUS        reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    MINUS           reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    PLUS            reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    )               reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    ,               reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    ]               reduce using rule 33 (expr -> expr DOT_PLUS expr .)
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60


state 107

    (34) expr -> expr REMAINDER expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 34 (expr -> expr REMAINDER expr .)
    DIVIDE_ASSIGN   reduce using rule 34 (expr -> expr REMAINDER expr .)
    TIMES_ASSIGN    reduce using rule 34 (expr -> expr REMAINDER expr .)
    MINUS_ASSIGN    reduce using rule 34 (expr -> expr REMAINDER expr .)
    PLUS_ASSIGN     reduce using rule 34 (expr -> expr REMAINDER expr .)
    ASSIGN          reduce using rule 34 (expr -> expr REMAINDER expr .)
    ;               reduce using rule 34 (expr -> expr REMAINDER expr .)
    [               reduce using rule 34 (expr -> expr REMAINDER expr .)
    (               reduce using rule 34 (expr -> expr REMAINDER expr .)
    '               reduce using rule 34 (expr -> expr REMAINDER expr .)
    :               reduce using rule 34 (expr -> expr REMAINDER expr .)
    XOR             reduce using rule 34 (expr -> expr REMAINDER expr .)
    OR              reduce using rule 34 (expr -> expr REMAINDER expr .)
    AND             reduce using rule 34 (expr -> expr REMAINDER expr .)
    LOWER_EQUAL     reduce using rule 34 (expr -> expr REMAINDER expr .)
    LOWER           reduce using rule 34 (expr -> expr REMAINDER expr .)
    GREATER_EQUAL   reduce using rule 34 (expr -> expr REMAINDER expr .)
    GREATER         reduce using rule 34 (expr -> expr REMAINDER expr .)
    NOT_EQUAL       reduce using rule 34 (expr -> expr REMAINDER expr .)
    EQUAL           reduce using rule 34 (expr -> expr REMAINDER expr .)
    DOT_REMAINDER   reduce using rule 34 (expr -> expr REMAINDER expr .)
    DOT_DIVIDE      reduce using rule 34 (expr -> expr REMAINDER expr .)
    DOT_TIMES       reduce using rule 34 (expr -> expr REMAINDER expr .)
    DOT_MINUS       reduce using rule 34 (expr -> expr REMAINDER expr .)
    DOT_PLUS        reduce using rule 34 (expr -> expr REMAINDER expr .)
    REMAINDER       reduce using rule 34 (expr -> expr REMAINDER expr .)
    DIVIDE          reduce using rule 34 (expr -> expr REMAINDER expr .)
    TIMES           reduce using rule 34 (expr -> expr REMAINDER expr .)
    MINUS           reduce using rule 34 (expr -> expr REMAINDER expr .)
    PLUS            reduce using rule 34 (expr -> expr REMAINDER expr .)
    )               reduce using rule 34 (expr -> expr REMAINDER expr .)
    ,               reduce using rule 34 (expr -> expr REMAINDER expr .)
    ]               reduce using rule 34 (expr -> expr REMAINDER expr .)


state 108

    (35) expr -> expr DIVIDE expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 35 (expr -> expr DIVIDE expr .)
    DIVIDE_ASSIGN   reduce using rule 35 (expr -> expr DIVIDE expr .)
    TIMES_ASSIGN    reduce using rule 35 (expr -> expr DIVIDE expr .)
    MINUS_ASSIGN    reduce using rule 35 (expr -> expr DIVIDE expr .)
    PLUS_ASSIGN     reduce using rule 35 (expr -> expr DIVIDE expr .)
    ASSIGN          reduce using rule 35 (expr -> expr DIVIDE expr .)
    ;               reduce using rule 35 (expr -> expr DIVIDE expr .)
    [               reduce using rule 35 (expr -> expr DIVIDE expr .)
    (               reduce using rule 35 (expr -> expr DIVIDE expr .)
    '               reduce using rule 35 (expr -> expr DIVIDE expr .)
    :               reduce using rule 35 (expr -> expr DIVIDE expr .)
    XOR             reduce using rule 35 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 35 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 35 (expr -> expr DIVIDE expr .)
    LOWER_EQUAL     reduce using rule 35 (expr -> expr DIVIDE expr .)
    LOWER           reduce using rule 35 (expr -> expr DIVIDE expr .)
    GREATER_EQUAL   reduce using rule 35 (expr -> expr DIVIDE expr .)
    GREATER         reduce using rule 35 (expr -> expr DIVIDE expr .)
    NOT_EQUAL       reduce using rule 35 (expr -> expr DIVIDE expr .)
    EQUAL           reduce using rule 35 (expr -> expr DIVIDE expr .)
    DOT_REMAINDER   reduce using rule 35 (expr -> expr DIVIDE expr .)
    DOT_DIVIDE      reduce using rule 35 (expr -> expr DIVIDE expr .)
    DOT_TIMES       reduce using rule 35 (expr -> expr DIVIDE expr .)
    DOT_MINUS       reduce using rule 35 (expr -> expr DIVIDE expr .)
    DOT_PLUS        reduce using rule 35 (expr -> expr DIVIDE expr .)
    REMAINDER       reduce using rule 35 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 35 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 35 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 35 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 35 (expr -> expr DIVIDE expr .)
    )               reduce using rule 35 (expr -> expr DIVIDE expr .)
    ,               reduce using rule 35 (expr -> expr DIVIDE expr .)
    ]               reduce using rule 35 (expr -> expr DIVIDE expr .)


state 109

    (36) expr -> expr TIMES expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 36 (expr -> expr TIMES expr .)
    DIVIDE_ASSIGN   reduce using rule 36 (expr -> expr TIMES expr .)
    TIMES_ASSIGN    reduce using rule 36 (expr -> expr TIMES expr .)
    MINUS_ASSIGN    reduce using rule 36 (expr -> expr TIMES expr .)
    PLUS_ASSIGN     reduce using rule 36 (expr -> expr TIMES expr .)
    ASSIGN          reduce using rule 36 (expr -> expr TIMES expr .)
    ;               reduce using rule 36 (expr -> expr TIMES expr .)
    [               reduce using rule 36 (expr -> expr TIMES expr .)
    (               reduce using rule 36 (expr -> expr TIMES expr .)
    '               reduce using rule 36 (expr -> expr TIMES expr .)
    :               reduce using rule 36 (expr -> expr TIMES expr .)
    XOR             reduce using rule 36 (expr -> expr TIMES expr .)
    OR              reduce using rule 36 (expr -> expr TIMES expr .)
    AND             reduce using rule 36 (expr -> expr TIMES expr .)
    LOWER_EQUAL     reduce using rule 36 (expr -> expr TIMES expr .)
    LOWER           reduce using rule 36 (expr -> expr TIMES expr .)
    GREATER_EQUAL   reduce using rule 36 (expr -> expr TIMES expr .)
    GREATER         reduce using rule 36 (expr -> expr TIMES expr .)
    NOT_EQUAL       reduce using rule 36 (expr -> expr TIMES expr .)
    EQUAL           reduce using rule 36 (expr -> expr TIMES expr .)
    DOT_REMAINDER   reduce using rule 36 (expr -> expr TIMES expr .)
    DOT_DIVIDE      reduce using rule 36 (expr -> expr TIMES expr .)
    DOT_TIMES       reduce using rule 36 (expr -> expr TIMES expr .)
    DOT_MINUS       reduce using rule 36 (expr -> expr TIMES expr .)
    DOT_PLUS        reduce using rule 36 (expr -> expr TIMES expr .)
    REMAINDER       reduce using rule 36 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 36 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 36 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 36 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 36 (expr -> expr TIMES expr .)
    )               reduce using rule 36 (expr -> expr TIMES expr .)
    ,               reduce using rule 36 (expr -> expr TIMES expr .)
    ]               reduce using rule 36 (expr -> expr TIMES expr .)


state 110

    (37) expr -> expr MINUS expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 37 (expr -> expr MINUS expr .)
    DIVIDE_ASSIGN   reduce using rule 37 (expr -> expr MINUS expr .)
    TIMES_ASSIGN    reduce using rule 37 (expr -> expr MINUS expr .)
    MINUS_ASSIGN    reduce using rule 37 (expr -> expr MINUS expr .)
    PLUS_ASSIGN     reduce using rule 37 (expr -> expr MINUS expr .)
    ASSIGN          reduce using rule 37 (expr -> expr MINUS expr .)
    ;               reduce using rule 37 (expr -> expr MINUS expr .)
    [               reduce using rule 37 (expr -> expr MINUS expr .)
    (               reduce using rule 37 (expr -> expr MINUS expr .)
    '               reduce using rule 37 (expr -> expr MINUS expr .)
    :               reduce using rule 37 (expr -> expr MINUS expr .)
    XOR             reduce using rule 37 (expr -> expr MINUS expr .)
    OR              reduce using rule 37 (expr -> expr MINUS expr .)
    AND             reduce using rule 37 (expr -> expr MINUS expr .)
    LOWER_EQUAL     reduce using rule 37 (expr -> expr MINUS expr .)
    LOWER           reduce using rule 37 (expr -> expr MINUS expr .)
    GREATER_EQUAL   reduce using rule 37 (expr -> expr MINUS expr .)
    GREATER         reduce using rule 37 (expr -> expr MINUS expr .)
    NOT_EQUAL       reduce using rule 37 (expr -> expr MINUS expr .)
    EQUAL           reduce using rule 37 (expr -> expr MINUS expr .)
    DOT_MINUS       reduce using rule 37 (expr -> expr MINUS expr .)
    DOT_PLUS        reduce using rule 37 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 37 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 37 (expr -> expr MINUS expr .)
    )               reduce using rule 37 (expr -> expr MINUS expr .)
    ,               reduce using rule 37 (expr -> expr MINUS expr .)
    ]               reduce using rule 37 (expr -> expr MINUS expr .)
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60


state 111

    (38) expr -> expr PLUS expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    REMAINDER_ASSIGN reduce using rule 38 (expr -> expr PLUS expr .)
    DIVIDE_ASSIGN   reduce using rule 38 (expr -> expr PLUS expr .)
    TIMES_ASSIGN    reduce using rule 38 (expr -> expr PLUS expr .)
    MINUS_ASSIGN    reduce using rule 38 (expr -> expr PLUS expr .)
    PLUS_ASSIGN     reduce using rule 38 (expr -> expr PLUS expr .)
    ASSIGN          reduce using rule 38 (expr -> expr PLUS expr .)
    ;               reduce using rule 38 (expr -> expr PLUS expr .)
    [               reduce using rule 38 (expr -> expr PLUS expr .)
    (               reduce using rule 38 (expr -> expr PLUS expr .)
    '               reduce using rule 38 (expr -> expr PLUS expr .)
    :               reduce using rule 38 (expr -> expr PLUS expr .)
    XOR             reduce using rule 38 (expr -> expr PLUS expr .)
    OR              reduce using rule 38 (expr -> expr PLUS expr .)
    AND             reduce using rule 38 (expr -> expr PLUS expr .)
    LOWER_EQUAL     reduce using rule 38 (expr -> expr PLUS expr .)
    LOWER           reduce using rule 38 (expr -> expr PLUS expr .)
    GREATER_EQUAL   reduce using rule 38 (expr -> expr PLUS expr .)
    GREATER         reduce using rule 38 (expr -> expr PLUS expr .)
    NOT_EQUAL       reduce using rule 38 (expr -> expr PLUS expr .)
    EQUAL           reduce using rule 38 (expr -> expr PLUS expr .)
    DOT_MINUS       reduce using rule 38 (expr -> expr PLUS expr .)
    DOT_PLUS        reduce using rule 38 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 38 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 38 (expr -> expr PLUS expr .)
    )               reduce using rule 38 (expr -> expr PLUS expr .)
    ,               reduce using rule 38 (expr -> expr PLUS expr .)
    ]               reduce using rule 38 (expr -> expr PLUS expr .)
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60


state 112

    (49) statement -> WHILE ( expr . ) statement
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    )               shift and go to state 133
    [               shift and go to state 40
    (               shift and go to state 41
    '               shift and go to state 42
    :               shift and go to state 43
    XOR             shift and go to state 44
    OR              shift and go to state 45
    AND             shift and go to state 46
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 113

    (50) statement -> IF ( expr . ) statement ELSE statement
    (51) statement -> IF ( expr . ) statement
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    )               shift and go to state 134
    [               shift and go to state 40
    (               shift and go to state 41
    '               shift and go to state 42
    :               shift and go to state 43
    XOR             shift and go to state 44
    OR              shift and go to state 45
    AND             shift and go to state 46
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 114

    (60) statement -> RETURN expr_list ; .
    {               reduce using rule 60 (statement -> RETURN expr_list ; .)
    FOR             reduce using rule 60 (statement -> RETURN expr_list ; .)
    WHILE           reduce using rule 60 (statement -> RETURN expr_list ; .)
    IF              reduce using rule 60 (statement -> RETURN expr_list ; .)
    CONTINUE        reduce using rule 60 (statement -> RETURN expr_list ; .)
    BREAK           reduce using rule 60 (statement -> RETURN expr_list ; .)
    RETURN          reduce using rule 60 (statement -> RETURN expr_list ; .)
    PRINT           reduce using rule 60 (statement -> RETURN expr_list ; .)
    ZEROS           reduce using rule 60 (statement -> RETURN expr_list ; .)
    ONES            reduce using rule 60 (statement -> RETURN expr_list ; .)
    EYE             reduce using rule 60 (statement -> RETURN expr_list ; .)
    STRING          reduce using rule 60 (statement -> RETURN expr_list ; .)
    FLOAT_NUMBER    reduce using rule 60 (statement -> RETURN expr_list ; .)
    INT_NUMBER      reduce using rule 60 (statement -> RETURN expr_list ; .)
    ID              reduce using rule 60 (statement -> RETURN expr_list ; .)
    (               reduce using rule 60 (statement -> RETURN expr_list ; .)
    NOT             reduce using rule 60 (statement -> RETURN expr_list ; .)
    MINUS           reduce using rule 60 (statement -> RETURN expr_list ; .)
    FUNCTION        reduce using rule 60 (statement -> RETURN expr_list ; .)
    [               reduce using rule 60 (statement -> RETURN expr_list ; .)
    $end            reduce using rule 60 (statement -> RETURN expr_list ; .)
    }               reduce using rule 60 (statement -> RETURN expr_list ; .)
    ELSE            reduce using rule 60 (statement -> RETURN expr_list ; .)


state 115

    (40) expr_list -> expr_list , . expr
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 135
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 116

    (61) statement -> PRINT expr_list ; .
    {               reduce using rule 61 (statement -> PRINT expr_list ; .)
    FOR             reduce using rule 61 (statement -> PRINT expr_list ; .)
    WHILE           reduce using rule 61 (statement -> PRINT expr_list ; .)
    IF              reduce using rule 61 (statement -> PRINT expr_list ; .)
    CONTINUE        reduce using rule 61 (statement -> PRINT expr_list ; .)
    BREAK           reduce using rule 61 (statement -> PRINT expr_list ; .)
    RETURN          reduce using rule 61 (statement -> PRINT expr_list ; .)
    PRINT           reduce using rule 61 (statement -> PRINT expr_list ; .)
    ZEROS           reduce using rule 61 (statement -> PRINT expr_list ; .)
    ONES            reduce using rule 61 (statement -> PRINT expr_list ; .)
    EYE             reduce using rule 61 (statement -> PRINT expr_list ; .)
    STRING          reduce using rule 61 (statement -> PRINT expr_list ; .)
    FLOAT_NUMBER    reduce using rule 61 (statement -> PRINT expr_list ; .)
    INT_NUMBER      reduce using rule 61 (statement -> PRINT expr_list ; .)
    ID              reduce using rule 61 (statement -> PRINT expr_list ; .)
    (               reduce using rule 61 (statement -> PRINT expr_list ; .)
    NOT             reduce using rule 61 (statement -> PRINT expr_list ; .)
    MINUS           reduce using rule 61 (statement -> PRINT expr_list ; .)
    FUNCTION        reduce using rule 61 (statement -> PRINT expr_list ; .)
    [               reduce using rule 61 (statement -> PRINT expr_list ; .)
    $end            reduce using rule 61 (statement -> PRINT expr_list ; .)
    }               reduce using rule 61 (statement -> PRINT expr_list ; .)
    ELSE            reduce using rule 61 (statement -> PRINT expr_list ; .)


state 117

    (45) matrix -> [ vector_list ] .
    REMAINDER_ASSIGN reduce using rule 45 (matrix -> [ vector_list ] .)
    DIVIDE_ASSIGN   reduce using rule 45 (matrix -> [ vector_list ] .)
    TIMES_ASSIGN    reduce using rule 45 (matrix -> [ vector_list ] .)
    MINUS_ASSIGN    reduce using rule 45 (matrix -> [ vector_list ] .)
    PLUS_ASSIGN     reduce using rule 45 (matrix -> [ vector_list ] .)
    ASSIGN          reduce using rule 45 (matrix -> [ vector_list ] .)
    ;               reduce using rule 45 (matrix -> [ vector_list ] .)
    [               reduce using rule 45 (matrix -> [ vector_list ] .)
    (               reduce using rule 45 (matrix -> [ vector_list ] .)
    '               reduce using rule 45 (matrix -> [ vector_list ] .)
    :               reduce using rule 45 (matrix -> [ vector_list ] .)
    XOR             reduce using rule 45 (matrix -> [ vector_list ] .)
    OR              reduce using rule 45 (matrix -> [ vector_list ] .)
    AND             reduce using rule 45 (matrix -> [ vector_list ] .)
    LOWER_EQUAL     reduce using rule 45 (matrix -> [ vector_list ] .)
    LOWER           reduce using rule 45 (matrix -> [ vector_list ] .)
    GREATER_EQUAL   reduce using rule 45 (matrix -> [ vector_list ] .)
    GREATER         reduce using rule 45 (matrix -> [ vector_list ] .)
    NOT_EQUAL       reduce using rule 45 (matrix -> [ vector_list ] .)
    EQUAL           reduce using rule 45 (matrix -> [ vector_list ] .)
    DOT_REMAINDER   reduce using rule 45 (matrix -> [ vector_list ] .)
    DOT_DIVIDE      reduce using rule 45 (matrix -> [ vector_list ] .)
    DOT_TIMES       reduce using rule 45 (matrix -> [ vector_list ] .)
    DOT_MINUS       reduce using rule 45 (matrix -> [ vector_list ] .)
    DOT_PLUS        reduce using rule 45 (matrix -> [ vector_list ] .)
    REMAINDER       reduce using rule 45 (matrix -> [ vector_list ] .)
    DIVIDE          reduce using rule 45 (matrix -> [ vector_list ] .)
    TIMES           reduce using rule 45 (matrix -> [ vector_list ] .)
    MINUS           reduce using rule 45 (matrix -> [ vector_list ] .)
    PLUS            reduce using rule 45 (matrix -> [ vector_list ] .)
    )               reduce using rule 45 (matrix -> [ vector_list ] .)
    ,               reduce using rule 45 (matrix -> [ vector_list ] .)
    ]               reduce using rule 45 (matrix -> [ vector_list ] .)


state 118

    (43) vector_list -> vector_list , . vector
    (42) vector -> . [ expr_list ]
    [               shift and go to state 137

    vector                         shift and go to state 136

state 119

    (42) vector -> [ expr_list ] .
    REMAINDER_ASSIGN reduce using rule 42 (vector -> [ expr_list ] .)
    DIVIDE_ASSIGN   reduce using rule 42 (vector -> [ expr_list ] .)
    TIMES_ASSIGN    reduce using rule 42 (vector -> [ expr_list ] .)
    MINUS_ASSIGN    reduce using rule 42 (vector -> [ expr_list ] .)
    PLUS_ASSIGN     reduce using rule 42 (vector -> [ expr_list ] .)
    ASSIGN          reduce using rule 42 (vector -> [ expr_list ] .)
    ;               reduce using rule 42 (vector -> [ expr_list ] .)
    [               reduce using rule 42 (vector -> [ expr_list ] .)
    (               reduce using rule 42 (vector -> [ expr_list ] .)
    '               reduce using rule 42 (vector -> [ expr_list ] .)
    :               reduce using rule 42 (vector -> [ expr_list ] .)
    XOR             reduce using rule 42 (vector -> [ expr_list ] .)
    OR              reduce using rule 42 (vector -> [ expr_list ] .)
    AND             reduce using rule 42 (vector -> [ expr_list ] .)
    LOWER_EQUAL     reduce using rule 42 (vector -> [ expr_list ] .)
    LOWER           reduce using rule 42 (vector -> [ expr_list ] .)
    GREATER_EQUAL   reduce using rule 42 (vector -> [ expr_list ] .)
    GREATER         reduce using rule 42 (vector -> [ expr_list ] .)
    NOT_EQUAL       reduce using rule 42 (vector -> [ expr_list ] .)
    EQUAL           reduce using rule 42 (vector -> [ expr_list ] .)
    DOT_REMAINDER   reduce using rule 42 (vector -> [ expr_list ] .)
    DOT_DIVIDE      reduce using rule 42 (vector -> [ expr_list ] .)
    DOT_TIMES       reduce using rule 42 (vector -> [ expr_list ] .)
    DOT_MINUS       reduce using rule 42 (vector -> [ expr_list ] .)
    DOT_PLUS        reduce using rule 42 (vector -> [ expr_list ] .)
    REMAINDER       reduce using rule 42 (vector -> [ expr_list ] .)
    DIVIDE          reduce using rule 42 (vector -> [ expr_list ] .)
    TIMES           reduce using rule 42 (vector -> [ expr_list ] .)
    MINUS           reduce using rule 42 (vector -> [ expr_list ] .)
    PLUS            reduce using rule 42 (vector -> [ expr_list ] .)
    )               reduce using rule 42 (vector -> [ expr_list ] .)
    ,               reduce using rule 42 (vector -> [ expr_list ] .)
    ]               reduce using rule 42 (vector -> [ expr_list ] .)


state 120

    (6) expr -> ZEROS ( expr_list . )
    (40) expr_list -> expr_list . , expr
    )               shift and go to state 138
    ,               shift and go to state 115


state 121

    (7) expr -> ONES ( expr_list . )
    (40) expr_list -> expr_list . , expr
    )               shift and go to state 139
    ,               shift and go to state 115


state 122

    (8) expr -> EYE ( expr_list . )
    (40) expr_list -> expr_list . , expr
    )               shift and go to state 140
    ,               shift and go to state 115


state 123

    (46) function -> FUNCTION ID ( . expr_list ) statement
    (39) expr_list -> . expr
    (40) expr_list -> . expr_list , expr
    (41) expr_list -> .
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    )               reduce using rule 41 (expr_list -> .)
    ,               reduce using rule 41 (expr_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr_list                      shift and go to state 141
    expr                           shift and go to state 68
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 124

    (48) statement -> FOR ( ID IN . expr ) statement
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr                           shift and go to state 142
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 125

    (52) statement -> expr REMAINDER_ASSIGN expr ; .
    {               reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    FOR             reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    WHILE           reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    IF              reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    CONTINUE        reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    BREAK           reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    RETURN          reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    PRINT           reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    ZEROS           reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    ONES            reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    EYE             reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    STRING          reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    ID              reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    (               reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    NOT             reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    MINUS           reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    FUNCTION        reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    [               reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    $end            reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    }               reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)
    ELSE            reduce using rule 52 (statement -> expr REMAINDER_ASSIGN expr ; .)


state 126

    (53) statement -> expr DIVIDE_ASSIGN expr ; .
    {               reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    FOR             reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    WHILE           reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    IF              reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    CONTINUE        reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    BREAK           reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    RETURN          reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    PRINT           reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    ZEROS           reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    ONES            reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    EYE             reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    STRING          reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    ID              reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    (               reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    NOT             reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    MINUS           reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    FUNCTION        reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    [               reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    $end            reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    }               reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)
    ELSE            reduce using rule 53 (statement -> expr DIVIDE_ASSIGN expr ; .)


state 127

    (54) statement -> expr TIMES_ASSIGN expr ; .
    {               reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    FOR             reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    WHILE           reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    IF              reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    CONTINUE        reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    BREAK           reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    RETURN          reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    PRINT           reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    ZEROS           reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    ONES            reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    EYE             reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    STRING          reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    ID              reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    (               reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    NOT             reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    MINUS           reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    FUNCTION        reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    [               reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    $end            reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    }               reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)
    ELSE            reduce using rule 54 (statement -> expr TIMES_ASSIGN expr ; .)


state 128

    (55) statement -> expr MINUS_ASSIGN expr ; .
    {               reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    FOR             reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    WHILE           reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    IF              reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    CONTINUE        reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    BREAK           reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    RETURN          reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    PRINT           reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    ZEROS           reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    ONES            reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    EYE             reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    STRING          reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    ID              reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    (               reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    NOT             reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    MINUS           reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    FUNCTION        reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    [               reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    $end            reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    }               reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)
    ELSE            reduce using rule 55 (statement -> expr MINUS_ASSIGN expr ; .)


state 129

    (56) statement -> expr PLUS_ASSIGN expr ; .
    {               reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    FOR             reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    WHILE           reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    IF              reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    CONTINUE        reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    BREAK           reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    RETURN          reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    PRINT           reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    ZEROS           reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    ONES            reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    EYE             reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    STRING          reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    ID              reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    (               reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    NOT             reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    MINUS           reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    FUNCTION        reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    [               reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    $end            reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    }               reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)
    ELSE            reduce using rule 56 (statement -> expr PLUS_ASSIGN expr ; .)


state 130

    (57) statement -> expr ASSIGN expr ; .
    {               reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    FOR             reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    WHILE           reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    IF              reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    CONTINUE        reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    BREAK           reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    RETURN          reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    PRINT           reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    ZEROS           reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    ONES            reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    EYE             reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    STRING          reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    FLOAT_NUMBER    reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    INT_NUMBER      reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    ID              reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    (               reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    NOT             reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    MINUS           reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    FUNCTION        reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    [               reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    $end            reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    }               reduce using rule 57 (statement -> expr ASSIGN expr ; .)
    ELSE            reduce using rule 57 (statement -> expr ASSIGN expr ; .)


state 131

    (4) expr -> expr [ expr_list ] .
    REMAINDER_ASSIGN reduce using rule 4 (expr -> expr [ expr_list ] .)
    DIVIDE_ASSIGN   reduce using rule 4 (expr -> expr [ expr_list ] .)
    TIMES_ASSIGN    reduce using rule 4 (expr -> expr [ expr_list ] .)
    MINUS_ASSIGN    reduce using rule 4 (expr -> expr [ expr_list ] .)
    PLUS_ASSIGN     reduce using rule 4 (expr -> expr [ expr_list ] .)
    ASSIGN          reduce using rule 4 (expr -> expr [ expr_list ] .)
    ;               reduce using rule 4 (expr -> expr [ expr_list ] .)
    [               reduce using rule 4 (expr -> expr [ expr_list ] .)
    (               reduce using rule 4 (expr -> expr [ expr_list ] .)
    '               reduce using rule 4 (expr -> expr [ expr_list ] .)
    :               reduce using rule 4 (expr -> expr [ expr_list ] .)
    XOR             reduce using rule 4 (expr -> expr [ expr_list ] .)
    OR              reduce using rule 4 (expr -> expr [ expr_list ] .)
    AND             reduce using rule 4 (expr -> expr [ expr_list ] .)
    LOWER_EQUAL     reduce using rule 4 (expr -> expr [ expr_list ] .)
    LOWER           reduce using rule 4 (expr -> expr [ expr_list ] .)
    GREATER_EQUAL   reduce using rule 4 (expr -> expr [ expr_list ] .)
    GREATER         reduce using rule 4 (expr -> expr [ expr_list ] .)
    NOT_EQUAL       reduce using rule 4 (expr -> expr [ expr_list ] .)
    EQUAL           reduce using rule 4 (expr -> expr [ expr_list ] .)
    DOT_REMAINDER   reduce using rule 4 (expr -> expr [ expr_list ] .)
    DOT_DIVIDE      reduce using rule 4 (expr -> expr [ expr_list ] .)
    DOT_TIMES       reduce using rule 4 (expr -> expr [ expr_list ] .)
    DOT_MINUS       reduce using rule 4 (expr -> expr [ expr_list ] .)
    DOT_PLUS        reduce using rule 4 (expr -> expr [ expr_list ] .)
    REMAINDER       reduce using rule 4 (expr -> expr [ expr_list ] .)
    DIVIDE          reduce using rule 4 (expr -> expr [ expr_list ] .)
    TIMES           reduce using rule 4 (expr -> expr [ expr_list ] .)
    MINUS           reduce using rule 4 (expr -> expr [ expr_list ] .)
    PLUS            reduce using rule 4 (expr -> expr [ expr_list ] .)
    )               reduce using rule 4 (expr -> expr [ expr_list ] .)
    ,               reduce using rule 4 (expr -> expr [ expr_list ] .)
    ]               reduce using rule 4 (expr -> expr [ expr_list ] .)


state 132

    (5) expr -> expr ( expr_list ) .
    REMAINDER_ASSIGN reduce using rule 5 (expr -> expr ( expr_list ) .)
    DIVIDE_ASSIGN   reduce using rule 5 (expr -> expr ( expr_list ) .)
    TIMES_ASSIGN    reduce using rule 5 (expr -> expr ( expr_list ) .)
    MINUS_ASSIGN    reduce using rule 5 (expr -> expr ( expr_list ) .)
    PLUS_ASSIGN     reduce using rule 5 (expr -> expr ( expr_list ) .)
    ASSIGN          reduce using rule 5 (expr -> expr ( expr_list ) .)
    ;               reduce using rule 5 (expr -> expr ( expr_list ) .)
    [               reduce using rule 5 (expr -> expr ( expr_list ) .)
    (               reduce using rule 5 (expr -> expr ( expr_list ) .)
    '               reduce using rule 5 (expr -> expr ( expr_list ) .)
    :               reduce using rule 5 (expr -> expr ( expr_list ) .)
    XOR             reduce using rule 5 (expr -> expr ( expr_list ) .)
    OR              reduce using rule 5 (expr -> expr ( expr_list ) .)
    AND             reduce using rule 5 (expr -> expr ( expr_list ) .)
    LOWER_EQUAL     reduce using rule 5 (expr -> expr ( expr_list ) .)
    LOWER           reduce using rule 5 (expr -> expr ( expr_list ) .)
    GREATER_EQUAL   reduce using rule 5 (expr -> expr ( expr_list ) .)
    GREATER         reduce using rule 5 (expr -> expr ( expr_list ) .)
    NOT_EQUAL       reduce using rule 5 (expr -> expr ( expr_list ) .)
    EQUAL           reduce using rule 5 (expr -> expr ( expr_list ) .)
    DOT_REMAINDER   reduce using rule 5 (expr -> expr ( expr_list ) .)
    DOT_DIVIDE      reduce using rule 5 (expr -> expr ( expr_list ) .)
    DOT_TIMES       reduce using rule 5 (expr -> expr ( expr_list ) .)
    DOT_MINUS       reduce using rule 5 (expr -> expr ( expr_list ) .)
    DOT_PLUS        reduce using rule 5 (expr -> expr ( expr_list ) .)
    REMAINDER       reduce using rule 5 (expr -> expr ( expr_list ) .)
    DIVIDE          reduce using rule 5 (expr -> expr ( expr_list ) .)
    TIMES           reduce using rule 5 (expr -> expr ( expr_list ) .)
    MINUS           reduce using rule 5 (expr -> expr ( expr_list ) .)
    PLUS            reduce using rule 5 (expr -> expr ( expr_list ) .)
    )               reduce using rule 5 (expr -> expr ( expr_list ) .)
    ,               reduce using rule 5 (expr -> expr ( expr_list ) .)
    ]               reduce using rule 5 (expr -> expr ( expr_list ) .)


state 133

    (49) statement -> WHILE ( expr ) . statement
    (47) statement -> . { statement_series }
    (48) statement -> . FOR ( ID IN expr ) statement
    (49) statement -> . WHILE ( expr ) statement
    (50) statement -> . IF ( expr ) statement ELSE statement
    (51) statement -> . IF ( expr ) statement
    (52) statement -> . expr REMAINDER_ASSIGN expr ;
    (53) statement -> . expr DIVIDE_ASSIGN expr ;
    (54) statement -> . expr TIMES_ASSIGN expr ;
    (55) statement -> . expr MINUS_ASSIGN expr ;
    (56) statement -> . expr PLUS_ASSIGN expr ;
    (57) statement -> . expr ASSIGN expr ;
    (58) statement -> . CONTINUE ;
    (59) statement -> . BREAK ;
    (60) statement -> . RETURN expr_list ;
    (61) statement -> . PRINT expr_list ;
    (62) statement -> . function
    (63) statement -> . expr ;
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (46) function -> . FUNCTION ID ( expr_list ) statement
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    FUNCTION        shift and go to state 27
    [               shift and go to state 16

    expr                           shift and go to state 8
    statement                      shift and go to state 143
    function                       shift and go to state 15
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 134

    (50) statement -> IF ( expr ) . statement ELSE statement
    (51) statement -> IF ( expr ) . statement
    (47) statement -> . { statement_series }
    (48) statement -> . FOR ( ID IN expr ) statement
    (49) statement -> . WHILE ( expr ) statement
    (50) statement -> . IF ( expr ) statement ELSE statement
    (51) statement -> . IF ( expr ) statement
    (52) statement -> . expr REMAINDER_ASSIGN expr ;
    (53) statement -> . expr DIVIDE_ASSIGN expr ;
    (54) statement -> . expr TIMES_ASSIGN expr ;
    (55) statement -> . expr MINUS_ASSIGN expr ;
    (56) statement -> . expr PLUS_ASSIGN expr ;
    (57) statement -> . expr ASSIGN expr ;
    (58) statement -> . CONTINUE ;
    (59) statement -> . BREAK ;
    (60) statement -> . RETURN expr_list ;
    (61) statement -> . PRINT expr_list ;
    (62) statement -> . function
    (63) statement -> . expr ;
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (46) function -> . FUNCTION ID ( expr_list ) statement
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    FUNCTION        shift and go to state 27
    [               shift and go to state 16

    expr                           shift and go to state 8
    statement                      shift and go to state 144
    function                       shift and go to state 15
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 135

    (40) expr_list -> expr_list , expr .
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    ;               reduce using rule 40 (expr_list -> expr_list , expr .)
    ,               reduce using rule 40 (expr_list -> expr_list , expr .)
    ]               reduce using rule 40 (expr_list -> expr_list , expr .)
    )               reduce using rule 40 (expr_list -> expr_list , expr .)
    [               shift and go to state 40
    (               shift and go to state 41
    '               shift and go to state 42
    :               shift and go to state 43
    XOR             shift and go to state 44
    OR              shift and go to state 45
    AND             shift and go to state 46
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 136

    (43) vector_list -> vector_list , vector .
    ]               reduce using rule 43 (vector_list -> vector_list , vector .)
    ,               reduce using rule 43 (vector_list -> vector_list , vector .)


state 137

    (42) vector -> [ . expr_list ]
    (39) expr_list -> . expr
    (40) expr_list -> . expr_list , expr
    (41) expr_list -> .
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    ]               reduce using rule 41 (expr_list -> .)
    ,               reduce using rule 41 (expr_list -> .)
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    [               shift and go to state 16

    expr_list                      shift and go to state 72
    expr                           shift and go to state 68
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 138

    (6) expr -> ZEROS ( expr_list ) .
    REMAINDER_ASSIGN reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    DIVIDE_ASSIGN   reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    TIMES_ASSIGN    reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    MINUS_ASSIGN    reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    PLUS_ASSIGN     reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    ASSIGN          reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    ;               reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    [               reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    (               reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    '               reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    :               reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    XOR             reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    OR              reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    AND             reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    LOWER_EQUAL     reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    LOWER           reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    GREATER_EQUAL   reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    GREATER         reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    NOT_EQUAL       reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    EQUAL           reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    DOT_REMAINDER   reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    DOT_DIVIDE      reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    DOT_TIMES       reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    DOT_MINUS       reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    DOT_PLUS        reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    REMAINDER       reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    DIVIDE          reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    TIMES           reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    MINUS           reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    PLUS            reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    )               reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    ,               reduce using rule 6 (expr -> ZEROS ( expr_list ) .)
    ]               reduce using rule 6 (expr -> ZEROS ( expr_list ) .)


state 139

    (7) expr -> ONES ( expr_list ) .
    REMAINDER_ASSIGN reduce using rule 7 (expr -> ONES ( expr_list ) .)
    DIVIDE_ASSIGN   reduce using rule 7 (expr -> ONES ( expr_list ) .)
    TIMES_ASSIGN    reduce using rule 7 (expr -> ONES ( expr_list ) .)
    MINUS_ASSIGN    reduce using rule 7 (expr -> ONES ( expr_list ) .)
    PLUS_ASSIGN     reduce using rule 7 (expr -> ONES ( expr_list ) .)
    ASSIGN          reduce using rule 7 (expr -> ONES ( expr_list ) .)
    ;               reduce using rule 7 (expr -> ONES ( expr_list ) .)
    [               reduce using rule 7 (expr -> ONES ( expr_list ) .)
    (               reduce using rule 7 (expr -> ONES ( expr_list ) .)
    '               reduce using rule 7 (expr -> ONES ( expr_list ) .)
    :               reduce using rule 7 (expr -> ONES ( expr_list ) .)
    XOR             reduce using rule 7 (expr -> ONES ( expr_list ) .)
    OR              reduce using rule 7 (expr -> ONES ( expr_list ) .)
    AND             reduce using rule 7 (expr -> ONES ( expr_list ) .)
    LOWER_EQUAL     reduce using rule 7 (expr -> ONES ( expr_list ) .)
    LOWER           reduce using rule 7 (expr -> ONES ( expr_list ) .)
    GREATER_EQUAL   reduce using rule 7 (expr -> ONES ( expr_list ) .)
    GREATER         reduce using rule 7 (expr -> ONES ( expr_list ) .)
    NOT_EQUAL       reduce using rule 7 (expr -> ONES ( expr_list ) .)
    EQUAL           reduce using rule 7 (expr -> ONES ( expr_list ) .)
    DOT_REMAINDER   reduce using rule 7 (expr -> ONES ( expr_list ) .)
    DOT_DIVIDE      reduce using rule 7 (expr -> ONES ( expr_list ) .)
    DOT_TIMES       reduce using rule 7 (expr -> ONES ( expr_list ) .)
    DOT_MINUS       reduce using rule 7 (expr -> ONES ( expr_list ) .)
    DOT_PLUS        reduce using rule 7 (expr -> ONES ( expr_list ) .)
    REMAINDER       reduce using rule 7 (expr -> ONES ( expr_list ) .)
    DIVIDE          reduce using rule 7 (expr -> ONES ( expr_list ) .)
    TIMES           reduce using rule 7 (expr -> ONES ( expr_list ) .)
    MINUS           reduce using rule 7 (expr -> ONES ( expr_list ) .)
    PLUS            reduce using rule 7 (expr -> ONES ( expr_list ) .)
    )               reduce using rule 7 (expr -> ONES ( expr_list ) .)
    ,               reduce using rule 7 (expr -> ONES ( expr_list ) .)
    ]               reduce using rule 7 (expr -> ONES ( expr_list ) .)


state 140

    (8) expr -> EYE ( expr_list ) .
    REMAINDER_ASSIGN reduce using rule 8 (expr -> EYE ( expr_list ) .)
    DIVIDE_ASSIGN   reduce using rule 8 (expr -> EYE ( expr_list ) .)
    TIMES_ASSIGN    reduce using rule 8 (expr -> EYE ( expr_list ) .)
    MINUS_ASSIGN    reduce using rule 8 (expr -> EYE ( expr_list ) .)
    PLUS_ASSIGN     reduce using rule 8 (expr -> EYE ( expr_list ) .)
    ASSIGN          reduce using rule 8 (expr -> EYE ( expr_list ) .)
    ;               reduce using rule 8 (expr -> EYE ( expr_list ) .)
    [               reduce using rule 8 (expr -> EYE ( expr_list ) .)
    (               reduce using rule 8 (expr -> EYE ( expr_list ) .)
    '               reduce using rule 8 (expr -> EYE ( expr_list ) .)
    :               reduce using rule 8 (expr -> EYE ( expr_list ) .)
    XOR             reduce using rule 8 (expr -> EYE ( expr_list ) .)
    OR              reduce using rule 8 (expr -> EYE ( expr_list ) .)
    AND             reduce using rule 8 (expr -> EYE ( expr_list ) .)
    LOWER_EQUAL     reduce using rule 8 (expr -> EYE ( expr_list ) .)
    LOWER           reduce using rule 8 (expr -> EYE ( expr_list ) .)
    GREATER_EQUAL   reduce using rule 8 (expr -> EYE ( expr_list ) .)
    GREATER         reduce using rule 8 (expr -> EYE ( expr_list ) .)
    NOT_EQUAL       reduce using rule 8 (expr -> EYE ( expr_list ) .)
    EQUAL           reduce using rule 8 (expr -> EYE ( expr_list ) .)
    DOT_REMAINDER   reduce using rule 8 (expr -> EYE ( expr_list ) .)
    DOT_DIVIDE      reduce using rule 8 (expr -> EYE ( expr_list ) .)
    DOT_TIMES       reduce using rule 8 (expr -> EYE ( expr_list ) .)
    DOT_MINUS       reduce using rule 8 (expr -> EYE ( expr_list ) .)
    DOT_PLUS        reduce using rule 8 (expr -> EYE ( expr_list ) .)
    REMAINDER       reduce using rule 8 (expr -> EYE ( expr_list ) .)
    DIVIDE          reduce using rule 8 (expr -> EYE ( expr_list ) .)
    TIMES           reduce using rule 8 (expr -> EYE ( expr_list ) .)
    MINUS           reduce using rule 8 (expr -> EYE ( expr_list ) .)
    PLUS            reduce using rule 8 (expr -> EYE ( expr_list ) .)
    )               reduce using rule 8 (expr -> EYE ( expr_list ) .)
    ,               reduce using rule 8 (expr -> EYE ( expr_list ) .)
    ]               reduce using rule 8 (expr -> EYE ( expr_list ) .)


state 141

    (46) function -> FUNCTION ID ( expr_list . ) statement
    (40) expr_list -> expr_list . , expr
    )               shift and go to state 145
    ,               shift and go to state 115


state 142

    (48) statement -> FOR ( ID IN expr . ) statement
    (4) expr -> expr . [ expr_list ]
    (5) expr -> expr . ( expr_list )
    (16) expr -> expr . '
    (19) expr -> expr . : expr
    (20) expr -> expr . XOR expr
    (21) expr -> expr . OR expr
    (22) expr -> expr . AND expr
    (23) expr -> expr . LOWER_EQUAL expr
    (24) expr -> expr . LOWER expr
    (25) expr -> expr . GREATER_EQUAL expr
    (26) expr -> expr . GREATER expr
    (27) expr -> expr . NOT_EQUAL expr
    (28) expr -> expr . EQUAL expr
    (29) expr -> expr . DOT_REMAINDER expr
    (30) expr -> expr . DOT_DIVIDE expr
    (31) expr -> expr . DOT_TIMES expr
    (32) expr -> expr . DOT_MINUS expr
    (33) expr -> expr . DOT_PLUS expr
    (34) expr -> expr . REMAINDER expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . TIMES expr
    (37) expr -> expr . MINUS expr
    (38) expr -> expr . PLUS expr
    )               shift and go to state 146
    [               shift and go to state 40
    (               shift and go to state 41
    '               shift and go to state 42
    :               shift and go to state 43
    XOR             shift and go to state 44
    OR              shift and go to state 45
    AND             shift and go to state 46
    LOWER_EQUAL     shift and go to state 47
    LOWER           shift and go to state 48
    GREATER_EQUAL   shift and go to state 49
    GREATER         shift and go to state 50
    NOT_EQUAL       shift and go to state 51
    EQUAL           shift and go to state 52
    DOT_REMAINDER   shift and go to state 53
    DOT_DIVIDE      shift and go to state 54
    DOT_TIMES       shift and go to state 55
    DOT_MINUS       shift and go to state 56
    DOT_PLUS        shift and go to state 57
    REMAINDER       shift and go to state 58
    DIVIDE          shift and go to state 59
    TIMES           shift and go to state 60
    MINUS           shift and go to state 61
    PLUS            shift and go to state 62


state 143

    (49) statement -> WHILE ( expr ) statement .
    {               reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    FOR             reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    WHILE           reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    IF              reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    CONTINUE        reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    BREAK           reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    RETURN          reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    PRINT           reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    ZEROS           reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    ONES            reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    EYE             reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    STRING          reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    FLOAT_NUMBER    reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    INT_NUMBER      reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    ID              reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    (               reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    NOT             reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    MINUS           reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    FUNCTION        reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    [               reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    $end            reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    }               reduce using rule 49 (statement -> WHILE ( expr ) statement .)
    ELSE            reduce using rule 49 (statement -> WHILE ( expr ) statement .)


state 144

    (50) statement -> IF ( expr ) statement . ELSE statement
    (51) statement -> IF ( expr ) statement .
    ELSE            shift and go to state 147
    {               reduce using rule 51 (statement -> IF ( expr ) statement .)
    FOR             reduce using rule 51 (statement -> IF ( expr ) statement .)
    WHILE           reduce using rule 51 (statement -> IF ( expr ) statement .)
    IF              reduce using rule 51 (statement -> IF ( expr ) statement .)
    CONTINUE        reduce using rule 51 (statement -> IF ( expr ) statement .)
    BREAK           reduce using rule 51 (statement -> IF ( expr ) statement .)
    RETURN          reduce using rule 51 (statement -> IF ( expr ) statement .)
    PRINT           reduce using rule 51 (statement -> IF ( expr ) statement .)
    ZEROS           reduce using rule 51 (statement -> IF ( expr ) statement .)
    ONES            reduce using rule 51 (statement -> IF ( expr ) statement .)
    EYE             reduce using rule 51 (statement -> IF ( expr ) statement .)
    STRING          reduce using rule 51 (statement -> IF ( expr ) statement .)
    FLOAT_NUMBER    reduce using rule 51 (statement -> IF ( expr ) statement .)
    INT_NUMBER      reduce using rule 51 (statement -> IF ( expr ) statement .)
    ID              reduce using rule 51 (statement -> IF ( expr ) statement .)
    (               reduce using rule 51 (statement -> IF ( expr ) statement .)
    NOT             reduce using rule 51 (statement -> IF ( expr ) statement .)
    MINUS           reduce using rule 51 (statement -> IF ( expr ) statement .)
    FUNCTION        reduce using rule 51 (statement -> IF ( expr ) statement .)
    [               reduce using rule 51 (statement -> IF ( expr ) statement .)
    $end            reduce using rule 51 (statement -> IF ( expr ) statement .)
    }               reduce using rule 51 (statement -> IF ( expr ) statement .)


state 145

    (46) function -> FUNCTION ID ( expr_list ) . statement
    (47) statement -> . { statement_series }
    (48) statement -> . FOR ( ID IN expr ) statement
    (49) statement -> . WHILE ( expr ) statement
    (50) statement -> . IF ( expr ) statement ELSE statement
    (51) statement -> . IF ( expr ) statement
    (52) statement -> . expr REMAINDER_ASSIGN expr ;
    (53) statement -> . expr DIVIDE_ASSIGN expr ;
    (54) statement -> . expr TIMES_ASSIGN expr ;
    (55) statement -> . expr MINUS_ASSIGN expr ;
    (56) statement -> . expr PLUS_ASSIGN expr ;
    (57) statement -> . expr ASSIGN expr ;
    (58) statement -> . CONTINUE ;
    (59) statement -> . BREAK ;
    (60) statement -> . RETURN expr_list ;
    (61) statement -> . PRINT expr_list ;
    (62) statement -> . function
    (63) statement -> . expr ;
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (46) function -> . FUNCTION ID ( expr_list ) statement
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    FUNCTION        shift and go to state 27
    [               shift and go to state 16

    statement                      shift and go to state 148
    expr                           shift and go to state 8
    function                       shift and go to state 15
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 146

    (48) statement -> FOR ( ID IN expr ) . statement
    (47) statement -> . { statement_series }
    (48) statement -> . FOR ( ID IN expr ) statement
    (49) statement -> . WHILE ( expr ) statement
    (50) statement -> . IF ( expr ) statement ELSE statement
    (51) statement -> . IF ( expr ) statement
    (52) statement -> . expr REMAINDER_ASSIGN expr ;
    (53) statement -> . expr DIVIDE_ASSIGN expr ;
    (54) statement -> . expr TIMES_ASSIGN expr ;
    (55) statement -> . expr MINUS_ASSIGN expr ;
    (56) statement -> . expr PLUS_ASSIGN expr ;
    (57) statement -> . expr ASSIGN expr ;
    (58) statement -> . CONTINUE ;
    (59) statement -> . BREAK ;
    (60) statement -> . RETURN expr_list ;
    (61) statement -> . PRINT expr_list ;
    (62) statement -> . function
    (63) statement -> . expr ;
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (46) function -> . FUNCTION ID ( expr_list ) statement
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    FUNCTION        shift and go to state 27
    [               shift and go to state 16

    expr                           shift and go to state 8
    statement                      shift and go to state 149
    function                       shift and go to state 15
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 147

    (50) statement -> IF ( expr ) statement ELSE . statement
    (47) statement -> . { statement_series }
    (48) statement -> . FOR ( ID IN expr ) statement
    (49) statement -> . WHILE ( expr ) statement
    (50) statement -> . IF ( expr ) statement ELSE statement
    (51) statement -> . IF ( expr ) statement
    (52) statement -> . expr REMAINDER_ASSIGN expr ;
    (53) statement -> . expr DIVIDE_ASSIGN expr ;
    (54) statement -> . expr TIMES_ASSIGN expr ;
    (55) statement -> . expr MINUS_ASSIGN expr ;
    (56) statement -> . expr PLUS_ASSIGN expr ;
    (57) statement -> . expr ASSIGN expr ;
    (58) statement -> . CONTINUE ;
    (59) statement -> . BREAK ;
    (60) statement -> . RETURN expr_list ;
    (61) statement -> . PRINT expr_list ;
    (62) statement -> . function
    (63) statement -> . expr ;
    (4) expr -> . expr [ expr_list ]
    (5) expr -> . expr ( expr_list )
    (6) expr -> . ZEROS ( expr_list )
    (7) expr -> . ONES ( expr_list )
    (8) expr -> . EYE ( expr_list )
    (9) expr -> . matrix
    (10) expr -> . vector
    (11) expr -> . STRING
    (12) expr -> . FLOAT_NUMBER
    (13) expr -> . INT_NUMBER
    (14) expr -> . ID
    (15) expr -> . ( expr )
    (16) expr -> . expr '
    (17) expr -> . NOT expr
    (18) expr -> . MINUS expr
    (19) expr -> . expr : expr
    (20) expr -> . expr XOR expr
    (21) expr -> . expr OR expr
    (22) expr -> . expr AND expr
    (23) expr -> . expr LOWER_EQUAL expr
    (24) expr -> . expr LOWER expr
    (25) expr -> . expr GREATER_EQUAL expr
    (26) expr -> . expr GREATER expr
    (27) expr -> . expr NOT_EQUAL expr
    (28) expr -> . expr EQUAL expr
    (29) expr -> . expr DOT_REMAINDER expr
    (30) expr -> . expr DOT_DIVIDE expr
    (31) expr -> . expr DOT_TIMES expr
    (32) expr -> . expr DOT_MINUS expr
    (33) expr -> . expr DOT_PLUS expr
    (34) expr -> . expr REMAINDER expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr TIMES expr
    (37) expr -> . expr MINUS expr
    (38) expr -> . expr PLUS expr
    (46) function -> . FUNCTION ID ( expr_list ) statement
    (45) matrix -> . [ vector_list ]
    (42) vector -> . [ expr_list ]
    {               shift and go to state 4
    FOR             shift and go to state 5
    WHILE           shift and go to state 9
    IF              shift and go to state 10
    CONTINUE        shift and go to state 11
    BREAK           shift and go to state 12
    RETURN          shift and go to state 13
    PRINT           shift and go to state 14
    ZEROS           shift and go to state 17
    ONES            shift and go to state 18
    EYE             shift and go to state 19
    STRING          shift and go to state 22
    FLOAT_NUMBER    shift and go to state 23
    INT_NUMBER      shift and go to state 24
    ID              shift and go to state 7
    (               shift and go to state 6
    NOT             shift and go to state 25
    MINUS           shift and go to state 26
    FUNCTION        shift and go to state 27
    [               shift and go to state 16

    expr                           shift and go to state 8
    statement                      shift and go to state 150
    function                       shift and go to state 15
    matrix                         shift and go to state 20
    vector                         shift and go to state 21

state 148

    (46) function -> FUNCTION ID ( expr_list ) statement .
    {               reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    FOR             reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    WHILE           reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    IF              reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    CONTINUE        reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    BREAK           reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    RETURN          reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    PRINT           reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    ZEROS           reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    ONES            reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    EYE             reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    STRING          reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    FLOAT_NUMBER    reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    INT_NUMBER      reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    ID              reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    (               reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    NOT             reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    MINUS           reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    FUNCTION        reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    [               reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    $end            reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    }               reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)
    ELSE            reduce using rule 46 (function -> FUNCTION ID ( expr_list ) statement .)


state 149

    (48) statement -> FOR ( ID IN expr ) statement .
    {               reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    FOR             reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    WHILE           reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    IF              reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    CONTINUE        reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    BREAK           reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    RETURN          reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    PRINT           reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    ZEROS           reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    ONES            reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    EYE             reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    STRING          reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    FLOAT_NUMBER    reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    INT_NUMBER      reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    ID              reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    (               reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    NOT             reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    MINUS           reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    FUNCTION        reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    [               reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    $end            reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    }               reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)
    ELSE            reduce using rule 48 (statement -> FOR ( ID IN expr ) statement .)


state 150

    (50) statement -> IF ( expr ) statement ELSE statement .
    {               reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    FOR             reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    WHILE           reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    IF              reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    CONTINUE        reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    BREAK           reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    RETURN          reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    PRINT           reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    ZEROS           reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    ONES            reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    EYE             reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    STRING          reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    FLOAT_NUMBER    reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    INT_NUMBER      reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    ID              reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    (               reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    NOT             reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    MINUS           reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    FUNCTION        reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    [               reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    $end            reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    }               reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)
    ELSE            reduce using rule 50 (statement -> IF ( expr ) statement ELSE statement .)


Conflicts:

reduce/reduce conflict in state 73 resolved using rule vector_list -> vector
rejected rule (expr -> vector) in state 73